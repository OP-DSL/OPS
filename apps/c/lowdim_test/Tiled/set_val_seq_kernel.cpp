//
// auto-generated by ops.py
//
#define OPS_ACC0(x, y, z)                                                      \
  (n_x * 1 + n_y * xdim0_set_val * 1 +                                         \
   n_z * xdim0_set_val * ydim0_set_val * 1 + x + xdim0_set_val * (y) +         \
   xdim0_set_val * ydim0_set_val * (z))

// user function

// host stub function
void ops_par_loop_set_val_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];

  // Timing
  double t1, t2, c1, c2;

  ops_arg args[2] = {arg0, arg1};

#ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args, 2, range, 6))
    return;
#endif

  if (OPS_diags > 1) {
    OPS_kernels[6].count++;
    ops_timers_core(&c2, &t2);
  }

  // compute locally allocated range for the sub-block
  int start[3];
  int end[3];

  for (int n = 0; n < 3; n++) {
    start[n] = range[2 * n];
    end[n] = range[2 * n + 1];
  }

#ifdef OPS_DEBUG
  ops_register_args(args, "set_val");
#endif

  // set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double *__restrict__ dat = (double *)(args[0].data + base0);

  const double *__restrict__ val = (double *)args[1].data;

  // initialize global variable with the dimension of dats
  int xdim0_set_val = args[0].dat->size[0];
  int ydim0_set_val = args[0].dat->size[1];

  if (OPS_diags > 1) {
    ops_timers_core(&c1, &t1);
    OPS_kernels[6].mpi_time += t1 - t2;
  }

#pragma omp parallel for collapse(2)
  for (int n_z = start[2]; n_z < end[2]; n_z++) {
    for (int n_y = start[1]; n_y < end[1]; n_y++) {
#ifdef intel
#pragma loop_count(10000)
#pragma omp simd aligned(dat)
#else
#pragma simd
#endif
      for (int n_x = start[0]; n_x < end[0]; n_x++) {

        dat[OPS_ACC0(0, 0, 0)] = *val;
      }
    }
  }
  if (OPS_diags > 1) {
    ops_timers_core(&c2, &t2);
    OPS_kernels[6].time += t2 - t1;
  }

  if (OPS_diags > 1) {
    // Update kernel record
    ops_timers_core(&c1, &t1);
    OPS_kernels[6].mpi_time += t1 - t2;
    OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg0);
  }
}
#undef OPS_ACC0

void ops_par_loop_set_val(char const *name, ops_block block, int dim,
                          int *range, ops_arg arg0, ops_arg arg1) {
  ops_kernel_descriptor *desc =
      (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 6;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 6;
  for (int i = 0; i < 6; i++) {
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 2;
  desc->args = (ops_arg *)malloc(2 * sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  char *tmp = (char *)malloc(1 * sizeof(double));
  memcpy(tmp, arg1.data, 1 * sizeof(double));
  desc->args[1].data = tmp;
  desc->function = ops_par_loop_set_val_execute;
  if (OPS_diags > 1) {
    ops_timing_realloc(6, "set_val");
  }
  ops_enqueue_kernel(desc);
}
