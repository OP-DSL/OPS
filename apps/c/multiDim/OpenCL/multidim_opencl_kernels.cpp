//
// auto-generated by ops.py//

// header
#define OPS_API 2
#define OPS_2D
#define OPS_SOA
#include "ops_lib_core.h"
#include "ops_opencl_rt_support.h"
#include "stdio.h"
#include "stdlib.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants

void ops_init_backend() {}

// this needs to be a platform specific copy symbol to device function
void ops_decl_const_char(int dim, char const *type, int typeSize, char *dat,
                         char const *name) {
  OPS_instance *instance = OPS_instance::getOPSInstance();
  ops_execute(instance);
  cl_int ret = 0;
  if (instance->opencl_instance->OPS_opencl_core.constant == NULL) {
    instance->opencl_instance->OPS_opencl_core.constant =
        (cl_mem *)malloc((0) * sizeof(cl_mem));
    for (int i = 0; i < 0; i++) {
      instance->opencl_instance->OPS_opencl_core.constant[i] = NULL;
    }
  }
  { throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name"); }
}

void buildOpenCLKernels(OPS_instance *instance) {
  static bool isbuilt = false;

  if (!isbuilt) {
    // clSafeCall( clUnloadCompiler() );

    instance->opencl_instance->OPS_opencl_core.n_kernels = 3;
    instance->opencl_instance->OPS_opencl_core.kernel =
        (cl_kernel *)malloc(3 * sizeof(cl_kernel));
  }
  isbuilt = true;
}

// user kernel files
#include "multidim_copy_kernel_opencl_kernel.cpp"
#include "multidim_kernel_opencl_kernel.cpp"
#include "multidim_reduce_kernel_opencl_kernel.cpp"
