//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_3D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

inline void advec_cell_kernel4_xdir(ptr_double density1,
  ptr_double energy1,
  const ptr_double mass_flux_x,
  const ptr_double vol_flux_x,
  const ptr_double pre_vol,
  const ptr_double post_vol,
  ptr_double pre_mass,
  ptr_double post_mass,
  ptr_double advec_vol,
  ptr_double post_ener,
  const ptr_double ener_flux) {

  OPS_ACCS(pre_mass, 0,0,0) = OPS_ACCS(density1, 0,0,0) * OPS_ACCS(pre_vol, 0,0,0);
  OPS_ACCS(post_mass, 0,0,0) = OPS_ACCS(pre_mass, 0,0,0) + OPS_ACCS(mass_flux_x, 0,0,0) - OPS_ACCS(mass_flux_x, 1,0,0);
  OPS_ACCS(post_ener, 0,0,0) = ( OPS_ACCS(energy1, 0,0,0) * OPS_ACCS(pre_mass, 0,0,0) + OPS_ACCS(ener_flux, 0,0,0) - OPS_ACCS(ener_flux, 1,0,0))/OPS_ACCS(post_mass, 0,0,0);
  OPS_ACCS(advec_vol, 0,0,0) = OPS_ACCS(pre_vol, 0,0,0) + OPS_ACCS(vol_flux_x, 0,0,0) - OPS_ACCS(vol_flux_x, 1,0,0);
  OPS_ACCS(density1, 0,0,0) = OPS_ACCS(post_mass, 0,0,0)/OPS_ACCS(advec_vol, 0,0,0);
  OPS_ACCS(energy1, 0,0,0) = OPS_ACCS(post_ener, 0,0,0);

}


__kernel void ops_advec_cell_kernel4_xdir(
__global double* restrict arg0,
__global double* restrict arg1,
__global const double* restrict arg2,
__global const double* restrict arg3,
__global const double* restrict arg4,
__global const double* restrict arg5,
__global double* restrict arg6,
__global double* restrict arg7,
__global double* restrict arg8,
__global double* restrict arg9,
__global const double* restrict arg10,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int base6,
const int base7,
const int base8,
const int base9,
const int base10,
const int size0,
const int size1,
const int size2 ){


  int idx_y = get_global_id(1);
  int idx_z = get_global_id(2);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim0_advec_cell_kernel4_xdir * ydim0_advec_cell_kernel4_xdir], xdim0_advec_cell_kernel4_xdir, ydim0_advec_cell_kernel4_xdir};
    ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim1_advec_cell_kernel4_xdir * ydim1_advec_cell_kernel4_xdir], xdim1_advec_cell_kernel4_xdir, ydim1_advec_cell_kernel4_xdir};
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim2_advec_cell_kernel4_xdir * ydim2_advec_cell_kernel4_xdir], xdim2_advec_cell_kernel4_xdir, ydim2_advec_cell_kernel4_xdir};
    const ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim3_advec_cell_kernel4_xdir * ydim3_advec_cell_kernel4_xdir], xdim3_advec_cell_kernel4_xdir, ydim3_advec_cell_kernel4_xdir};
    const ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim4_advec_cell_kernel4_xdir * ydim4_advec_cell_kernel4_xdir], xdim4_advec_cell_kernel4_xdir, ydim4_advec_cell_kernel4_xdir};
    const ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim5_advec_cell_kernel4_xdir * ydim5_advec_cell_kernel4_xdir], xdim5_advec_cell_kernel4_xdir, ydim5_advec_cell_kernel4_xdir};
    ptr_double ptr6 = { &arg6[base6 + idx_x * 1*1 + idx_y * 1*1 * xdim6_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim6_advec_cell_kernel4_xdir * ydim6_advec_cell_kernel4_xdir], xdim6_advec_cell_kernel4_xdir, ydim6_advec_cell_kernel4_xdir};
    ptr_double ptr7 = { &arg7[base7 + idx_x * 1*1 + idx_y * 1*1 * xdim7_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim7_advec_cell_kernel4_xdir * ydim7_advec_cell_kernel4_xdir], xdim7_advec_cell_kernel4_xdir, ydim7_advec_cell_kernel4_xdir};
    ptr_double ptr8 = { &arg8[base8 + idx_x * 1*1 + idx_y * 1*1 * xdim8_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim8_advec_cell_kernel4_xdir * ydim8_advec_cell_kernel4_xdir], xdim8_advec_cell_kernel4_xdir, ydim8_advec_cell_kernel4_xdir};
    ptr_double ptr9 = { &arg9[base9 + idx_x * 1*1 + idx_y * 1*1 * xdim9_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim9_advec_cell_kernel4_xdir * ydim9_advec_cell_kernel4_xdir], xdim9_advec_cell_kernel4_xdir, ydim9_advec_cell_kernel4_xdir};
    const ptr_double ptr10 = { &arg10[base10 + idx_x * 1*1 + idx_y * 1*1 * xdim10_advec_cell_kernel4_xdir + idx_z * 1*1 * xdim10_advec_cell_kernel4_xdir * ydim10_advec_cell_kernel4_xdir], xdim10_advec_cell_kernel4_xdir, ydim10_advec_cell_kernel4_xdir};
    advec_cell_kernel4_xdir(ptr0,
                      ptr1,
                      ptr2,
                      ptr3,
                      ptr4,
                      ptr5,
                      ptr6,
                      ptr7,
                      ptr8,
                      ptr9,
                      ptr10);
  }

}
