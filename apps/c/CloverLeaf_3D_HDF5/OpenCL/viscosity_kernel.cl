//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_3D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void viscosity_kernel(const ptr_double xvel0,
  const ptr_double yvel0,
  const ptr_double celldx,
  const ptr_double celldy,
  const ptr_double pressure,
  const ptr_double density0,
  ptr_double viscosity,
  const ptr_double zvel0,
  const ptr_double celldz,
  const ptr_double xarea,
  const ptr_double yarea,
  const ptr_double zarea) {

  double grad2,
         pgradx,pgrady,pgradz,
         pgradx2,pgrady2,pgradz2,
         grad,
         ygrad, xgrad, zgrad,
         div,
         limiter,
         pgrad;

  double ugradx1=OPS_ACCS(xvel0, 0,0,0)+OPS_ACCS(xvel0, 0,1,0)+OPS_ACCS(xvel0, 0,0,1)+OPS_ACCS(xvel0, 0,1,1);
  double ugradx2=OPS_ACCS(xvel0, 1,0,0)+OPS_ACCS(xvel0, 1,1,0)+OPS_ACCS(xvel0, 1,0,1)+OPS_ACCS(xvel0, 1,1,1);
  double ugrady1=OPS_ACCS(xvel0, 0,0,0)+OPS_ACCS(xvel0, 1,0,0)+OPS_ACCS(xvel0, 0,0,1)+OPS_ACCS(xvel0, 1,0,1);
  double ugrady2=OPS_ACCS(xvel0, 0,1,0)+OPS_ACCS(xvel0, 1,1,0)+OPS_ACCS(xvel0, 0,1,1)+OPS_ACCS(xvel0, 1,1,1);
  double ugradz1=OPS_ACCS(xvel0, 0,0,0)+OPS_ACCS(xvel0, 1,0,0)+OPS_ACCS(xvel0, 0,1,0)+OPS_ACCS(xvel0, 1,1,0);
  double ugradz2=OPS_ACCS(xvel0, 0,0,1)+OPS_ACCS(xvel0, 1,0,1)+OPS_ACCS(xvel0, 0,1,1)+OPS_ACCS(xvel0, 1,1,1);

  double vgradx1=OPS_ACCS(yvel0, 0,0,0)+OPS_ACCS(yvel0, 0,1,0)+OPS_ACCS(yvel0, 0,0,1)+OPS_ACCS(yvel0, 0,1,1);
  double vgradx2=OPS_ACCS(yvel0, 1,0,0)+OPS_ACCS(yvel0, 1,1,0)+OPS_ACCS(yvel0, 1,0,1)+OPS_ACCS(yvel0, 1,1,1);
  double vgrady1=OPS_ACCS(yvel0, 0,0,0)+OPS_ACCS(yvel0, 1,0,0)+OPS_ACCS(yvel0, 0,0,1)+OPS_ACCS(yvel0, 1,0,1);
  double vgrady2=OPS_ACCS(yvel0, 0,1,0)+OPS_ACCS(yvel0, 1,1,0)+OPS_ACCS(yvel0, 0,1,1)+OPS_ACCS(yvel0, 1,1,1);
  double vgradz1=OPS_ACCS(yvel0, 0,0,0)+OPS_ACCS(yvel0, 1,0,0)+OPS_ACCS(yvel0, 0,1,0)+OPS_ACCS(yvel0, 1,1,0);
  double vgradz2=OPS_ACCS(yvel0, 0,0,1)+OPS_ACCS(yvel0, 1,0,1)+OPS_ACCS(yvel0, 0,1,1)+OPS_ACCS(yvel0, 1,1,1);

  double wgradx1=OPS_ACCS(zvel0, 0,0,0)+OPS_ACCS(zvel0, 0,1,0)+OPS_ACCS(zvel0, 0,0,1)+OPS_ACCS(zvel0, 0,1,1);
  double wgradx2=OPS_ACCS(zvel0, 1,0,0)+OPS_ACCS(zvel0, 1,1,0)+OPS_ACCS(zvel0, 1,0,1)+OPS_ACCS(zvel0, 1,1,1);
  double wgrady1=OPS_ACCS(zvel0, 0,0,0)+OPS_ACCS(zvel0, 1,0,0)+OPS_ACCS(zvel0, 0,0,1)+OPS_ACCS(zvel0, 1,0,1);
  double wgrady2=OPS_ACCS(zvel0, 0,1,0)+OPS_ACCS(zvel0, 1,1,0)+OPS_ACCS(zvel0, 0,1,1)+OPS_ACCS(zvel0, 1,1,1);
  double wgradz1=OPS_ACCS(zvel0, 0,0,0)+OPS_ACCS(zvel0, 1,0,0)+OPS_ACCS(zvel0, 0,1,0)+OPS_ACCS(zvel0, 1,1,0);
  double wgradz2=OPS_ACCS(zvel0, 0,0,1)+OPS_ACCS(zvel0, 1,0,1)+OPS_ACCS(zvel0, 0,1,1)+OPS_ACCS(zvel0, 1,1,1);

  div = OPS_ACCS(xarea, 0,0,0)*(ugradx2-ugradx1) + OPS_ACCS(yarea, 0,0,0)*(vgrady2-vgrady1) + OPS_ACCS(zarea, 0,0,0)*(wgradz2-wgradz1);

  double xx = 0.25*(ugradx2-ugradx1)/(OPS_ACCS(celldx, 0,0,0));
  double yy = 0.25*(vgrady2-vgrady1)/(OPS_ACCS(celldy, 0,0,0));
  double zz = 0.25*(wgradz2-wgradz1)/(OPS_ACCS(celldz, 0,0,0));
  double xy = 0.25*(ugrady2-ugrady1)/(OPS_ACCS(celldy, 0,0,0))+0.25*(vgradx2-vgradx1)/(OPS_ACCS(celldx, 0,0,0));
  double xz = 0.25*(ugradz2-ugradz1)/(OPS_ACCS(celldz, 0,0,0))+0.25*(wgradx2-wgradx1)/(OPS_ACCS(celldx, 0,0,0));
  double yz = 0.25*(vgradz2-vgradz1)/(OPS_ACCS(celldz, 0,0,0))+0.25*(wgrady2-wgrady1)/(OPS_ACCS(celldy, 0,0,0));


  pgradx = (OPS_ACCS(pressure, 1,0,0) - OPS_ACCS(pressure, -1,0,0))/(OPS_ACCS(celldx, 0,0,0)+ OPS_ACCS(celldx, 1,0,0));
  pgrady = (OPS_ACCS(pressure, 0,1,0) - OPS_ACCS(pressure, 0,-1,0))/(OPS_ACCS(celldy, 0,0,0)+ OPS_ACCS(celldy, 0,1,0));
  pgradz = (OPS_ACCS(pressure, 0,0,1) - OPS_ACCS(pressure, 0,0,-1))/(OPS_ACCS(celldz, 0,0,0)+ OPS_ACCS(celldz, 0,0,1));

  pgradx2 = pgradx * pgradx;
  pgrady2 = pgrady * pgrady;
  pgradz2 = pgradz * pgradz;
  limiter = (xx*pgradx2+yy*pgrady2+zz*pgradz2
          +  xy*pgradx*pgrady+xz*pgradx*pgradz+yz*pgrady*pgradz)
                / MAX(pgradx2+pgrady2+pgradz2,1.0e-16);

  if( (limiter > 0.0) || (div >= 0.0)) {
        OPS_ACCS(viscosity, 0,0,0) = 0.0;
  }
  else {
    pgradx = SIGN( MAX(1.0e-16, fabs(pgradx)), pgradx);
    pgrady = SIGN( MAX(1.0e-16, fabs(pgrady)), pgrady);
    pgradz = SIGN( MAX(1.0e-16, fabs(pgradz)), pgradz);
    pgrad = sqrt(pgradx*pgradx + pgrady*pgrady + pgradz*pgradz);
    xgrad = fabs(OPS_ACCS(celldx, 0,0,0) * pgrad/pgradx);
    ygrad = fabs(OPS_ACCS(celldy, 0,0,0) * pgrad/pgrady);
    zgrad = fabs(OPS_ACCS(celldz, 0,0,0) * pgrad/pgradz);
    grad  = MIN(xgrad,MIN(ygrad,zgrad));
    grad2 = grad*grad;

    OPS_ACCS(viscosity, 0,0,0) = 2.0 * (OPS_ACCS(density0, 0,0,0)) * grad2 * limiter * limiter;
  }
}


__kernel void ops_viscosity_kernel(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global const double* restrict arg3,
__global const double* restrict arg4,
__global const double* restrict arg5,
__global double* restrict arg6,
__global const double* restrict arg7,
__global const double* restrict arg8,
__global const double* restrict arg9,
__global const double* restrict arg10,
__global const double* restrict arg11,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int base6,
const int base7,
const int base8,
const int base9,
const int base10,
const int base11,
const int size0,
const int size1,
const int size2 ){


  int idx_y = get_global_id(1);
  int idx_z = get_global_id(2);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_viscosity_kernel + idx_z * 1*1 * xdim0_viscosity_kernel * ydim0_viscosity_kernel], xdim0_viscosity_kernel, ydim0_viscosity_kernel};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_viscosity_kernel + idx_z * 1*1 * xdim1_viscosity_kernel * ydim1_viscosity_kernel], xdim1_viscosity_kernel, ydim1_viscosity_kernel};
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 0*1 * xdim2_viscosity_kernel + idx_z * 0*1 * xdim2_viscosity_kernel * ydim2_viscosity_kernel], xdim2_viscosity_kernel, ydim2_viscosity_kernel};
    const ptr_double ptr3 = { &arg3[base3 + idx_x * 0*1 + idx_y * 1*1 * xdim3_viscosity_kernel + idx_z * 0*1 * xdim3_viscosity_kernel * ydim3_viscosity_kernel], xdim3_viscosity_kernel, ydim3_viscosity_kernel};
    const ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_viscosity_kernel + idx_z * 1*1 * xdim4_viscosity_kernel * ydim4_viscosity_kernel], xdim4_viscosity_kernel, ydim4_viscosity_kernel};
    const ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_viscosity_kernel + idx_z * 1*1 * xdim5_viscosity_kernel * ydim5_viscosity_kernel], xdim5_viscosity_kernel, ydim5_viscosity_kernel};
    ptr_double ptr6 = { &arg6[base6 + idx_x * 1*1 + idx_y * 1*1 * xdim6_viscosity_kernel + idx_z * 1*1 * xdim6_viscosity_kernel * ydim6_viscosity_kernel], xdim6_viscosity_kernel, ydim6_viscosity_kernel};
    const ptr_double ptr7 = { &arg7[base7 + idx_x * 1*1 + idx_y * 1*1 * xdim7_viscosity_kernel + idx_z * 1*1 * xdim7_viscosity_kernel * ydim7_viscosity_kernel], xdim7_viscosity_kernel, ydim7_viscosity_kernel};
    const ptr_double ptr8 = { &arg8[base8 + idx_x * 0*1 + idx_y * 0*1 * xdim8_viscosity_kernel + idx_z * 1*1 * xdim8_viscosity_kernel * ydim8_viscosity_kernel], xdim8_viscosity_kernel, ydim8_viscosity_kernel};
    const ptr_double ptr9 = { &arg9[base9 + idx_x * 1*1 + idx_y * 1*1 * xdim9_viscosity_kernel + idx_z * 1*1 * xdim9_viscosity_kernel * ydim9_viscosity_kernel], xdim9_viscosity_kernel, ydim9_viscosity_kernel};
    const ptr_double ptr10 = { &arg10[base10 + idx_x * 1*1 + idx_y * 1*1 * xdim10_viscosity_kernel + idx_z * 1*1 * xdim10_viscosity_kernel * ydim10_viscosity_kernel], xdim10_viscosity_kernel, ydim10_viscosity_kernel};
    const ptr_double ptr11 = { &arg11[base11 + idx_x * 1*1 + idx_y * 1*1 * xdim11_viscosity_kernel + idx_z * 1*1 * xdim11_viscosity_kernel * ydim11_viscosity_kernel], xdim11_viscosity_kernel, ydim11_viscosity_kernel};
    viscosity_kernel(ptr0,
                     ptr1,
                     ptr2,
                     ptr3,
                     ptr4,
                     ptr5,
                     ptr6,
                     ptr7,
                     ptr8,
                     ptr9,
                     ptr10,
                     ptr11);
  }

}
