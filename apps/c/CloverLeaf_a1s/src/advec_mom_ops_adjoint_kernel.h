//
// auto-generated by ops.py
//
void advec_mom_kernel_x1_adjoint(
    ACC<double> &pre_vol, ACC<double> &pre_vol_a1s, ACC<double> &post_vol,
    ACC<double> &post_vol_a1s, const ACC<double> &volume,
    const ACC<double> &vol_flux_x,
    ACC<double> &vol_flux_x_a1s, const ACC<double> &vol_flux_y,
    ACC<double> &vol_flux_y_a1s) {
  post_vol_a1s(0, 0) += +pre_vol_a1s(0, 0);
  vol_flux_x_a1s(1, 0) += +pre_vol_a1s(0, 0);
  vol_flux_x_a1s(0, 0) += -pre_vol_a1s(0, 0);
  pre_vol_a1s(0, 0) = 0.0;
  vol_flux_y_a1s(0, 1) += +post_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 0) += -post_vol_a1s(0, 0);
  post_vol_a1s(0, 0) = 0.0;
}

void advec_mom_kernel_y1_adjoint(
    ACC<double> &pre_vol, ACC<double> &pre_vol_a1s, ACC<double> &post_vol,
    ACC<double> &post_vol_a1s, const ACC<double> &volume,
    const ACC<double> &vol_flux_x,
    ACC<double> &vol_flux_x_a1s, const ACC<double> &vol_flux_y,
    ACC<double> &vol_flux_y_a1s) {
  post_vol_a1s(0, 0) += +pre_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 1) += +pre_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 0) += -pre_vol_a1s(0, 0);
  pre_vol_a1s(0, 0) = 0.0;
  vol_flux_x_a1s(1, 0) += +post_vol_a1s(0, 0);
  vol_flux_x_a1s(0, 0) += -post_vol_a1s(0, 0);
  post_vol_a1s(0, 0) = 0.0;
}

void advec_mom_kernel_x2_adjoint(ACC<double> &pre_vol, ACC<double> &pre_vol_a1s,
                                 ACC<double> &post_vol,
                                 ACC<double> &post_vol_a1s,
                                 const ACC<double> &volume,
                                 const ACC<double> &vol_flux_y,
                                 ACC<double> &vol_flux_y_a1s) {
  post_vol_a1s(0, 0) += +pre_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 1) += +pre_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 0) += -pre_vol_a1s(0, 0);
  pre_vol_a1s(0, 0) = 0.0;
  post_vol_a1s(0, 0) = 0.0;
}

void advec_mom_kernel_y2_adjoint(ACC<double> &pre_vol, ACC<double> &pre_vol_a1s,
                                 ACC<double> &post_vol,
                                 ACC<double> &post_vol_a1s,
                                 const ACC<double> &volume,
                                 const ACC<double> &vol_flux_x,
                                 ACC<double> &vol_flux_x_a1s) {
  post_vol_a1s(0, 0) += +pre_vol_a1s(0, 0);
  vol_flux_x_a1s(1, 0) += +pre_vol_a1s(0, 0);
  vol_flux_x_a1s(0, 0) += -pre_vol_a1s(0, 0);
  pre_vol_a1s(0, 0) = 0.0;
  post_vol_a1s(0, 0) = 0.0;
}

void advec_mom_kernel_mass_flux_x_adjoint(ACC<double> &node_flux,
                                          ACC<double> &node_flux_a1s,
                                          const ACC<double> &mass_flux_x,
                                          ACC<double> &mass_flux_x_a1s) {
  double temp_a1s;
  temp_a1s = 0.25 * node_flux_a1s(0, 0);
  node_flux_a1s(0, 0) = 0.0;
  mass_flux_x_a1s(0, -1) += +temp_a1s;
  mass_flux_x_a1s(0, 0) += +temp_a1s;
  mass_flux_x_a1s(1, -1) += +temp_a1s;
  mass_flux_x_a1s(1, 0) += +temp_a1s;
}

void advec_mom_kernel_post_pre_advec_x_adjoint(
    ACC<double> &node_mass_post, ACC<double> &node_mass_post_a1s,
    const ACC<double> &post_vol, ACC<double> &post_vol_a1s,
    const ACC<double> &density1, ACC<double> &density1_a1s,
    ACC<double> &node_mass_pre, ACC<double> &node_mass_pre_a1s,
    const ACC<double> &node_flux, ACC<double> &node_flux_a1s) {
  double temp_a1s;
  node_mass_post_a1s(0, 0) += +node_mass_pre_a1s(0, 0);
  node_flux_a1s(-1, 0) += -node_mass_pre_a1s(0, 0);
  node_flux_a1s(0, 0) += +node_mass_pre_a1s(0, 0);
  node_mass_pre_a1s(0, 0) = 0.0;
  temp_a1s = 0.25 * node_mass_post_a1s(0, 0);
  node_mass_post_a1s(0, 0) = 0.0;
  density1_a1s(0, -1) += +post_vol(0, -1) * temp_a1s;
  post_vol_a1s(0, -1) += +density1(0, -1) * temp_a1s;
  density1_a1s(0, 0) += +post_vol(0, 0) * temp_a1s;
  post_vol_a1s(0, 0) += +density1(0, 0) * temp_a1s;
  density1_a1s(-1, -1) += +post_vol(-1, -1) * temp_a1s;
  post_vol_a1s(-1, -1) += +density1(-1, -1) * temp_a1s;
  density1_a1s(-1, 0) += +post_vol(-1, 0) * temp_a1s;
  post_vol_a1s(-1, 0) += +density1(-1, 0) * temp_a1s;
}

void advec_mom_kernel1_x_nonvector_adjoint(
    const ACC<double> &node_flux, ACC<double> &node_flux_a1s,
    const ACC<double> &node_mass_pre, ACC<double> &node_mass_pre_a1s,
    ACC<double> &mom_flux, ACC<double> &mom_flux_a1s, const ACC<double> &celldx,
    const ACC<double> &vel1, ACC<double> &vel1_a1s) {
  // node_flux accessed with: {0,0}
  // node_mass_pre accessed with: {0,0, 1,0}
  // celldx is accessed with {0,0, 1,0, -1,0} striding in x
  // vel1 is accessed with {0,0, 1,0, 2,0, -1,0}

  double sigma, wind, width;
  double vdiffuw, vdiffdw, auw, adw, limiter;
  int upwind, donor, downwind, dif;

  if ((node_flux(0, 0)) < 0.0) {
    upwind = 2;
    donor = 1;
    downwind = 0;
    dif = donor;
  } else {
    upwind = -1;
    donor = 0;
    downwind = 1;
    dif = upwind;
  }

  sigma = fabs(node_flux(0, 0)) / node_mass_pre(donor, 0);

  width = celldx(0, 0);
  vdiffuw = vel1(donor, 0) - vel1(upwind, 0);
  vdiffdw = vel1(downwind, 0) - vel1(donor, 0);
  limiter = 0.0;

  if (vdiffuw * vdiffdw > 0.0) {
    auw = fabs(vdiffuw);
    adw = fabs(vdiffdw);
    wind = 1.0;
    if (vdiffdw <= 0.0) wind = -1.0;
    limiter = wind * MIN(width *
                             ((2.0 - sigma) * adw / width +
                              (1.0 + sigma) * auw / celldx(dif, 0)) /
                             6.0,
                         MIN(auw, adw));
  }

  double advec_vel_temp = vel1(donor, 0) + (1.0 - sigma) * limiter;
  // Start derivation
  // mom_flux(0,0) = advec_vel_temp * node_flux(0,0);
  double advec_vel_temp_a1s = node_flux(0, 0) * mom_flux_a1s(0, 0);
  node_flux_a1s(0, 0) += advec_vel_temp * mom_flux_a1s(0, 0);
  mom_flux_a1s(0, 0) = 0.0;
  // double advec_vel_temp = vel1(donor,0) + (1.0 - sigma) * limiter;
  vel1_a1s(donor, 0) += advec_vel_temp_a1s;
  double sigma_a1s = -(limiter * advec_vel_temp_a1s);
  double limiter_a1s = (1.0 - sigma) * advec_vel_temp_a1s;
  double vdiffdw_a1s = 0.0;
  double vdiffuw_a1s = 0.0;
  if (vdiffuw * vdiffdw > 0.0) {
    double adw_a1s = 0.0;
    double auw_a1s = 0.0;
    // limiter = wind * MIN(width *
    //                          ((2.0 - sigma) * adw / width +
    //                           (1.0 + sigma) * auw / celldx(dif, 0)) /
    //                          6.0,
    //                      MIN(auw, adw));
    if (width *
            ((2.0 - sigma) * adw / width +
             (1.0 + sigma) * auw / celldx(dif, 0)) /
            6.0 <
        MIN(auw, adw)) {
      adw_a1s = wind * (2.0 - sigma) / 6.0 * limiter_a1s;
      auw_a1s =
          wind * width * (1.0 + sigma) / celldx(dif, 0) / 6.0 * limiter_a1s;
      sigma_a1s +=
          wind / 6.0 * (-adw + width * auw / celldx(dif, 0)) * limiter_a1s;
    } else {
      if (auw < adw) {
        auw_a1s = limiter_a1s;
      } else {
        adw_a1s = limiter_a1s;
      }
    }

    // auw = fabs(vdiffuw);
    // adw = fabs(vdiffdw);
    vdiffdw_a1s = SIGN(1.0, vdiffdw) * adw_a1s;
    vdiffuw_a1s = SIGN(1.0, vdiffuw) * auw_a1s;
  }

  // vdiffuw = vel1(donor,0) - vel1(upwind,0);
  // vdiffdw = vel1(downwind,0) - vel1(donor,0);
  vel1_a1s(downwind, 0) += vdiffdw_a1s;
  vel1_a1s(donor, 0) += vdiffuw_a1s - vdiffdw_a1s;
  vel1_a1s(upwind, 0) += -vdiffuw_a1s;

  // sigma = fabs(node_flux(0,0))/node_mass_pre(donor,0);
  node_mass_pre_a1s(donor, 0) +=
      -fabs(node_flux(0, 0)) * sigma_a1s /
      (node_mass_pre(donor, 0) * node_mass_pre(donor, 0));
  node_flux_a1s(0, 0) +=
      SIGN(1.0, node_flux(0, 0)) * sigma_a1s / node_mass_pre(donor, 0);

}

void advec_mom_kernel2_x_adjoint(ACC<double> &vel1, ACC<double> &vel1_a1s,
                                 const ACC<double> &node_mass_post,
                                 ACC<double> &node_mass_post_a1s,
                                 const ACC<double> &node_mass_pre,
                                 ACC<double> &node_mass_pre_a1s,
                                 const ACC<double> &mom_flux,
                                 ACC<double> &mom_flux_a1s) {
  double temp_a1s;
  temp_a1s = vel1_a1s(0, 0) / node_mass_post(0, 0);
  vel1_a1s(0, 0) = node_mass_pre(0, 0) * temp_a1s;
  node_mass_pre_a1s(0, 0) += +vel1(0, 0) * temp_a1s;
  mom_flux_a1s(-1, 0) += +temp_a1s;
  mom_flux_a1s(0, 0) += -temp_a1s;
  node_mass_post_a1s(0, 0) +=
      -(vel1(0, 0) * node_mass_pre(0, 0) + mom_flux(-1, 0) - mom_flux(0, 0)) *
      temp_a1s / node_mass_post(0, 0);
}

void advec_mom_kernel_mass_flux_y_adjoint(ACC<double> &node_flux,
                                          ACC<double> &node_flux_a1s,
                                          const ACC<double> &mass_flux_y,
                                          ACC<double> &mass_flux_y_a1s) {
  double temp_a1s;
  temp_a1s = 0.25 * node_flux_a1s(0, 0);
  node_flux_a1s(0, 0) = 0.0;
  mass_flux_y_a1s(-1, 0) += +temp_a1s;
  mass_flux_y_a1s(0, 0) += +temp_a1s;
  mass_flux_y_a1s(-1, 1) += +temp_a1s;
  mass_flux_y_a1s(0, 1) += +temp_a1s;
}

void advec_mom_kernel_post_pre_advec_y_adjoint(
    ACC<double> &node_mass_post, ACC<double> &node_mass_post_a1s,
    const ACC<double> &post_vol, ACC<double> &post_vol_a1s,
    const ACC<double> &density1, ACC<double> &density1_a1s,
    ACC<double> &node_mass_pre, ACC<double> &node_mass_pre_a1s,
    const ACC<double> &node_flux, ACC<double> &node_flux_a1s) {
  double temp_a1s;
  node_mass_post_a1s(0, 0) += +node_mass_pre_a1s(0, 0);
  node_flux_a1s(0, -1) += -node_mass_pre_a1s(0, 0);
  node_flux_a1s(0, 0) += +node_mass_pre_a1s(0, 0);
  node_mass_pre_a1s(0, 0) = 0.0;
  temp_a1s = 0.25 * node_mass_post_a1s(0, 0);
  node_mass_post_a1s(0, 0) = 0.0;
  density1_a1s(0, -1) += +post_vol(0, -1) * temp_a1s;
  post_vol_a1s(0, -1) += +density1(0, -1) * temp_a1s;
  density1_a1s(0, 0) += +post_vol(0, 0) * temp_a1s;
  post_vol_a1s(0, 0) += +density1(0, 0) * temp_a1s;
  density1_a1s(-1, -1) += +post_vol(-1, -1) * temp_a1s;
  post_vol_a1s(-1, -1) += +density1(-1, -1) * temp_a1s;
  density1_a1s(-1, 0) += +post_vol(-1, 0) * temp_a1s;
  post_vol_a1s(-1, 0) += +density1(-1, 0) * temp_a1s;
}

void advec_mom_kernel1_y_nonvector_adjoint(
    const ACC<double> &node_flux, ACC<double> &node_flux_a1s,
    const ACC<double> &node_mass_pre, ACC<double> &node_mass_pre_a1s,
    ACC<double> &mom_flux, ACC<double> &mom_flux_a1s, const ACC<double> &celldy,
    const ACC<double> &vel1, ACC<double> &vel1_a1s) {
  // node_flux accessed with: {0,0}
  // node_mass_pre accessed with: {0,0, 0,1}
  // celldy is accessed with {0,0, 0,1, 0,-1} striding in y
  // vel1 is accessed with {0,0, 0,1, 0,2, 0,-1}

  double sigma, wind, width;
  double vdiffuw, vdiffdw, auw, adw, limiter;
  int upwind, donor, downwind, dif;

  if ((node_flux(0, 0)) < 0.0) {
    upwind = 2;
    donor = 1;
    downwind = 0;
    dif = donor;
  } else {
    upwind = -1;
    donor = 0;
    downwind = 1;
    dif = upwind;
  }

  sigma = fabs(node_flux(0, 0)) / node_mass_pre(0, donor);
  width = celldy(0, 0);
  vdiffuw = vel1(0, donor) - vel1(0, upwind);
  vdiffdw = vel1(0, downwind) - vel1(0, donor);
  limiter = 0.0;
  if (vdiffuw * vdiffdw > 0.0) {
    auw = fabs(vdiffuw);
    adw = fabs(vdiffdw);
    wind = 1.0;
    if (vdiffdw <= 0.0) wind = -1.0;
    limiter = wind * MIN(width *
                             ((2.0 - sigma) * adw / width +
                              (1.0 + sigma) * auw / celldy(0, dif)) /
                             6.0,
                         MIN(auw, adw));
  }

  double advec_vel_temp = vel1(0, donor) + (1.0 - sigma) * limiter;
  // mom_flux(0, 0) = advec_vel_temp * node_flux(0, 0);
  double advec_vel_temp_a1s = node_flux(0, 0) * mom_flux_a1s(0, 0);
  node_flux_a1s(0, 0) += advec_vel_temp * mom_flux_a1s(0, 0);
  mom_flux_a1s(0, 0) = 0.0;
  // double advec_vel_temp = vel1(0, donor) + (1.0 - sigma) * limiter;
  vel1_a1s(0, donor) += advec_vel_temp_a1s;
  double sigma_a1s = -(limiter * advec_vel_temp_a1s);
  double limiter_a1s = (1.0 - sigma) * advec_vel_temp_a1s;

  double vdiffdw_a1s = 0.0;
  double vdiffuw_a1s = 0.0;
  if (vdiffuw * vdiffdw > 0.0) {
    double adw_a1s = 0.0;
    double auw_a1s = 0.0;
    // limiter = wind * MIN(width *
    //                          ((2.0 - sigma) * adw / width +
    //                           (1.0 + sigma) * auw / celldy(0, dif)) /
    //                          6.0,
    //                      MIN(auw, adw));
    if (width *
            ((2.0 - sigma) * adw / width +
             (1.0 + sigma) * auw / celldy(0, dif)) /
            6.0 <
        MIN(auw, adw)) {
      adw_a1s = wind * (2.0 - sigma) / 6.0 * limiter_a1s;
      auw_a1s =
          wind * width * (1.0 + sigma) / celldy(0, dif) / 6.0 * limiter_a1s;
      sigma_a1s +=
          wind / 6.0 * (-adw + width * auw / celldy(0, dif)) * limiter_a1s;
    } else {
      if (auw < adw) {
        auw_a1s = limiter_a1s;
      } else {
        adw_a1s = limiter_a1s;
      }
    }
    // auw = fabs(vdiffuw);
    // adw = fabs(vdiffdw);
    vdiffdw_a1s = SIGN(1.0, vdiffdw) * adw_a1s;
    vdiffuw_a1s = SIGN(1.0, vdiffuw) * auw_a1s;
  }

  // vdiffuw = vel1(0, donor) - vel1(0, upwind);
  // vdiffdw = vel1(0, downwind) - vel1(0, donor);
  vel1_a1s(0, downwind) += vdiffdw_a1s;
  vel1_a1s(0, donor) += vdiffuw_a1s - vdiffdw_a1s;
  vel1_a1s(0, upwind) += -vdiffuw_a1s;

  // sigma = fabs(node_flux(0, 0)) / node_mass_pre(0, donor);
  node_mass_pre_a1s(0, donor) +=
      -fabs(node_flux(0, 0)) * sigma_a1s /
      (node_mass_pre(0, donor) * node_mass_pre(0, donor));
  node_flux_a1s(0, 0) +=
      SIGN(1.0, node_flux(0, 0)) * sigma_a1s / node_mass_pre(0, donor);
}

void advec_mom_kernel2_y_adjoint(ACC<double> &vel1, ACC<double> &vel1_a1s,
                                 const ACC<double> &node_mass_post,
                                 ACC<double> &node_mass_post_a1s,
                                 const ACC<double> &node_mass_pre,
                                 ACC<double> &node_mass_pre_a1s,
                                 const ACC<double> &mom_flux,
                                 ACC<double> &mom_flux_a1s) {
  double temp_a1s;
  temp_a1s = vel1_a1s(0, 0) / node_mass_post(0, 0);
  vel1_a1s(0, 0) = node_mass_pre(0, 0) * temp_a1s;
  node_mass_pre_a1s(0, 0) += +vel1(0, 0) * temp_a1s;
  mom_flux_a1s(0, -1) += +temp_a1s;
  mom_flux_a1s(0, 0) += -temp_a1s;
  node_mass_post_a1s(0, 0) +=
      -(vel1(0, 0) * node_mass_pre(0, 0) + mom_flux(0, -1) - mom_flux(0, 0)) *
      temp_a1s / node_mass_post(0, 0);
}

