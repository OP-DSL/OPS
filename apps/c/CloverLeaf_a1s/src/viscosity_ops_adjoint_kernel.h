//
// auto-generated by ops.py
//
void viscosity_kernel_adjoint(
    const ACC<double> &xvel0, ACC<double> &xvel0_a1s, const ACC<double> &yvel0,
    ACC<double> &yvel0_a1s, const ACC<double> &celldx,
    const ACC<double> &celldy,
    const ACC<double> &pressure, ACC<double> &pressure_a1s,
    const ACC<double> &density0, ACC<double> &density0_a1s,
    ACC<double> &viscosity, ACC<double> &viscosity_a1s) {
  double ugrad, vgrad, grad2, pgradx, pgrady, pgradx2, pgrady2, grad, ygrad,
      xgrad, div, strain2, limiter, pgrad;

  // int s2D_00_P10_0P1_P1P1[]  = {0,0, 1,0, 0,1, 1,1};

  ugrad = (xvel0(1, 0) + xvel0(1, 1)) - (xvel0(0, 0) + xvel0(0, 1));
  vgrad = (yvel0(0, 1) + yvel0(1, 1)) - (yvel0(0, 0) + yvel0(1, 0));

  div = (celldx(0, 0)) * (ugrad) + (celldy(0, 0)) * (vgrad);

  strain2 = 0.5 * (xvel0(0, 1) + xvel0(1, 1) - xvel0(0, 0) - xvel0(1, 0)) /
                (celldy(0, 0)) +
            0.5 * (yvel0(1, 0) + yvel0(1, 1) - yvel0(0, 0) - yvel0(0, 1)) /
                (celldx(0, 0));

  // int s2D_10_M10_01_0M1[]  = {1,0, -1,0, 0,1, 0,-1};
  pgradx = (pressure(1, 0) - pressure(-1, 0)) / (celldx(0, 0) + celldx(1, 0));
  pgrady = (pressure(0, 1) - pressure(0, -1)) / (celldy(0, 0) + celldy(0, 1));

  pgradx2 = pgradx * pgradx;
  pgrady2 = pgrady * pgrady;

  limiter =
      ((0.5 * (ugrad) / celldx(0, 0)) * pgradx2 +
       (0.5 * (vgrad) / celldy(0, 0)) * pgrady2 + strain2 * pgradx * pgrady) /
      MAX(pgradx2 + pgrady2, 1.0e-16);

  if ((limiter > 0.0) || (div >= 0.0)) {
    // viscosity(0, 0) = 0.0;
    viscosity_a1s(0, 0) = 0.0;
  } else {
    double limiter_a1s = 0.0;
    double pgradx_a1s = 0.0, pgrady_a1s = 0.0;
    pgradx = SIGN(MAX(1.0e-16, fabs(pgradx)), pgradx);
    pgrady = SIGN(MAX(1.0e-16, fabs(pgrady)), pgrady);
    pgrad = sqrt(pgradx * pgradx + pgrady * pgrady);
    xgrad = fabs(celldx(0, 0) * pgrad / pgradx);
    ygrad = fabs(celldy(0, 0) * pgrad / pgrady);
    grad = MIN(xgrad, ygrad);
    grad2 = grad * grad;

    // viscosity(0, 0) = 2.0 * (density0(0, 0)) * grad2 * limiter * limiter;
    density0_a1s(0, 0) += 2.0 * grad2 * limiter * limiter * viscosity_a1s(0, 0);
    double grad_a1s =
        2.0 * density0(0, 0) * limiter * limiter * viscosity_a1s(0, 0);
    limiter_a1s =
        2.0 * grad2 * density0(0, 0) * 2 * limiter * viscosity_a1s(0, 0);
    viscosity_a1s(0, 0) = 0.0;
    // grad2 = grad * grad;
    grad_a1s = 2 * grad * grad_a1s;
    double pgrad_a1s = 0.0;
    // grad = MIN(xgrad, ygrad);
    if (xgrad < ygrad) {
      // xgrad = fabs(celldx(0, 0) * pgrad / pgradx);
      double arg = celldx(0, 0) * pgrad / pgradx;
      pgrad_a1s = SIGN(1.0, arg) * celldx(0, 0) / pgradx * grad_a1s;
      pgradx_a1s =
          SIGN(1.0, arg) * pgrad * celldx(0, 0) / (-pgradx * pgradx) * grad_a1s;
    } else {
      // ygrad = fabs(celldy(0, 0) * pgrad / pgrady);
      double arg = celldy(0, 0) * pgrad / pgrady;
      pgrad_a1s = SIGN(1.0, arg) * celldy(0, 0) / pgrady * grad_a1s;
      pgrady_a1s =
          SIGN(1.0, arg) * pgrad * celldy(0, 0) / (-pgrady * pgrady) * grad_a1s;
    }
    grad_a1s = 0.0;
    // pgrad = sqrt(pgradx * pgradx + pgrady * pgrady);
    double temp_a1s1 =
        pgrad_a1s / (2.0 * sqrt(pgradx * pgradx + pgrady * pgrady));
    pgradx_a1s += 2 * pgradx * temp_a1s1;
    pgrady_a1s = 2 * pgrady * temp_a1s1;
    // pgradx = SIGN(MAX(1.0e-16, fabs(pgradx)), pgradx);
    // pgrady = SIGN(MAX(1.0e-16, fabs(pgrady)), pgrady);
    if (1.0e-16 > fabs(pgradx)) {
      pgradx_a1s = 0.0;
    }
    if (1.0e-16 > fabs(pgrady)) {
      pgrady_a1s = 0.0;
    }
    pgrad_a1s = 0.0;

    // limiter =
    //     ((0.5 * (ugrad) / celldx(0, 0)) * pgradx2 +
    //      (0.5 * (vgrad) / celldy(0, 0)) * pgrady2 + strain2 * pgradx *
    //      pgrady)
    //      /
    //     MAX(pgradx2 + pgrady2, 1.0e-16);
    double divisor = MAX(pgradx2 + pgrady2, 1.0e-16);
    double ugrad_a1s = 0.5 * pgradx2 * limiter_a1s / (divisor * celldx(0, 0));
    double vgrad_a1s = 0.5 * pgrady2 * limiter_a1s / (divisor * celldy(0, 0));
    double strain2_a1s = limiter_a1s * pgradx * pgrady / divisor;
    pgradx_a1s += limiter_a1s * strain2 * pgrady / divisor;
    pgrady_a1s += limiter_a1s * strain2 * pgradx / divisor;
    double pgradx2_a1s = ((0.5 * (ugrad) / celldx(0, 0))) / divisor;
    double pgrady2_a1s = ((0.5 * (vgrad) / celldy(0, 0))) / divisor;
    if (pgradx2 + pgrady2 > 1.0e-16) {
      double tmp = ((0.5 * (ugrad) / celldx(0, 0)) * pgradx2 +
                    (0.5 * (vgrad) / celldy(0, 0)) * pgrady2 +
                    strain2 * pgradx * pgrady);
      pgradx2_a1s += tmp / (divisor * divisor) * -1;
      pgrady2_a1s += tmp / (divisor * divisor) * -1;
    }
    limiter_a1s = 0.0;
    // pgrady2 = pgrady * pgrady;
    pgrady_a1s += 2 * pgrady * pgrady2_a1s;
    // pgradx2 = pgradx * pgradx;
    pgradx_a1s += 2 * pgradx * pgradx2_a1s;

    // pgrady = (pressure(0, 1) - pressure(0, -1)) / (celldy(0, 0) + celldy(0,
    // 1));
    double temp0 = celldy(0, 0) + celldy(0, 1);
    double temp_a1s = pgrady_a1s / temp0;
    pressure_a1s(0, 1) += temp_a1s;
    pressure_a1s(0, -1) += -temp_a1s;
    // pgradx = (pressure(1, 0) - pressure(-1, 0)) / (celldx(0, 0) + celldx(1,
    // 0));
    temp0 = celldx(0, 0) + celldx(1, 0);
    temp_a1s = pgradx_a1s / temp0;
    pressure_a1s(1, 0) += temp_a1s;
    pressure_a1s(-1, 0) += -temp_a1s;
    double temp_a1s0 = -((pressure(1, 0) - pressure(-1, 0)) * temp_a1s / temp0);
    // strain2 = 0.5 * (xvel0(0, 1) + xvel0(1, 1) - xvel0(0, 0) - xvel0(1, 0)) /
    //               (celldy(0, 0)) +
    //           0.5 * (yvel0(1, 0) + yvel0(1, 1) - yvel0(0, 0) - yvel0(0, 1)) /
    //               (celldx(0, 0));
    temp_a1s = 0.5 * strain2_a1s / celldy(0, 0);
    temp_a1s0 = 0.5 * strain2_a1s / celldx(0, 0);
    yvel0_a1s(1, 0) += temp_a1s0;
    yvel0_a1s(1, 1) += temp_a1s0;
    yvel0_a1s(0, 0) += -temp_a1s0;
    yvel0_a1s(0, 1) += vgrad_a1s - temp_a1s0;
    xvel0_a1s(0, 1) += temp_a1s;
    xvel0_a1s(1, 1) += temp_a1s;
    xvel0_a1s(0, 0) += -temp_a1s;
    xvel0_a1s(1, 0) += ugrad_a1s - temp_a1s;
    // vgrad = (yvel0(0, 1) + yvel0(1, 1)) - (yvel0(0, 0) + yvel0(1, 0));
    yvel0_a1s(1, 1) += vgrad_a1s;
    yvel0_a1s(0, 0) += -vgrad_a1s;
    yvel0_a1s(1, 0) += -vgrad_a1s;
    // ugrad = (xvel0(1, 0) + xvel0(1, 1)) - (xvel0(0, 0) + xvel0(0, 1));
    xvel0_a1s(1, 1) += ugrad_a1s;
    xvel0_a1s(0, 0) += -ugrad_a1s;
    xvel0_a1s(0, 1) += -ugrad_a1s;
  }
}

