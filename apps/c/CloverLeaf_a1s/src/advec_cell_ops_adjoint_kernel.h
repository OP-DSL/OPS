//
// auto-generated by ops.py
//
void advec_cell_kernel1_xdir_adjoint(
    ACC<double> &pre_vol, ACC<double> &pre_vol_a1s, ACC<double> &post_vol,
    ACC<double> &post_vol_a1s, const ACC<double> &volume,
    const ACC<double> &vol_flux_x,
    ACC<double> &vol_flux_x_a1s, const ACC<double> &vol_flux_y,
    ACC<double> &vol_flux_y_a1s) {
  pre_vol_a1s(0, 0) += +post_vol_a1s(0, 0);
  vol_flux_x_a1s(1, 0) += -post_vol_a1s(0, 0);
  vol_flux_x_a1s(0, 0) += +post_vol_a1s(0, 0);
  post_vol_a1s(0, 0) = 0.0;
  vol_flux_x_a1s(1, 0) += +pre_vol_a1s(0, 0);
  vol_flux_x_a1s(0, 0) += -pre_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 1) += +pre_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 0) += -pre_vol_a1s(0, 0);
  pre_vol_a1s(0, 0) = 0.0;
}

void advec_cell_kernel2_xdir_adjoint(
    ACC<double> &pre_vol, ACC<double> &pre_vol_a1s, ACC<double> &post_vol,
    ACC<double> &post_vol_a1s, const ACC<double> &volume,
    const ACC<double> &vol_flux_x,
    ACC<double> &vol_flux_x_a1s) {
  post_vol_a1s(0, 0) = 0.0;
  vol_flux_x_a1s(1, 0) += +pre_vol_a1s(0, 0);
  vol_flux_x_a1s(0, 0) += -pre_vol_a1s(0, 0);
  pre_vol_a1s(0, 0) = 0.0;
}

void advec_cell_kernel3_xdir_adjoint(
    const ACC<double> &vol_flux_x, ACC<double> &vol_flux_x_a1s,
    const ACC<double> &pre_vol, ACC<double> &pre_vol_a1s, const ACC<int> &xx,
    const ACC<double> &vertexdx, 
    const ACC<double> &density1, ACC<double> &density1_a1s,
    const ACC<double> &energy1, ACC<double> &energy1_a1s,
    ACC<double> &mass_flux_x, ACC<double> &mass_flux_x_a1s,
    ACC<double> &ener_flux, ACC<double> &ener_flux_a1s) {
  double sigmat, sigmav, sigmam, sigma3, sigma4;
  double diffuw, diffdw, limiter;
  double one_by_six = 1.0 / 6.0;

  int x_max = field.x_max;

  int upwind, donor, downwind, dif;

  // pre_vol accessed with: {0,0, -1,0};
  // vertexdx accessed with: {0,0, 1,0, -1,0};
  // density1, energy1 accessed with: {0,0, 1,0, -1,0, -2,0};
  // xx accessed with: {0,0 ,1,0}

  if (vol_flux_x(0, 0) > 0.0) {
    upwind = -2;   // j-2
    donor = -1;    // j-1
    downwind = 0;  // j
    dif = donor;
  } else if (xx(1, 0) < x_max + 2 - 2) {  // extra -2 due to extraborder in OPS
    upwind = 1;                           // j+1
    donor = 0;                            // j
    downwind = -1;                        // j-1
    dif = upwind;
  } else {          //*xx(1,0) >= x_max+2 , then need 0
    upwind = 0;     // xmax+2
    donor = 0;      // j
    downwind = -1;  // j-1
    dif = upwind;
  }

  sigmat = fabs(vol_flux_x(0, 0)) / pre_vol(donor, 0);
  sigma3 = (1.0 + sigmat) * (vertexdx(0, 0) / vertexdx(dif, 0));
  sigma4 = 2.0 - sigmat;

  sigmav = sigmat;

  diffuw = density1(donor, 0) - density1(upwind, 0);
  diffdw = density1(downwind, 0) - density1(donor, 0);

  double diffdw1 = diffdw;
  double diffuw1 = diffuw;
  if ((diffuw * diffdw) > 0.0)
    limiter = (1.0 - sigmav) * SIGN(1.0, diffdw) *
              MIN(MIN(fabs(diffuw), fabs(diffdw)),
                  one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw)));
  else
    limiter = 0.0;

  double limiter1 = limiter;
  mass_flux_x(0, 0) = (vol_flux_x(0, 0)) * (density1(donor, 0) + limiter);

  sigmam = fabs(mass_flux_x(0, 0)) / (density1(donor, 0) * pre_vol(donor, 0));
  diffuw = energy1(donor, 0) - energy1(upwind, 0);
  diffdw = energy1(downwind, 0) - energy1(donor, 0);

  if ((diffuw * diffdw) > 0.0)
    limiter = (1.0 - sigmam) * SIGN(1.0, diffdw) *
              MIN(MIN(fabs(diffuw), fabs(diffdw)),
                  one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw)));
  else
    limiter = 0.0;

  // ener_flux(0,0) = mass_flux_x(0,0) * ( energy1(donor,0) + limiter );
  mass_flux_x_a1s(0, 0) += (energy1(donor, 0) + limiter) * ener_flux_a1s(0, 0);
  double limiter_a1s = mass_flux_x(0, 0) * ener_flux_a1s(0, 0);
  ener_flux_a1s(0, 0) = 0.0;
  energy1_a1s(donor, 0) += limiter_a1s;
  double sigmam_a1s = 0.0, diffdw_a1s = 0.0, diffuw_a1s = 0.0, sigma3_a1s = 0.0,
         sigma4_a1s = 0.0;
  if ((diffuw * diffdw) > 0.0) {
    // limiter = (1.0 - sigmam) * SIGN(1.0, diffdw) *
    //           MIN(MIN(fabs(diffuw), fabs(diffdw)),
    //               one_by_six * (sigma3 * fabs(diffuw) + sigma4 *
    //               fabs(diffdw)));

    double minmin =
        MIN(MIN(fabs(diffuw), fabs(diffdw)),
            one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw)));
    sigmam_a1s = -(SIGN(1.0, diffdw) * minmin * limiter_a1s);
    if (MIN(fabs(diffuw), fabs(diffdw)) <
        one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw))) {
      if (fabs(diffuw) < fabs(diffdw)) {
        diffuw_a1s = (1.0 - sigmam) * SIGN(1.0, diffdw) * SIGN(1.0, diffuw) *
                     limiter_a1s;
      } else {
        diffdw_a1s = (1.0 - sigmam) * limiter_a1s;
      }
    } else {
      double tmp =
          (1.0 - sigmam) * SIGN(1.0, diffdw) * one_by_six * limiter_a1s;
      sigma3_a1s = tmp * fabs(diffuw);
      sigma4_a1s = tmp * fabs(diffdw);
      diffuw_a1s = tmp * sigma3 * SIGN(1.0, diffuw);
      diffdw_a1s = tmp * sigma4 * SIGN(1.0, diffdw);
    }
  }
  limiter_a1s = 0.0;

  // diffuw = energy1(donor,0) - energy1(upwind,0);
  // diffdw = energy1(downwind,0) - energy1(donor,0);
  energy1_a1s(downwind, 0) += diffdw_a1s;
  energy1_a1s(donor, 0) += diffuw_a1s - diffdw_a1s;
  energy1_a1s(upwind, 0) += -diffuw_a1s;
  diffdw_a1s = 0.0;
  diffuw_a1s = 0.0;

  // sigmam = fabs(mass_flux_x(0,0))/( density1(donor,0) * pre_vol(donor,0));
  density1_a1s(donor, 0) +=
      -sigmam_a1s * fabs(mass_flux_x(0, 0)) /
      (density1(donor, 0) * density1(donor, 0) * pre_vol(donor, 0));
  pre_vol_a1s(donor, 0) +=
      -sigmam_a1s * fabs(mass_flux_x(0, 0)) /
      (density1(donor, 0) * pre_vol(donor, 0) * pre_vol(donor, 0));
  mass_flux_x_a1s(0, 0) += SIGN(1.0, mass_flux_x(0, 0)) * sigmam_a1s /
                           (density1(donor, 0) * pre_vol(donor, 0));
  // mass_flux_x(0,0) = (vol_flux_x(0,0)) * ( density1(donor,0) + limiter1 );
  vol_flux_x_a1s(0, 0) +=
      (density1(donor, 0) + limiter1) * mass_flux_x_a1s(0, 0);
  limiter_a1s = vol_flux_x(0, 0) * mass_flux_x_a1s(0, 0);
  density1_a1s(donor, 0) += limiter_a1s;
  mass_flux_x_a1s(0, 0) = 0.0;

  // if( (diffuw*diffdw) > 0.0)
  // ...
  // else
  //   limiter=0.0;
  double sigmav_a1s = 0.0;
  diffuw = diffuw1;
  diffdw = diffdw1;
  if ((diffuw * diffdw) > 0.0) {
    // limiter = (1.0 - sigmav) * SIGN(1.0, diffdw) *
    //           MIN(MIN(fabs(diffuw), fabs(diffdw)),
    //               one_by_six * (sigma3 * fabs(diffuw) + sigma4 *
    //               fabs(diffdw)));

    double minmin =
        MIN(MIN(fabs(diffuw), fabs(diffdw)),
            one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw)));
    sigmav_a1s = -(SIGN(1.0, diffdw) * minmin * limiter_a1s);
    if (MIN(fabs(diffuw), fabs(diffdw)) <
        one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw))) {
      if (fabs(diffuw) < fabs(diffdw)) {
        diffuw_a1s = (1.0 - sigmav) * SIGN(1.0, diffdw) * SIGN(1.0, diffuw) *
                     limiter_a1s;
      } else {
        diffdw_a1s = (1.0 - sigmav) * limiter_a1s;
      }
    } else {
      double tmp =
          (1.0 - sigmav) * SIGN(1.0, diffdw) * one_by_six * limiter_a1s;
      sigma3_a1s += tmp * fabs(diffuw);
      sigma4_a1s += tmp * fabs(diffdw);
      diffuw_a1s = tmp * sigma3 * SIGN(1.0, diffuw);
      diffdw_a1s = tmp * sigma4 * SIGN(1.0, diffdw);
    }
  }
  limiter_a1s = 0.0;
  // diffuw = density1(donor,0) - density1(upwind,0);
  // diffdw = density1(downwind,0) - density1(donor,0);
  density1_a1s(downwind, 0) += diffdw_a1s;
  density1_a1s(donor, 0) += diffuw_a1s - diffdw_a1s;
  density1_a1s(upwind, 0) += -diffuw_a1s;
  diffdw_a1s = 0.0;
  diffuw_a1s = 0.0;

  // sigma4 = 2.0 - sigmat;
  // sigmav = sigmat;
  double sigmat_a1s = sigmav_a1s - sigma4_a1s;
  // sigma3 = (1.0 + sigmat)*(vertexdx(0,0)/vertexdx(dif,0));
  sigmat_a1s += (vertexdx(0, 0) / vertexdx(dif, 0)) * sigma3_a1s;

  // sigmat = fabs(vol_flux_x(0,0))/pre_vol(donor,0);
  pre_vol_a1s(donor, 0) += -fabs(vol_flux_x(0, 0)) * sigmat_a1s /
                           (pre_vol(donor, 0) * pre_vol(donor, 0));
  vol_flux_x_a1s(0, 0) +=
      SIGN(1.0, vol_flux_x(0, 0)) * sigmat_a1s / pre_vol(donor, 0);
}

void advec_cell_kernel4_xdir_adjoint(
    ACC<double> &density1, ACC<double> &density1_a1s, ACC<double> &energy1,
    ACC<double> &energy1_a1s, const ACC<double> &mass_flux_x,
    ACC<double> &mass_flux_x_a1s, const ACC<double> &vol_flux_x,
    ACC<double> &vol_flux_x_a1s, const ACC<double> &pre_vol,
    ACC<double> &pre_vol_a1s, const ACC<double> &post_vol,
    ACC<double> &post_vol_a1s, ACC<double> &pre_mass, ACC<double> &pre_mass_a1s,
    ACC<double> &post_mass, ACC<double> &post_mass_a1s, ACC<double> &advec_vol,
    ACC<double> &advec_vol_a1s, ACC<double> &post_ener,
    ACC<double> &post_ener_a1s, const ACC<double> &ener_flux,
    ACC<double> &ener_flux_a1s) {
  double temp_a1s;
  pre_mass(0, 0) = density1(0, 0) * pre_vol(0, 0);
  post_mass(0, 0) = pre_mass(0, 0) + mass_flux_x(0, 0) - mass_flux_x(1, 0);
  advec_vol(0, 0) = pre_vol(0, 0) + vol_flux_x(0, 0) - vol_flux_x(1, 0);
  post_ener_a1s(0, 0) += +energy1_a1s(0, 0);
  temp_a1s = density1_a1s(0, 0) / advec_vol(0, 0);
  post_mass_a1s(0, 0) += +temp_a1s;
  advec_vol_a1s(0, 0) += -post_mass(0, 0) * temp_a1s / advec_vol(0, 0);
  vol_flux_x_a1s(0, 0) += +advec_vol_a1s(0, 0);
  vol_flux_x_a1s(1, 0) += -advec_vol_a1s(0, 0);
  temp_a1s = post_ener_a1s(0, 0) / post_mass(0, 0);
  energy1_a1s(0, 0) = pre_mass(0, 0) * temp_a1s;
  post_ener_a1s(0, 0) = 0.0;
  ener_flux_a1s(0, 0) += +temp_a1s;
  ener_flux_a1s(1, 0) += -temp_a1s;
  post_mass_a1s(0, 0) +=
      -(energy1(0, 0) * pre_mass(0, 0) + ener_flux(0, 0) - ener_flux(1, 0)) *
      temp_a1s / post_mass(0, 0);
  pre_mass_a1s(0, 0) += +energy1(0, 0) * temp_a1s + post_mass_a1s(0, 0);
  density1_a1s(0, 0) = pre_vol(0, 0) * pre_mass_a1s(0, 0);
  pre_vol_a1s(0, 0) +=
      +advec_vol_a1s(0, 0) + density1(0, 0) * pre_mass_a1s(0, 0);
  advec_vol_a1s(0, 0) = 0.0;
  mass_flux_x_a1s(0, 0) += +post_mass_a1s(0, 0);
  mass_flux_x_a1s(1, 0) += -post_mass_a1s(0, 0);
  post_mass_a1s(0, 0) = 0.0;
  pre_mass_a1s(0, 0) = 0.0;
}

void advec_cell_kernel1_ydir_adjoint(
    ACC<double> &pre_vol, ACC<double> &pre_vol_a1s, ACC<double> &post_vol,
    ACC<double> &post_vol_a1s, const ACC<double> &volume,
    const ACC<double> &vol_flux_x,
    ACC<double> &vol_flux_x_a1s, const ACC<double> &vol_flux_y,
    ACC<double> &vol_flux_y_a1s) {
  pre_vol_a1s(0, 0) += +post_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 1) += -post_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 0) += +post_vol_a1s(0, 0);
  post_vol_a1s(0, 0) = 0.0;
  vol_flux_y_a1s(0, 1) += +pre_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 0) += -pre_vol_a1s(0, 0);
  vol_flux_x_a1s(1, 0) += +pre_vol_a1s(0, 0);
  vol_flux_x_a1s(0, 0) += -pre_vol_a1s(0, 0);
  pre_vol_a1s(0, 0) = 0.0;
}

void advec_cell_kernel2_ydir_adjoint(
    ACC<double> &pre_vol, ACC<double> &pre_vol_a1s, ACC<double> &post_vol,
    ACC<double> &post_vol_a1s, const ACC<double> &volume,
    const ACC<double> &vol_flux_y,
    ACC<double> &vol_flux_y_a1s) {
  post_vol_a1s(0, 0) = 0.0;
  vol_flux_y_a1s(0, 1) += +pre_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 0) += -pre_vol_a1s(0, 0);
  pre_vol_a1s(0, 0) = 0.0;
}

void advec_cell_kernel3_ydir_adjoint(
    const ACC<double> &vol_flux_y, ACC<double> &vol_flux_y_a1s,
    const ACC<double> &pre_vol, ACC<double> &pre_vol_a1s, const ACC<int> &yy,
    const ACC<double> &vertexdy,
    const ACC<double> &density1, ACC<double> &density1_a1s,
    const ACC<double> &energy1, ACC<double> &energy1_a1s,
    ACC<double> &mass_flux_y, ACC<double> &mass_flux_y_a1s,
    ACC<double> &ener_flux, ACC<double> &ener_flux_a1s) {
  double sigmat, sigmav, sigmam, sigma3, sigma4;
  double diffuw, diffdw, limiter;
  double one_by_six = 1.0 / 6.0;

  int y_max = field.y_max;

  int upwind, donor, downwind, dif;

  // pre_vol accessed with: {0,0, 0,1};
  // vertexdy accessed with: {0,0, 0,1, 0,-1};
  // density1, energy1 accessed with: {0,0, 0,1, 0,-1, 0,-2};
  // yy accessed with: {0,0 ,0,1}

  if (vol_flux_y(0, 0) > 0.0) {
    upwind = -2;   // k-2
    donor = -1;    // k-1
    downwind = 0;  // k
    dif = donor;
  } else if (yy(0, 1) <
             y_max + 2 - 2) {  // extra -2 due to extra border in OPS version
    upwind = 1;                // j+1
    donor = 0;                 // j
    downwind = -1;             // j-1
    dif = upwind;
  } else {          //*yy(0,1) >= y_max+2 , then need 0
    upwind = 0;     // ymax+2
    donor = 0;      // k
    downwind = -1;  // k-1
    dif = upwind;
  }

  sigmat = fabs(vol_flux_y(0, 0)) / pre_vol(0, donor);
  sigma3 = (1.0 + sigmat) * (vertexdy(0, 0) / vertexdy(0, dif));
  sigma4 = 2.0 - sigmat;

  sigmav = sigmat;

  diffuw = density1(0, donor) - density1(0, upwind);
  diffdw = density1(0, downwind) - density1(0, donor);

  double diffdw1 = diffdw, diffuw1 = diffuw;
  if ((diffuw * diffdw) > 0.0)
    limiter = (1.0 - sigmav) * SIGN(1.0, diffdw) *
              MIN(MIN(fabs(diffuw), fabs(diffdw)),
                  one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw)));
  else
    limiter = 0.0;

  double limiter1 = limiter;
  mass_flux_y(0, 0) = (vol_flux_y(0, 0)) * (density1(0, donor) + limiter);

  sigmam = fabs(mass_flux_y(0, 0)) / (density1(0, donor) * pre_vol(0, donor));
  diffuw = energy1(0, donor) - energy1(0, upwind);
  diffdw = energy1(0, downwind) - energy1(0, donor);

  if ((diffuw * diffdw) > 0.0)
    limiter = (1.0 - sigmam) * SIGN(1.0, diffdw) *
              MIN(MIN(fabs(diffuw), fabs(diffdw)),
                  one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw)));
  else
    limiter = 0.0;

  // ener_flux(0,0) = mass_flux_y(0,0) * ( energy1(0,donor) + limiter );
  mass_flux_y_a1s(0, 0) += (energy1(0, donor) + limiter) * ener_flux_a1s(0, 0);
  double limiter_a1s = mass_flux_y(0, 0) * ener_flux_a1s(0, 0);
  energy1_a1s(0, donor) += limiter_a1s;
  ener_flux_a1s(0, 0) = 0.0;

  double sigmam_a1s = 0.0, diffdw_a1s = 0.0, diffuw_a1s = 0.0, sigma3_a1s = 0.0,
         sigma4_a1s = 0.0;
  if ((diffuw * diffdw) > 0.0) {
    // limiter = (1.0 - sigmam) * SIGN(1.0, diffdw) *
    //           MIN(MIN(fabs(diffuw), fabs(diffdw)),
    //               one_by_six * (sigma3 * fabs(diffuw) + sigma4 *
    //               fabs(diffdw)));
    double minmin =
        MIN(MIN(fabs(diffuw), fabs(diffdw)),
            one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw)));
    sigmam_a1s = -(SIGN(1.0, diffdw) * minmin * limiter_a1s);
    if (MIN(fabs(diffuw), fabs(diffdw)) <
        one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw))) {
      if (fabs(diffuw) < fabs(diffdw)) {
        diffuw_a1s = (1.0 - sigmam) * SIGN(1.0, diffdw) * SIGN(1.0, diffuw) *
                     limiter_a1s;
      } else {
        diffdw_a1s = (1.0 - sigmam) * limiter_a1s;
      }
    } else {
      double tmp =
          (1.0 - sigmam) * SIGN(1.0, diffdw) * one_by_six * limiter_a1s;
      sigma3_a1s += tmp * fabs(diffuw);
      sigma4_a1s += tmp * fabs(diffdw);
      diffuw_a1s = tmp * sigma3 * SIGN(1.0, diffdw);
      diffdw_a1s = tmp * sigma4 * SIGN(1.0, diffuw);
    }
  }
  limiter_a1s = 0.0;

  // diffuw = energy1(0,donor) - energy1(0,upwind);
  // diffdw = energy1(0,downwind) - energy1(0,donor);
  energy1_a1s(0, downwind) += diffdw_a1s;
  energy1_a1s(0, donor) += diffuw_a1s - diffdw_a1s;
  energy1_a1s(0, upwind) += diffuw_a1s;
  diffdw_a1s = 0.0;
  diffdw_a1s = 0.0;
  // sigmam = fabs(mass_flux_y(0,0))/( density1(0,donor) * pre_vol(0,donor));
  density1_a1s(0, donor) +=
      -sigmam_a1s * fabs(mass_flux_y(0, 0)) /
      (density1(0, donor) * density1(0, donor) * pre_vol(0, donor));
  pre_vol_a1s(0, donor) +=
      -sigmam_a1s * fabs(mass_flux_y(0, 0)) /
      (density1(0, donor) * pre_vol(0, donor) * pre_vol(0, donor));
  mass_flux_y_a1s(0, 0) += SIGN(1.0, mass_flux_y(0, 0)) * sigmam_a1s /
                           (density1(0, donor) * pre_vol(0, donor));

  // mass_flux_y(0,0) = (vol_flux_y(0,0)) * ( density1(0,donor) + limiter );
  limiter = limiter1;
  vol_flux_y_a1s(0, 0) +=
      (density1(0, donor) + limiter) * mass_flux_y_a1s(0, 0);
  limiter_a1s = vol_flux_y(0, 0) * mass_flux_y_a1s(0, 0);
  density1_a1s(0, donor) += limiter_a1s;
  mass_flux_y_a1s(0, 0) = 0.0;

  diffdw = diffdw1;
  diffuw = diffuw1;

  // if( (diffuw*diffdw) > 0.0)
  // ...
  // else
  //   limiter=0.0;
  double sigmav_a1s = 0.0;
  if ((diffuw * diffdw) > 0.0) {
    // limiter = (1.0 - sigmav) * SIGN(1.0, diffdw) *
    //           MIN(MIN(fabs(diffuw), fabs(diffdw)),
    //               one_by_six * (sigma3 * fabs(diffuw) + sigma4 *
    //               fabs(diffdw)));
    double minmin =
        MIN(MIN(fabs(diffuw), fabs(diffdw)),
            one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw)));
    sigmav_a1s = -(SIGN(1.0, diffdw) * minmin * limiter_a1s);
    if (MIN(fabs(diffuw), fabs(diffdw)) <
        one_by_six * (sigma3 * fabs(diffuw) + sigma4 * fabs(diffdw))) {
      if (fabs(diffuw) < fabs(diffdw)) {
        diffuw_a1s = (1.0 - sigmav) * SIGN(1.0, diffdw) * SIGN(1.0, diffuw) *
                     limiter_a1s;
      } else {
        diffdw_a1s = (1.0 - sigmav) * limiter_a1s;
      }
    } else {
      double tmp =
          (1.0 - sigmav) * SIGN(1.0, diffdw) * one_by_six * limiter_a1s;
      sigma3_a1s += tmp * fabs(diffuw);
      sigma4_a1s += tmp * fabs(diffdw);
      diffuw_a1s = tmp * sigma3 * SIGN(1.0, diffdw);
      diffdw_a1s = tmp * sigma4 * SIGN(1.0, diffuw);
    }
  }
  limiter_a1s = 0.0;

  // diffuw = density1(0,donor) - density1(0,upwind);
  // diffdw = density1(0,downwind) - density1(0,donor);
  density1_a1s(0, downwind) += diffdw_a1s;
  density1_a1s(0, donor) += diffuw_a1s - diffdw_a1s;
  density1_a1s(0, upwind) += -diffuw_a1s;

  // sigma4 = 2.0 - sigmat;
  // sigmav = sigmat;
  double sigmat_a1s = sigmav_a1s - sigma4_a1s;
  // sigma3 = (1.0 + sigmat)*(vertexdy(0,0)/vertexdy(0,dif));
  sigma3_a1s += sigma3_a1s * (vertexdy(0, 0) / vertexdy(0, dif));

  // sigmat = fabs(vol_flux_y(0,0))/pre_vol(0,donor);
  pre_vol_a1s(0, donor) += -fabs(vol_flux_y(0, 0)) * sigmat_a1s /
                           (pre_vol(0, donor) * pre_vol(0, donor));
  vol_flux_y_a1s(0, 0) +=
      SIGN(1.0, vol_flux_y(0, 0)) * sigmat_a1s / pre_vol(0, donor);
}

void advec_cell_kernel4_ydir_adjoint(
    ACC<double> &density1, ACC<double> &density1_a1s, ACC<double> &energy1,
    ACC<double> &energy1_a1s, const ACC<double> &mass_flux_y,
    ACC<double> &mass_flux_y_a1s, const ACC<double> &vol_flux_y,
    ACC<double> &vol_flux_y_a1s, const ACC<double> &pre_vol,
    ACC<double> &pre_vol_a1s, const ACC<double> &post_vol,
    ACC<double> &post_vol_a1s, ACC<double> &pre_mass, ACC<double> &pre_mass_a1s,
    ACC<double> &post_mass, ACC<double> &post_mass_a1s, ACC<double> &advec_vol,
    ACC<double> &advec_vol_a1s, ACC<double> &post_ener,
    ACC<double> &post_ener_a1s, const ACC<double> &ener_flux,
    ACC<double> &ener_flux_a1s) {
  double temp_a1s;
  pre_mass(0, 0) = density1(0, 0) * pre_vol(0, 0);
  post_mass(0, 0) = pre_mass(0, 0) + mass_flux_y(0, 0) - mass_flux_y(0, 1);
  advec_vol(0, 0) = pre_vol(0, 0) + vol_flux_y(0, 0) - vol_flux_y(0, 1);
  post_ener_a1s(0, 0) += +energy1_a1s(0, 0);
  temp_a1s = density1_a1s(0, 0) / advec_vol(0, 0);
  post_mass_a1s(0, 0) += +temp_a1s;
  advec_vol_a1s(0, 0) += -post_mass(0, 0) * temp_a1s / advec_vol(0, 0);
  vol_flux_y_a1s(0, 0) += +advec_vol_a1s(0, 0);
  vol_flux_y_a1s(0, 1) += -advec_vol_a1s(0, 0);
  temp_a1s = post_ener_a1s(0, 0) / post_mass(0, 0);
  energy1_a1s(0, 0) = pre_mass(0, 0) * temp_a1s;
  post_ener_a1s(0, 0) = 0.0;
  ener_flux_a1s(0, 0) += +temp_a1s;
  ener_flux_a1s(0, 1) += -temp_a1s;
  post_mass_a1s(0, 0) +=
      -(energy1(0, 0) * pre_mass(0, 0) + ener_flux(0, 0) - ener_flux(0, 1)) *
      temp_a1s / post_mass(0, 0);
  pre_mass_a1s(0, 0) += +energy1(0, 0) * temp_a1s + post_mass_a1s(0, 0);
  density1_a1s(0, 0) = pre_vol(0, 0) * pre_mass_a1s(0, 0);
  pre_vol_a1s(0, 0) +=
      +advec_vol_a1s(0, 0) + density1(0, 0) * pre_mass_a1s(0, 0);
  advec_vol_a1s(0, 0) = 0.0;
  mass_flux_y_a1s(0, 0) += +post_mass_a1s(0, 0);
  mass_flux_y_a1s(0, 1) += -post_mass_a1s(0, 0);
  post_mass_a1s(0, 0) = 0.0;
  pre_mass_a1s(0, 0) = 0.0;
}

