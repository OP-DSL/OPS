//
// auto-generated by ops_adjoin_gen.py
//
void PdV_kernel_predict_adjoint(const ACC<double> &xarea, const ACC<double> &xvel0,ACC<double> &xvel0_a1s, const ACC<double> &yarea, const ACC<double> &yvel0,ACC<double> &yvel0_a1s, ACC<double> &volume_change,ACC<double> &volume_change_a1s, const ACC<double> &volume, const ACC<double> &pressure,ACC<double> &pressure_a1s, const ACC<double> &density0,ACC<double> &density0_a1s, ACC<double> &density1,ACC<double> &density1_a1s, const ACC<double> &viscosity,ACC<double> &viscosity_a1s, const ACC<double> &energy0,ACC<double> &energy0_a1s, ACC<double> &energy1,ACC<double> &energy1_a1s){
    double recip_volume, energy_change;
    double energy_change_a1s;
    double right_flux, left_flux, top_flux, bottom_flux, total_flux;
    double right_flux_a1s, left_flux_a1s, top_flux_a1s, bottom_flux_a1s, 
    total_flux_a1s;
    double temp;
    double temp_a1s;
    double temp0;
    double temp_a1s0;
    double temp1;
    double temp_a1s1;
    double temp_a1s2;
    left_flux = xarea(0,0)*(xvel0(0,0)+xvel0(0,1)+
        xvel0(0,0)+xvel0(0,1))*0.25*dt*0.5;
    right_flux = xarea(1,0)*(xvel0(1,0)+xvel0(1,1)+
        xvel0(1,0)+xvel0(1,1))*0.25*dt*0.5;
    bottom_flux = yarea(0,0)*(yvel0(0,0)+yvel0(1,0)+
        yvel0(0,0)+yvel0(1,0))*0.25*dt*0.5;
    top_flux = yarea(0,1)*(yvel0(0,1)+yvel0(1,1)+yvel0(0,1)+yvel0(1,1))*0.25*dt*0.5;
    total_flux = right_flux - left_flux + top_flux - bottom_flux;
    volume_change(0,0) = volume(0,0)/(volume(0,0)+
        total_flux);
    recip_volume = 1.0/volume(0,0);
    energy_change_a1s = -energy1_a1s(0,0);
    temp = pressure(0,0)/density0(0,0);
    temp1 = viscosity(0,0)/density0(0,0);
    temp_a1s0 = total_flux*recip_volume*energy_change_a1s;
    temp_a1s = temp_a1s0/density0(0,0);
    temp_a1s1 = temp_a1s0/density0(0,0);
    density0_a1s(0,0) += + volume_change(0,0)*density1_a1s(0,0) - temp1*temp_a1s1 - temp*temp_a1s;
    volume_change_a1s(0,0) += + density0(0,0)*density1_a1s(0,0);
    density1_a1s(0,0) = 0.0;
    energy0_a1s(0,0) += + energy1_a1s(0,0
        );
    energy1_a1s(0,0) = 0.0;
    temp_a1s2 = (temp+temp1)*energy_change_a1s;
    viscosity_a1s(0,0) += + temp_a1s1;
    pressure_a1s(0,0) += + temp_a1s;
    temp0 = volume(0,0) + total_flux;
    temp_a1s0 = -(volume(0,0)*volume_change_a1s(0,0)/(temp0*
        temp0));
    total_flux_a1s = recip_volume*temp_a1s2 + temp_a1s0;
    volume_change_a1s(0,0) = 0.0;
    right_flux_a1s = total_flux_a1s;
    left_flux_a1s = -total_flux_a1s;
    top_flux_a1s = total_flux_a1s;
    bottom_flux_a1s = -total_flux_a1s;
    temp_a1s0 = dt*0.5*0.25*top_flux_a1s;
    temp_a1s = yarea(0,1)*temp_a1s0;
    yvel0_a1s(0,1) += + 2*temp_a1s;
    yvel0_a1s(1,1) += + 2*temp_a1s;
    temp_a1s0 = dt*0.5*0.25*bottom_flux_a1s;
    temp_a1s = yarea(0,0)*temp_a1s0;
    yvel0_a1s(0,0) += + 2*temp_a1s;
    yvel0_a1s(1,0) += + 2*temp_a1s;
    temp_a1s0 = dt*0.5*0.25*right_flux_a1s;
    temp_a1s = xarea(1,0)*temp_a1s0;
    xvel0_a1s(1,0) += + 2*temp_a1s;
    xvel0_a1s(1,1) += + 2*temp_a1s;
    temp_a1s = dt*0.5*0.25*left_flux_a1s;
    temp_a1s0 = xarea(0,0)*temp_a1s;
    xvel0_a1s(0,0) += + 2*temp_a1s0;
    xvel0_a1s(0,1) += + 2*temp_a1s0;
}

void PdV_kernel_nopredict_adjoint(const ACC<double> &xarea, const ACC<double> &xvel0,ACC<double> &xvel0_a1s, const ACC<double> &xvel1,ACC<double> &xvel1_a1s, const ACC<double> &yarea, const ACC<double> &yvel0,ACC<double> &yvel0_a1s, const ACC<double> &yvel1,ACC<double> &yvel1_a1s, ACC<double> &volume_change,ACC<double> &volume_change_a1s, const ACC<double> &volume, const ACC<double> &pressure,ACC<double> &pressure_a1s, const ACC<double> &density0,ACC<double> &density0_a1s, ACC<double> &density1,ACC<double> &density1_a1s, const ACC<double> &viscosity,ACC<double> &viscosity_a1s, const ACC<double> &energy0,ACC<double> &energy0_a1s, ACC<double> &energy1,ACC<double> &energy1_a1s){
    double recip_volume, energy_change;
    double energy_change_a1s;
    double right_flux, left_flux, top_flux, bottom_flux, total_flux;
    double right_flux_a1s, left_flux_a1s, top_flux_a1s, bottom_flux_a1s, 
    total_flux_a1s;
    double temp;
    double temp_a1s;
    double temp0;
    double temp_a1s0;
    double temp1;
    double temp_a1s1;
    double temp_a1s2;
    left_flux = xarea(0,0)*(xvel0(0,0)+xvel0(0,1)+
        xvel1(0,0)+xvel1(0,1))*0.25*dt;
    right_flux = xarea(1,0)*(xvel0(1,0)+xvel0(1,1)+
        xvel1(1,0)+xvel1(1,1))*0.25*dt;
    bottom_flux = yarea(0,0)*(yvel0(0,0)+yvel0(1,0)+
        yvel1(0,0)+yvel1(1,0))*0.25*dt;
    top_flux = yarea(0,1)*(yvel0(0,1)+yvel0(1,1)+yvel1(0,1)+yvel1(1,1))*0.25*dt;
    total_flux = right_flux - left_flux + top_flux - bottom_flux;
    volume_change(0,0) = volume(0,0)/(volume(0,0)+
        total_flux);
    recip_volume = 1.0/volume(0,0);
    energy_change_a1s = -energy1_a1s(0,0);
    temp = pressure(0,0)/density0(0,0);
    temp1 = viscosity(0,0)/density0(0,0);
    temp_a1s0 = total_flux*recip_volume*energy_change_a1s;
    temp_a1s = temp_a1s0/density0(0,0);
    temp_a1s1 = temp_a1s0/density0(0,0);
    density0_a1s(0,0) += + volume_change(0,0)*density1_a1s(0,0) - temp1*temp_a1s1 - temp*temp_a1s;
    volume_change_a1s(0,0) += + density0(0,0)*density1_a1s(0,0);
    density1_a1s(0,0) = 0.0;
    energy0_a1s(0,0) += + energy1_a1s(0,0
        );
    energy1_a1s(0,0) = 0.0;
    temp_a1s2 = (temp+temp1)*energy_change_a1s;
    viscosity_a1s(0,0) += + temp_a1s1;
    pressure_a1s(0,0) += + temp_a1s;
    temp0 = volume(0,0) + total_flux;
    temp_a1s0 = -(volume(0,0)*volume_change_a1s(0,0)/(temp0*
        temp0));
    total_flux_a1s = recip_volume*temp_a1s2 + temp_a1s0;
    volume_change_a1s(0,0) = 0.0;
    right_flux_a1s = total_flux_a1s;
    left_flux_a1s = -total_flux_a1s;
    top_flux_a1s = total_flux_a1s;
    bottom_flux_a1s = -total_flux_a1s;
    temp_a1s0 = dt*0.25*top_flux_a1s;
    temp_a1s = yarea(0,1)*temp_a1s0;
    yvel0_a1s(0,1) += + temp_a1s;
    yvel0_a1s(1,1) += + temp_a1s;
    yvel1_a1s(0,1) += + temp_a1s;
    yvel1_a1s(1,1) += + temp_a1s;
    temp_a1s0 = dt*0.25*bottom_flux_a1s;
    temp_a1s = yarea(0,0)*temp_a1s0;
    yvel0_a1s(0,0) += + temp_a1s;
    yvel0_a1s(1,0) += + temp_a1s;
    yvel1_a1s(0,0) += + temp_a1s;
    yvel1_a1s(1,0) += + temp_a1s;
    temp_a1s0 = dt*0.25*right_flux_a1s;
    temp_a1s = xarea(1,0)*temp_a1s0;
    xvel0_a1s(1,0) += + temp_a1s;
    xvel0_a1s(1,1) += + temp_a1s;
    xvel1_a1s(1,0) += + temp_a1s;
    xvel1_a1s(1,1) += + temp_a1s;
    temp_a1s = dt*0.25*left_flux_a1s;
    temp_a1s0 = xarea(0,0)*temp_a1s;
    xvel0_a1s(0,0) += + temp_a1s0;
    xvel0_a1s(0,1) += + temp_a1s0;
    xvel1_a1s(0,0) += + temp_a1s0;
    xvel1_a1s(0,1) += + temp_a1s0;
}

