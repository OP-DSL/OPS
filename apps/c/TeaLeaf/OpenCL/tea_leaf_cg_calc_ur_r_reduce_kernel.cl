//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void tea_leaf_cg_calc_ur_r_reduce_kernel(ptr_double  r,
  const ptr_double  w,
  const double * alpha,
  double *rnn) {
  OPS_ACCS(r, 0,0) = OPS_ACCS(r, 0,0) - (*alpha)*OPS_ACCS(w, 0,0);
  *rnn = *rnn +  OPS_ACCS(r, 0,0)*OPS_ACCS(r, 0,0);
}


__kernel void ops_tea_leaf_cg_calc_ur_r_reduce_kernel(
__global double* restrict arg0,
__global const double* restrict arg1,
const double arg2,
__global double* restrict arg3,
__local double* scratch3,
int r_bytes3,
const int base0,
const int base1,
const int size0,
const int size1 ){

  arg3 += r_bytes3;
  double arg3_l[1];
  for (int d=0; d<1; d++) arg3_l[d] = ZERO_double;

  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_tea_leaf_cg_calc_ur_r_reduce_kernel], xdim0_tea_leaf_cg_calc_ur_r_reduce_kernel};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_tea_leaf_cg_calc_ur_r_reduce_kernel], xdim1_tea_leaf_cg_calc_ur_r_reduce_kernel};
    tea_leaf_cg_calc_ur_r_reduce_kernel(ptr0,
                                        ptr1,
                                        &arg2,
                                        arg3_l);
  }
  int group_index = get_group_id(0) + get_group_id(1)*get_num_groups(0)+ get_group_id(2)*get_num_groups(0)*get_num_groups(1);
  for (int d=0; d<1; d++)
    reduce_double(arg3_l[d], scratch3, &arg3[group_index*1+d], OPS_INC);

}
