//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64 : enable

#include "ops_opencl_reduction.h"
#include "user_types.h"

#ifndef MIN
#define MIN(a, b) ((a < b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a, b) ((a > b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a, b) ((b < 0.0) ? (a * (-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4

#define OPS_ACC0(x, y) (x + xdim0_tea_leaf_jacobi_kernel * (y))
#define OPS_ACC1(x, y) (x + xdim1_tea_leaf_jacobi_kernel * (y))
#define OPS_ACC2(x, y) (x + xdim2_tea_leaf_jacobi_kernel * (y))
#define OPS_ACC3(x, y) (x + xdim3_tea_leaf_jacobi_kernel * (y))
#define OPS_ACC4(x, y) (x + xdim4_tea_leaf_jacobi_kernel * (y))

// user function
void tea_leaf_jacobi_kernel(__global double *restrict u1,
                            const __global double *restrict Kx,
                            const __global double *restrict Ky,
                            const __global double *restrict un,
                            const __global double *restrict u0,
                            const double *restrict rx,
                            const double *restrict ry, double *restrict error)

{
  u1[OPS_ACC0(0, 0)] =
      (u0[OPS_ACC4(0, 0)] +
       (*rx) * (Kx[OPS_ACC1(1, 0)] * un[OPS_ACC3(1, 0)] +
                Kx[OPS_ACC1(0, 0)] * un[OPS_ACC3(-1, 0)]) +
       (*ry) * (Ky[OPS_ACC2(0, 1)] * un[OPS_ACC3(0, 1)] +
                Ky[OPS_ACC2(0, 0)] * un[OPS_ACC3(0, -1)])) /
      (1.0 + (*rx) * (Kx[OPS_ACC1(1, 0)] + Kx[OPS_ACC1(0, 0)]) +
       (*ry) * (Ky[OPS_ACC2(0, 1)] + Ky[OPS_ACC2(0, 0)]));

  *error = *error + fabs(u1[OPS_ACC0(0, 0)] - un[OPS_ACC3(0, 0)]);
}

__kernel void ops_tea_leaf_jacobi_kernel(
    __global double *restrict arg0, __global const double *restrict arg1,
    __global const double *restrict arg2, __global const double *restrict arg3,
    __global const double *restrict arg4, const double arg5, const double arg6,
    __global double *restrict arg7, __local double *scratch7, int r_bytes7,
    const int base0, const int base1, const int base2, const int base3,
    const int base4, const int size0, const int size1) {

  arg7 += r_bytes7;
  double arg7_l[1];
  for (int d = 0; d < 1; d++)
    arg7_l[d] = ZERO_double;

  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    tea_leaf_jacobi_kernel(&arg0[base0 + idx_x * 1 * 1 +
                                 idx_y * 1 * 1 * xdim0_tea_leaf_jacobi_kernel],
                           &arg1[base1 + idx_x * 1 * 1 +
                                 idx_y * 1 * 1 * xdim1_tea_leaf_jacobi_kernel],
                           &arg2[base2 + idx_x * 1 * 1 +
                                 idx_y * 1 * 1 * xdim2_tea_leaf_jacobi_kernel],
                           &arg3[base3 + idx_x * 1 * 1 +
                                 idx_y * 1 * 1 * xdim3_tea_leaf_jacobi_kernel],
                           &arg4[base4 + idx_x * 1 * 1 +
                                 idx_y * 1 * 1 * xdim4_tea_leaf_jacobi_kernel],
                           &arg5, &arg6, arg7_l);
  }
  int group_index = get_group_id(0) + get_group_id(1) * get_num_groups(0) +
                    get_group_id(2) * get_num_groups(0) * get_num_groups(1);
  for (int d = 0; d < 1; d++)
    reduce_double(arg7_l[d], scratch7, &arg7[group_index * 1 + d], OPS_INC);
}
