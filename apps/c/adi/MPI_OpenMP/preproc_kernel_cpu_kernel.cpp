//
// auto-generated by ops.py
//

// user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_preproc_kernel(char const *name, ops_block block, int dim,
                                 int *range, ops_arg arg0, ops_arg arg1,
                                 ops_arg arg2, ops_arg arg3, ops_arg arg4,
                                 ops_arg arg5, ops_arg arg6, ops_arg arg7,
                                 ops_arg arg8, ops_arg arg9, ops_arg arg10,
                                 ops_arg arg11) {
#else
void ops_par_loop_preproc_kernel_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
#endif

  // Timing
  double __t1, __t2, __c1, __c2;

  ops_arg args[12] = {arg0, arg1, arg2, arg3, arg4,  arg5,
                      arg6, arg7, arg8, arg9, arg10, arg11};

#if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args, 12, range, 1))
    return;
#endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance, 1, "preproc_kernel");
    block->instance->OPS_kernels[1].count++;
    ops_timers_core(&__c2, &__t2);
  }

#ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "preproc_kernel");
#endif

  // compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
#if defined(OPS_LAZY) || !defined(OPS_MPI)
  for (int n = 0; n < 3; n++) {
    start[n] = range[2 * n];
    end[n] = range[2 * n + 1];
  }
#else
  if (compute_ranges(args, 12, block, range, start, end, arg_idx) < 0)
    return;
#endif

#ifdef OPS_MPI
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
#else
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
#endif // OPS_MPI

  // initialize global variable with the dimension of dats
  int xdim0_preproc_kernel = args[0].dat->size[0];
  int ydim0_preproc_kernel = args[0].dat->size[1];
  int xdim1_preproc_kernel = args[1].dat->size[0];
  int ydim1_preproc_kernel = args[1].dat->size[1];
  int xdim2_preproc_kernel = args[2].dat->size[0];
  int ydim2_preproc_kernel = args[2].dat->size[1];
  int xdim3_preproc_kernel = args[3].dat->size[0];
  int ydim3_preproc_kernel = args[3].dat->size[1];
  int xdim4_preproc_kernel = args[4].dat->size[0];
  int ydim4_preproc_kernel = args[4].dat->size[1];
  int xdim5_preproc_kernel = args[5].dat->size[0];
  int ydim5_preproc_kernel = args[5].dat->size[1];
  int xdim6_preproc_kernel = args[6].dat->size[0];
  int ydim6_preproc_kernel = args[6].dat->size[1];
  int xdim7_preproc_kernel = args[7].dat->size[0];
  int ydim7_preproc_kernel = args[7].dat->size[1];
  int xdim8_preproc_kernel = args[8].dat->size[0];
  int ydim8_preproc_kernel = args[8].dat->size[1];
  int xdim9_preproc_kernel = args[9].dat->size[0];
  int ydim9_preproc_kernel = args[9].dat->size[1];
  int xdim10_preproc_kernel = args[10].dat->size[0];
  int ydim10_preproc_kernel = args[10].dat->size[1];

  // set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double *__restrict__ u_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double *__restrict__ du_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double *__restrict__ ax_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double *__restrict__ bx_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double *__restrict__ cx_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double *__restrict__ ay_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double *__restrict__ by_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double *__restrict__ cy_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double *__restrict__ az_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double *__restrict__ bz_p = (double *)(args[9].data + base9);

  int base10 = args[10].dat->base_offset;
  double *__restrict__ cz_p = (double *)(args[10].data + base10);

#ifndef OPS_LAZY
  // Halo Exchanges
  ops_H_D_exchanges_host(args, 12);
  ops_halo_exchanges(args, 12, range);
  ops_H_D_exchanges_host(args, 12);
#endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1, &__t1);
    block->instance->OPS_kernels[1].mpi_time += __t1 - __t2;
  }

#pragma omp parallel for collapse(2)
  for (int n_z = start[2]; n_z < end[2]; n_z++) {
    for (int n_y = start[1]; n_y < end[1]; n_y++) {
#ifdef __INTEL_COMPILER
#pragma loop_count(10000)
#pragma omp simd
#elif defined(__clang__)
#pragma clang loop vectorize(assume_safety)
#elif defined(__GNUC__)
#pragma GCC ivdep
#else
#pragma simd
#endif
      for (int n_x = start[0]; n_x < end[0]; n_x++) {
        int idx[] = {arg_idx[0] + n_x, arg_idx[1] + n_y, arg_idx[2] + n_z};
        const ACC<double> u(xdim0_preproc_kernel, ydim0_preproc_kernel,
                            u_p + n_x * 1 + n_y * xdim0_preproc_kernel * 1 +
                                n_z * xdim0_preproc_kernel *
                                    ydim0_preproc_kernel * 1);
        ACC<double> du(xdim1_preproc_kernel, ydim1_preproc_kernel,
                       du_p + n_x * 1 + n_y * xdim1_preproc_kernel * 1 +
                           n_z * xdim1_preproc_kernel * ydim1_preproc_kernel *
                               1);
        ACC<double> ax(xdim2_preproc_kernel, ydim2_preproc_kernel,
                       ax_p + n_x * 1 + n_y * xdim2_preproc_kernel * 1 +
                           n_z * xdim2_preproc_kernel * ydim2_preproc_kernel *
                               1);
        ACC<double> bx(xdim3_preproc_kernel, ydim3_preproc_kernel,
                       bx_p + n_x * 1 + n_y * xdim3_preproc_kernel * 1 +
                           n_z * xdim3_preproc_kernel * ydim3_preproc_kernel *
                               1);
        ACC<double> cx(xdim4_preproc_kernel, ydim4_preproc_kernel,
                       cx_p + n_x * 1 + n_y * xdim4_preproc_kernel * 1 +
                           n_z * xdim4_preproc_kernel * ydim4_preproc_kernel *
                               1);
        ACC<double> ay(xdim5_preproc_kernel, ydim5_preproc_kernel,
                       ay_p + n_x * 1 + n_y * xdim5_preproc_kernel * 1 +
                           n_z * xdim5_preproc_kernel * ydim5_preproc_kernel *
                               1);
        ACC<double> by(xdim6_preproc_kernel, ydim6_preproc_kernel,
                       by_p + n_x * 1 + n_y * xdim6_preproc_kernel * 1 +
                           n_z * xdim6_preproc_kernel * ydim6_preproc_kernel *
                               1);
        ACC<double> cy(xdim7_preproc_kernel, ydim7_preproc_kernel,
                       cy_p + n_x * 1 + n_y * xdim7_preproc_kernel * 1 +
                           n_z * xdim7_preproc_kernel * ydim7_preproc_kernel *
                               1);
        ACC<double> az(xdim8_preproc_kernel, ydim8_preproc_kernel,
                       az_p + n_x * 1 + n_y * xdim8_preproc_kernel * 1 +
                           n_z * xdim8_preproc_kernel * ydim8_preproc_kernel *
                               1);
        ACC<double> bz(xdim9_preproc_kernel, ydim9_preproc_kernel,
                       bz_p + n_x * 1 + n_y * xdim9_preproc_kernel * 1 +
                           n_z * xdim9_preproc_kernel * ydim9_preproc_kernel *
                               1);
        ACC<double> cz(xdim10_preproc_kernel, ydim10_preproc_kernel,
                       cz_p + n_x * 1 + n_y * xdim10_preproc_kernel * 1 +
                           n_z * xdim10_preproc_kernel * ydim10_preproc_kernel *
                               1);

        double a, b, c, d;

        if (idx[0] == 0 || idx[0] == nx - 1 || idx[1] == 0 ||
            idx[1] == ny - 1 || idx[2] == 0 || idx[2] == nz - 1) {
          d = 0.0f;
          a = 0.0f;
          b = 1.0f;
          c = 0.0f;
        } else {
          d = lambda * (u(-1, 0, 0) + u(1, 0, 0) + u(0, -1, 0) + u(0, 1, 0) +
                        u(0, 0, -1) + u(0, 0, 1) - 6.0f * u(0, 0, 0));
          a = -0.5f * lambda;
          b = 1.0f + lambda;
          c = -0.5f * lambda;
        }

        du(0, 0, 0) = d;
        ax(0, 0, 0) = a;
        bx(0, 0, 0) = b;
        cx(0, 0, 0) = c;
        ay(0, 0, 0) = a;
        by(0, 0, 0) = b;
        cy(0, 0, 0) = c;
        az(0, 0, 0) = a;
        bz(0, 0, 0) = b;
        cz(0, 0, 0) = c;
      }
    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2, &__t2);
    block->instance->OPS_kernels[1].time += __t2 - __t1;
  }
#ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 12);
  ops_set_halo_dirtybit3(&args[1], range);
  ops_set_halo_dirtybit3(&args[2], range);
  ops_set_halo_dirtybit3(&args[3], range);
  ops_set_halo_dirtybit3(&args[4], range);
  ops_set_halo_dirtybit3(&args[5], range);
  ops_set_halo_dirtybit3(&args[6], range);
  ops_set_halo_dirtybit3(&args[7], range);
  ops_set_halo_dirtybit3(&args[8], range);
  ops_set_halo_dirtybit3(&args[9], range);
  ops_set_halo_dirtybit3(&args[10], range);
#endif

  if (block->instance->OPS_diags > 1) {
    // Update kernel record
    ops_timers_core(&__c1, &__t1);
    block->instance->OPS_kernels[1].mpi_time += __t1 - __t2;
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg10);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_preproc_kernel(char const *name, ops_block block, int dim,
                                 int *range, ops_arg arg0, ops_arg arg1,
                                 ops_arg arg2, ops_arg arg3, ops_arg arg4,
                                 ops_arg arg5, ops_arg arg6, ops_arg arg7,
                                 ops_arg arg8, ops_arg arg9, ops_arg arg10,
                                 ops_arg arg11) {
  ops_kernel_descriptor *desc =
      (ops_kernel_descriptor *)calloc(1, sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 1;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 1;
  for (int i = 0; i < 6; i++) {
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 12;
  desc->args = (ops_arg *)malloc(12 * sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->function = ops_par_loop_preproc_kernel_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance, 1, "preproc_kernel");
  }
  ops_enqueue_kernel(desc);
}
#endif
