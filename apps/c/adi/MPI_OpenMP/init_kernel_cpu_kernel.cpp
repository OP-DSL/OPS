//
// auto-generated by ops.py
//

// user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_init_kernel(char const *name, ops_block block, int dim,
                              int *range, ops_arg arg0, ops_arg arg1) {
#else
void ops_par_loop_init_kernel_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
#endif

  // Timing
  double __t1, __t2, __c1, __c2;

  ops_arg args[2] = {arg0, arg1};

#if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args, 2, range, 0))
    return;
#endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance, 0, "init_kernel");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2, &__t2);
  }

#ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "init_kernel");
#endif

  // compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
#if defined(OPS_LAZY) || !defined(OPS_MPI)
  for (int n = 0; n < 3; n++) {
    start[n] = range[2 * n];
    end[n] = range[2 * n + 1];
  }
#else
  if (compute_ranges(args, 2, block, range, start, end, arg_idx) < 0)
    return;
#endif

#ifdef OPS_MPI
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
#else
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
#endif // OPS_MPI

  // initialize global variable with the dimension of dats
  int xdim0_init_kernel = args[0].dat->size[0];
  int ydim0_init_kernel = args[0].dat->size[1];

  // set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double *__restrict__ val_p = (double *)(args[0].data + base0);

#ifndef OPS_LAZY
  // Halo Exchanges
  ops_H_D_exchanges_host(args, 2);
  ops_halo_exchanges(args, 2, range);
  ops_H_D_exchanges_host(args, 2);
#endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1, &__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1 - __t2;
  }

#pragma omp parallel for collapse(2)
  for (int n_z = start[2]; n_z < end[2]; n_z++) {
    for (int n_y = start[1]; n_y < end[1]; n_y++) {
#ifdef __INTEL_COMPILER
#pragma loop_count(10000)
#pragma omp simd
#elif defined(__clang__)
#pragma clang loop vectorize(assume_safety)
#elif defined(__GNUC__)
#pragma GCC ivdep
#else
#pragma simd
#endif
      for (int n_x = start[0]; n_x < end[0]; n_x++) {
        int idx[] = {arg_idx[0] + n_x, arg_idx[1] + n_y, arg_idx[2] + n_z};
        ACC<double> val(xdim0_init_kernel, ydim0_init_kernel,
                        val_p + n_x * 1 + n_y * xdim0_init_kernel * 1 +
                            n_z * xdim0_init_kernel * ydim0_init_kernel * 1);

        if (idx[0] == 0 || idx[0] == nx - 1 || idx[1] == 0 ||
            idx[1] == ny - 1 || idx[2] == 0 || idx[2] == nz - 1)
          val(0, 0, 0) = 1.0;
        else
          val(0, 0, 0) = 0.0;
      }
    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2, &__t2);
    block->instance->OPS_kernels[0].time += __t2 - __t1;
  }
#ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 2);
  ops_set_halo_dirtybit3(&args[0], range);
#endif

  if (block->instance->OPS_diags > 1) {
    // Update kernel record
    ops_timers_core(&__c1, &__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1 - __t2;
    block->instance->OPS_kernels[0].transfer +=
        ops_compute_transfer(dim, start, end, &arg0);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_init_kernel(char const *name, ops_block block, int dim,
                              int *range, ops_arg arg0, ops_arg arg1) {
  ops_kernel_descriptor *desc =
      (ops_kernel_descriptor *)calloc(1, sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for (int i = 0; i < 6; i++) {
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 2;
  desc->args = (ops_arg *)malloc(2 * sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->function = ops_par_loop_init_kernel_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance, 0, "init_kernel");
  }
  ops_enqueue_kernel(desc);
}
#endif
