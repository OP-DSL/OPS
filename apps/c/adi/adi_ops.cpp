//
// auto-generated by ops.py
//



void ops_init_backend();
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define OPS_3D
#include  "ops_lib_cpp.h"

//
// ops_par_loop declarations
//

void ops_par_loop_init_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_preproc_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );



#include "data.h"

//#include "init_kernel.h"
//#include "preproc_kernel.h"

typedef double FP;

void dump_data(FP *data, const int nx, const int ny, const int nz,
               const int ldim, const char *filename) {

  char out_filename[256];
  strcpy(out_filename, filename);
  strcat(out_filename, ".dat");

  FILE *fout;
  fout = fopen(out_filename, "w");
  if (fout == NULL) {
    printf(
        "ERROR: File stream could not be opened. Data will not be written to "
        "file!\n");
  } else {

    for (int k = 0; k < nz; k++) {
      for (int j = 0; j < ny; j++) {
        for (int i = 0; i < nx; i++) {
          int ind = i + j * ldim + k * ldim * ny;

          fwrite(&data[ind], sizeof(FP), 1, fout);
        }
      }
    }

    fclose(fout);
  }
}

void dump_and_exit(FP *data, const int nx, const int ny, const int nz,
                   const int ldim, const char *filename, const int iteration,
                   const int max_iteration) {
  dump_data(data, nx, ny, nz, ldim, filename);
  if (iteration == max_iteration) exit(0);
}

int nx;
int ny;
int nz;
int ldim;
int iter;
int opts[3], pads[3], synch;

double lambda;

int main(int argc, const char **argv) {

  nx = 256;
  ny = 256;
  nz = 256;
  opts[0] = 0;
  opts[1] = 0;
  opts[2] = 0;
  iter = 10;
  synch = 1;

  lambda = 1.0f;


  ops_init(argc, argv, 2);
  ops_init_backend();


  ops_block heat3D = ops_decl_block(3, "Heat3D");

  int d_p[3] = {0, 0,
                0};
  int d_m[3] = {0, 0,
                0};
  int size[3] = {nx, ny, nz};

  int pads[3] = {nx, ny, nz};
  int base[3] = {0, 0, 0};
  double *temp = NULL;

  ops_dat h_u =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_u");
  ops_dat h_temp =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_tmp");
  ops_dat h_du =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_du");
  ops_dat h_ax =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_ax");
  ops_dat h_bx =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_bx");
  ops_dat h_cx =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_cx");
  ops_dat h_ay =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_ay");
  ops_dat h_by =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_by");
  ops_dat h_cy =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_cy");
  ops_dat h_az =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_az");
  ops_dat h_bz =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_bz");
  ops_dat h_cz =
      ops_decl_dat(heat3D, 1, size, base, d_m, d_p, temp, "double", "h_cz");

  int s3D_000[] = {0, 0, 0};
  ops_stencil S3D_000 = ops_decl_stencil(3, 1, s3D_000, "000");

  int s3D_7pt[] = {0, 0, 0, -1, 0, 0, 1,  0, 0, 0, -1,
                   0, 0, 1, 0,  0, 0, -1, 0, 0, 1};
  ops_stencil S3D_7PT = ops_decl_stencil(3, 7, s3D_7pt, "3d7Point");

  ops_decl_const2( "nx",1, "int",&nx);
  ops_decl_const2( "ny",1, "int",&ny);
  ops_decl_const2( "nz",1, "int",&nz);
  ops_decl_const2( "lambda",1, "double",&lambda);

  ops_partition("2D_BLOCK_DECOMPSE");

  double ct0, ct1, et0, et1, ct2, et2, ct3, et3;

  printf("\nGrid dimensions: %d x %d x %d\n", nx, ny, nz);
  ops_diagnostic_output();

  ops_initTridMultiDimBatchSolve(3 ,
                                 size );

  int iter_range[] = {0, nx, 0, ny, 0, nz};
  ops_par_loop_init_kernel("init_kernel", heat3D, 3, iter_range,
               ops_arg_dat(h_u, 1, S3D_000, "double", OPS_WRITE),
               ops_arg_idx());

  ops_timers(&ct0, &et0);

  for (int it = 0; it < iter; it++) {

    int iter_range[] = {0, nx, 0, ny, 0, nz};

    ops_timers(&ct2, &et2);
    ops_par_loop_preproc_kernel("preproc_kernel", heat3D, 3, iter_range,
                 ops_arg_dat(h_u, 1, S3D_7PT, "double", OPS_READ),
                 ops_arg_dat(h_du, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_dat(h_ax, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_dat(h_bx, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_dat(h_cx, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_dat(h_ay, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_dat(h_by, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_dat(h_cy, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_dat(h_az, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_dat(h_bz, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_dat(h_cz, 1, S3D_000, "double", OPS_WRITE),
                 ops_arg_idx());
    ops_timers(&ct3, &et3);
    ops_printf("Elapsed preproc (sec): %lf (s)\n", et3 - et2);

    ops_timers(&ct2, &et2);
    ops_tridMultiDimBatch(3, 0, size, h_ax, h_bx, h_cx, h_du, h_u);
    ops_timers(&ct3, &et3);
    ops_printf("Elapsed trid_x (sec): %lf (s)\n", et3 - et2);

    ops_timers(&ct2, &et2);
    ops_tridMultiDimBatch(3, 1, size, h_ay, h_by, h_cy, h_du, h_u);
    ops_timers(&ct3, &et3);
    ops_printf("Elapsed trid_y (sec): %lf (s)\n", et3 - et2);

    ops_timers(&ct2, &et2);
    ops_tridMultiDimBatch_Inc(3, 2, size, h_az, h_bz, h_cz, h_du, h_u);
    ops_timers(&ct3, &et3);
    ops_printf("Elapsed trid_z (sec): %lf (s)\n", et3 - et2);

  }

  ops_timers(&ct1, &et1);

  ops_fetch_block_hdf5_file(heat3D, "adi.h5");
  ops_fetch_dat_hdf5_file(h_u, "adi.h5");

  ldim = nx;

  dump_data((double *)(h_u->data), nx, ny, nz, ldim, argv[0]);

  ops_printf("\nTotal Wall time %lf\n", et1 - et0);
  ops_exit();
}
