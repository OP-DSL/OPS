//
// auto-generated by ops.py
//

// user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_xder1_kernel(char const *name, ops_block block, int dim,
                               int *range, ops_arg arg0, ops_arg arg1) {
#else
void ops_par_loop_xder1_kernel_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
#endif

  // Timing
  double __t1, __t2, __c1, __c2;

  ops_arg args[2] = {arg0, arg1};

#if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args, 2, range, 4))
    return;
#endif

  if (OPS_diags > 1) {
    ops_timing_realloc(4, "xder1_kernel");
    OPS_kernels[4].count++;
    ops_timers_core(&__c2, &__t2);
  }

#ifdef OPS_DEBUG
  ops_register_args(args, "xder1_kernel");
#endif

  // compute locally allocated range for the sub-block
  int start[1];
  int end[1];
#ifdef OPS_MPI
  int arg_idx[1];
#endif
#if defined(OPS_LAZY) || !defined(OPS_MPI)
  for (int n = 0; n < 1; n++) {
    start[n] = range[2 * n];
    end[n] = range[2 * n + 1];
  }
#else
  if (compute_ranges(args, 2, block, range, start, end, arg_idx) < 0)
    return;
#endif

  // initialize global variable with the dimension of dats

  // set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double *__restrict__ inp_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double *__restrict__ out_p = (double *)(args[1].data + base1);

#ifndef OPS_LAZY
  // Halo Exchanges
  ops_H_D_exchanges_host(args, 2);
  ops_halo_exchanges(args, 2, range);
  ops_H_D_exchanges_host(args, 2);
#endif

  if (OPS_diags > 1) {
    ops_timers_core(&__c1, &__t1);
    OPS_kernels[4].mpi_time += __t1 - __t2;
  }

#pragma omp parallel for
  for (int n_x = start[0]; n_x < end[0]; n_x++) {
    const ACC<double> inp(inp_p + n_x * 1);
    ACC<double> out(out_p + n_x * 1);

    double dix = 1 / (12.00 * dx);
    out(0) = (inp(-2) - inp(2) + 8.0 * (inp(1) - inp(-1))) * dix;
  }
  if (OPS_diags > 1) {
    ops_timers_core(&__c2, &__t2);
    OPS_kernels[4].time += __t2 - __t1;
  }
#ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 2);
  ops_set_halo_dirtybit3(&args[1], range);
#endif

  if (OPS_diags > 1) {
    // Update kernel record
    ops_timers_core(&__c1, &__t1);
    OPS_kernels[4].mpi_time += __t1 - __t2;
    OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg0);
    OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_xder1_kernel(char const *name, ops_block block, int dim,
                               int *range, ops_arg arg0, ops_arg arg1) {
  ops_kernel_descriptor *desc =
      (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 4;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 4;
  for (int i = 0; i < 2; i++) {
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 2;
  desc->args = (ops_arg *)malloc(2 * sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->function = ops_par_loop_xder1_kernel_execute;
  if (OPS_diags > 1) {
    ops_timing_realloc(4, "xder1_kernel");
  }
  ops_enqueue_kernel(desc);
}
#endif
