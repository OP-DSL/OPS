//
// auto-generated by ops.py
//

#include "./MPI_inline/shsgc_common.h"


void ops_init_backend() {}

void ops_decl_const_char2(int dim, char const *type,
int size, char *dat, char const *name){
  if (!strcmp(name,"nxp")) {
    nxp = *(int*)dat;
  }
  else
  if (!strcmp(name,"nyp")) {
    nyp = *(int*)dat;
  }
  else
  if (!strcmp(name,"xhalo")) {
    xhalo = *(int*)dat;
  }
  else
  if (!strcmp(name,"xmin")) {
    xmin = *(double*)dat;
  }
  else
  if (!strcmp(name,"xmax")) {
    xmax = *(double*)dat;
  }
  else
  if (!strcmp(name,"dx")) {
    dx = *(double*)dat;
  }
  else
  if (!strcmp(name,"pl")) {
    pl = *(double*)dat;
  }
  else
  if (!strcmp(name,"pr")) {
    pr = *(double*)dat;
  }
  else
  if (!strcmp(name,"rhol")) {
    rhol = *(double*)dat;
  }
  else
  if (!strcmp(name,"rhor")) {
    rhor = *(double*)dat;
  }
  else
  if (!strcmp(name,"ul2")) {
    ul2 = *(double*)dat;
  }
  else
  if (!strcmp(name,"ur")) {
    ur = *(double*)dat;
  }
  else
  if (!strcmp(name,"gam")) {
    gam = *(double*)dat;
  }
  else
  if (!strcmp(name,"gam1")) {
    gam1 = *(double*)dat;
  }
  else
  if (!strcmp(name,"eps")) {
    eps = *(double*)dat;
  }
  else
  if (!strcmp(name,"lambda")) {
    lambda = *(double*)dat;
  }
  else
  if (!strcmp(name,"dt")) {
    dt = *(double*)dat;
  }
  else
  if (!strcmp(name,"del2")) {
    del2 = *(double*)dat;
  }
  else
  if (!strcmp(name,"akap2")) {
    akap2 = *(double*)dat;
  }
  else
  if (!strcmp(name,"tvdsmu")) {
    tvdsmu = *(double*)dat;
  }
  else
  if (!strcmp(name,"con")) {
    con = *(double*)dat;
  }
  else
  if (!strcmp(name,"Mach")) {
    Mach = *(double*)dat;
  }
  else
  if (!strcmp(name,"xt")) {
    xt = *(double*)dat;
  }
  else
  if (!strcmp(name,"scale")) {
    scale = *(int*)dat;
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}

//user kernel files
#include "gridgen_kernel_mpiinline_kernel.cpp"
#include "init_kernel_mpiinline_kernel.cpp"
#include "save_kernel_mpiinline_kernel.cpp"
#include "calvar_kernel_mpiinline_kernel.cpp"
#include "xder1_kernel_mpiinline_kernel.cpp"
#include "residue_eval_mpiinline_kernel.cpp"
#include "updateRK3_kernel_mpiinline_kernel.cpp"
#include "Riemann_kernel_mpiinline_kernel.cpp"
#include "limiter_kernel_mpiinline_kernel.cpp"
#include "tvd_kernel_mpiinline_kernel.cpp"
#include "vars_kernel_mpiinline_kernel.cpp"
#include "calupwindeff_kernel_mpiinline_kernel.cpp"
#include "fact_kernel_mpiinline_kernel.cpp"
#include "update_kernel_mpiinline_kernel.cpp"
#include "checkop_kernel_mpiinline_kernel.cpp"
