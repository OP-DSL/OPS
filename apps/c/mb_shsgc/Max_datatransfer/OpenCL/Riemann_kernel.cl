//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_1D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void Riemann_kernel(const ptr_double  rho_new,
  const ptr_double rhou_new,
  const ptr_double  rhoE_new,
  ptrm_double  alam,
  ptrm_double  r,
  ptrm_double  al, const double gam1)
{
  double rl, rr, rho, u, hl, hr, h, Vsq, csq, c;
  double dw1, dw2, dw3, delpc2, rdeluc;

  rl = sqrt(OPS_ACCS(rho_new, 0));
  rr = sqrt(OPS_ACCS(rho_new, 1));
  rho = rl + rr;
  u = ((OPS_ACCS(rhou_new, 0) / rl) + (OPS_ACCS(rhou_new, 1) / rr)) / rho ;
  double fni = OPS_ACCS(rhou_new, 0) * OPS_ACCS(rhou_new, 0) / OPS_ACCS(rho_new, 0) ;
  double p = gam1 * (OPS_ACCS(rhoE_new, 0) - 0.5 * fni);
  hl = (OPS_ACCS(rhoE_new, 0) + p)  / rl ;
  fni = OPS_ACCS(rhou_new, 1) * OPS_ACCS(rhou_new, 1) / OPS_ACCS(rho_new, 1) ;
  p = gam1 * (OPS_ACCS(rhoE_new, 1) - 0.5 * fni);
  hr = (OPS_ACCS(rhoE_new, 1) + p)  / rr ;
  h = (hl + hr)/rho;
  Vsq = u*u;
  csq = gam1 * (h - 0.5 * Vsq);
  c = sqrt(csq);

  OPS_ACCM(alam, 0,0) = u - c;
  OPS_ACCM(alam, 1,0) = u;
  OPS_ACCM(alam, 2,0) = u + c;

  OPS_ACCM(r, 0,0) = 1.0;
  OPS_ACCM(r, 1,0) = 1.0;
  OPS_ACCM(r, 2,0) = 1.0;

  OPS_ACCM(r, 3,0) = u - c;
  OPS_ACCM(r, 4,0) = u;
  OPS_ACCM(r, 5,0) = u + c;

  OPS_ACCM(r, 6,0) = h - u * c;
  OPS_ACCM(r, 7,0) = 0.5 * Vsq;
  OPS_ACCM(r, 8,0) = h + u * c;

  for (int m=0; m<9; m++)
    OPS_ACCM(r, m,0) = OPS_ACCM(r, m,0) / csq;

  dw1 = OPS_ACCS(rho_new, 1) - OPS_ACCS(rho_new, 0);
  dw2 = OPS_ACCS(rhou_new, 1) - OPS_ACCS(rhou_new, 0);
  dw3 = OPS_ACCS(rhoE_new, 1) - OPS_ACCS(rhoE_new, 0);

  delpc2 = gam1 * ( dw3 + 0.50 * Vsq * dw1  - u * dw2) / csq;
  rdeluc = ( dw2 - u * dw1) / c ;

  OPS_ACCM(al, 0,0) = 0.5 * (delpc2 - rdeluc);
  OPS_ACCM(al, 1,0) = dw1 - delpc2 ;
  OPS_ACCM(al, 2,0) = 0.5 * ( delpc2 + rdeluc );

  for (int m=0; m<3; m++)
    OPS_ACCM(al, m,0) = OPS_ACCM(al, m,0) * csq;
}


__kernel void ops_Riemann_kernel(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global double* restrict arg3,
__global double* restrict arg4,
__global double* restrict arg5,
const double gam1,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int size0 ){


  int idx_x = get_global_id(0);

  if (idx_x < size0) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1] };
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1] };
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1] };
    #ifdef OPS_SOA
    ptrm_double ptr3 = { &arg3[base3 + idx_x * 1*3], xdim3_Riemann_kernel};
    #else
    ptrm_double ptr3 = { &arg3[base3 + idx_x * 1*3], 3};
    #endif
    #ifdef OPS_SOA
    ptrm_double ptr4 = { &arg4[base4 + idx_x * 1*9], xdim4_Riemann_kernel};
    #else
    ptrm_double ptr4 = { &arg4[base4 + idx_x * 1*9], 9};
    #endif
    #ifdef OPS_SOA
    ptrm_double ptr5 = { &arg5[base5 + idx_x * 1*3], xdim5_Riemann_kernel};
    #else
    ptrm_double ptr5 = { &arg5[base5 + idx_x * 1*3], 3};
    #endif
    Riemann_kernel(ptr0,
                   ptr1,
                   ptr2,
                   ptr3,
                   ptr4,
                   ptr5,
                   gam1);
  }

}
