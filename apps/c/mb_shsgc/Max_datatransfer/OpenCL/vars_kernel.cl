//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_1D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void vars_kernel(const ptrm_double  alam,
  const ptrm_double  al,
  const ptrm_double gt,
  ptrm_double  cmp,
  ptrm_double  cf, const double del2, const double con)
{
  double  anu, aaa, ga, qf, ww;
  for (int m=0; m < 3 ;m++) {
    anu = OPS_ACCM(alam, m,0);
    aaa = OPS_ACCM(al, m,0);
    ga = aaa * ( OPS_ACCM(gt, m,1) - OPS_ACCM(gt, m,0)) / (pow(aaa,2.0) + del2);
    qf = sqrt ( con + pow(anu,2.0));
    OPS_ACCM(cmp, m,0) = 0.50 * qf;
    ww = anu + OPS_ACCM(cmp, m,0) * ga;
    qf = sqrt(con + pow(ww,2.0));
    OPS_ACCM(cf, m,0) = qf;
  }
}


__kernel void ops_vars_kernel(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global double* restrict arg3,
__global double* restrict arg4,
const double del2,
const double con,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int size0 ){


  int idx_x = get_global_id(0);

  if (idx_x < size0) {
    #ifdef OPS_SOA
    const ptrm_double ptr0 = { &arg0[base0 + idx_x * 1*3], xdim0_vars_kernel};
    #else
    const ptrm_double ptr0 = { &arg0[base0 + idx_x * 1*3], 3};
    #endif
    #ifdef OPS_SOA
    const ptrm_double ptr1 = { &arg1[base1 + idx_x * 1*3], xdim1_vars_kernel};
    #else
    const ptrm_double ptr1 = { &arg1[base1 + idx_x * 1*3], 3};
    #endif
    #ifdef OPS_SOA
    const ptrm_double ptr2 = { &arg2[base2 + idx_x * 1*3], xdim2_vars_kernel};
    #else
    const ptrm_double ptr2 = { &arg2[base2 + idx_x * 1*3], 3};
    #endif
    #ifdef OPS_SOA
    ptrm_double ptr3 = { &arg3[base3 + idx_x * 1*3], xdim3_vars_kernel};
    #else
    ptrm_double ptr3 = { &arg3[base3 + idx_x * 1*3], 3};
    #endif
    #ifdef OPS_SOA
    ptrm_double ptr4 = { &arg4[base4 + idx_x * 1*3], xdim4_vars_kernel};
    #else
    ptrm_double ptr4 = { &arg4[base4 + idx_x * 1*3], 3};
    #endif
    vars_kernel(ptr0,
                ptr1,
                ptr2,
                ptr3,
                ptr4,
                del2,
                con);
  }

}
