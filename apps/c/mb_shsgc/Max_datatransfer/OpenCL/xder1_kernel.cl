//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

#undef OPS_ACC0
#undef OPS_ACC1


#define OPS_ACC0(x) (x)
#define OPS_ACC1(x) (x)


//user function
void xder1_kernel(const __global double * restrict inp,__global double * restrict out,
  const double dx)

 {
  double dix = 1/(12.00*dx);
  out[OPS_ACC1(0)] = (inp[OPS_ACC0(-2)] - inp[OPS_ACC0(2)]  + 8.0 *(
  inp[OPS_ACC0(1)] - inp[OPS_ACC0(-1)] )) * dix;
}



__kernel void ops_xder1_kernel(
__global const double* restrict arg0,
__global double* restrict arg1,
const double dx,
const int base0,
const int base1,
const int size0 ){


  int idx_x = get_global_id(0);

  if (idx_x < size0) {
    xder1_kernel(&arg0[base0 + idx_x * 1*1],
                 &arg1[base1 + idx_x * 1*1],
                 dx);
  }

}
