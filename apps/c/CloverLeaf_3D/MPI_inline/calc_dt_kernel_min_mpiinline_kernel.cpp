//
// auto-generated by ops.py
//

extern int xdim0_calc_dt_kernel_min;
int xdim0_calc_dt_kernel_min_h = -1;
extern int ydim0_calc_dt_kernel_min;
int ydim0_calc_dt_kernel_min_h = -1;

#ifdef __cplusplus
extern "C" {
#endif
void calc_dt_kernel_min_c_wrapper(double *p_a0, double *p_a1, int x_size,
                                  int y_size, int z_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_calc_dt_kernel_min(char const *name, ops_block block, int dim,
                                     int *range, ops_arg arg0, ops_arg arg1) {

  ops_arg args[2] = {arg0, arg1};

#ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args, 2, range, 99))
    return;
#endif

  ops_timing_realloc(99, "calc_dt_kernel_min");
  OPS_kernels[99].count++;

  // compute localy allocated range for the sub-block
  int start[3];
  int end[3];
#ifdef OPS_MPI
  sub_block_list sb = OPS_sub_block_list[block->index];
  if (!sb->owned)
    return;
  for (int n = 0; n < 3; n++) {
    start[n] = sb->decomp_disp[n];
    end[n] = sb->decomp_disp[n] + sb->decomp_size[n];
    if (start[n] >= range[2 * n]) {
      start[n] = 0;
    } else {
      start[n] = range[2 * n] - start[n];
    }
    if (sb->id_m[n] == MPI_PROC_NULL && range[2 * n] < 0)
      start[n] = range[2 * n];
    if (end[n] >= range[2 * n + 1]) {
      end[n] = range[2 * n + 1] - sb->decomp_disp[n];
    } else {
      end[n] = sb->decomp_size[n];
    }
    if (sb->id_p[n] == MPI_PROC_NULL &&
        (range[2 * n + 1] > sb->decomp_disp[n] + sb->decomp_size[n]))
      end[n] += (range[2 * n + 1] - sb->decomp_disp[n] - sb->decomp_size[n]);
  }
#else
  for (int n = 0; n < 3; n++) {
    start[n] = range[2 * n];
    end[n] = range[2 * n + 1];
  }
#endif

  int x_size = MAX(0, end[0] - start[0]);
  int y_size = MAX(0, end[1] - start[1]);
  int z_size = MAX(0, end[2] - start[2]);

  xdim0 = args[0].dat->size[0];
  ydim0 = args[0].dat->size[1];

  // Timing
  double t1, t2, c1, c2;
  ops_timers_core(&c2, &t2);

  if (xdim0 != xdim0_calc_dt_kernel_min_h ||
      ydim0 != ydim0_calc_dt_kernel_min_h) {
    xdim0_calc_dt_kernel_min = xdim0;
    xdim0_calc_dt_kernel_min_h = xdim0;
    ydim0_calc_dt_kernel_min = ydim0;
    ydim0_calc_dt_kernel_min_h = ydim0;
  }

  int dat0 = (OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);

#ifdef OPS_MPI
  double *arg1h =
      (double *)(((ops_reduction)args[1].data)->data +
                 ((ops_reduction)args[1].data)->size * block->index);
#else
  double *arg1h = (double *)(((ops_reduction)args[1].data)->data);
#endif

  // set up initial pointers
  int d_m[OPS_MAX_DIM];
#ifdef OPS_MPI
  for (int d = 0; d < dim; d++)
    d_m[d] =
        args[0].dat->d_m[d] + OPS_sub_dat_list[args[0].dat->index]->d_im[d];
#else
  for (int d = 0; d < dim; d++)
    d_m[d] = args[0].dat->d_m[d];
#endif
  int base0 = dat0 * 1 * (start[0] * args[0].stencil->stride[0] -
                          args[0].dat->base[0] - d_m[0]);
  base0 = base0 +
          dat0 * args[0].dat->size[0] * (start[1] * args[0].stencil->stride[1] -
                                         args[0].dat->base[1] - d_m[1]);
  base0 = base0 +
          dat0 * args[0].dat->size[0] * args[0].dat->size[1] *
              (start[2] * args[0].stencil->stride[2] - args[0].dat->base[2] -
               d_m[2]);
  double *p_a0 = (double *)((char *)args[0].data + base0);

  double *p_a1 = arg1h;

  ops_H_D_exchanges_host(args, 2);
  ops_halo_exchanges(args, 2, range);

  ops_timers_core(&c1, &t1);
  OPS_kernels[99].mpi_time += t1 - t2;

  calc_dt_kernel_min_c_wrapper(p_a0, p_a1, x_size, y_size, z_size);

  ops_timers_core(&c2, &t2);
  OPS_kernels[99].time += t2 - t1;
  ops_set_dirtybit_host(args, 2);

  // Update kernel record
  OPS_kernels[99].transfer += ops_compute_transfer(dim, start, end, &arg0);
}
