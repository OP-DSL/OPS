//
// auto-generated by ops.py
//
__constant__ int xdim0_advec_mom_kernel1_y_nonvector;
int xdim0_advec_mom_kernel1_y_nonvector_h = -1;
__constant__ int ydim0_advec_mom_kernel1_y_nonvector;
int ydim0_advec_mom_kernel1_y_nonvector_h = -1;
__constant__ int xdim1_advec_mom_kernel1_y_nonvector;
int xdim1_advec_mom_kernel1_y_nonvector_h = -1;
__constant__ int ydim1_advec_mom_kernel1_y_nonvector;
int ydim1_advec_mom_kernel1_y_nonvector_h = -1;
__constant__ int xdim2_advec_mom_kernel1_y_nonvector;
int xdim2_advec_mom_kernel1_y_nonvector_h = -1;
__constant__ int ydim2_advec_mom_kernel1_y_nonvector;
int ydim2_advec_mom_kernel1_y_nonvector_h = -1;
__constant__ int xdim3_advec_mom_kernel1_y_nonvector;
int xdim3_advec_mom_kernel1_y_nonvector_h = -1;
__constant__ int ydim3_advec_mom_kernel1_y_nonvector;
int ydim3_advec_mom_kernel1_y_nonvector_h = -1;
__constant__ int xdim4_advec_mom_kernel1_y_nonvector;
int xdim4_advec_mom_kernel1_y_nonvector_h = -1;
__constant__ int ydim4_advec_mom_kernel1_y_nonvector;
int ydim4_advec_mom_kernel1_y_nonvector_h = -1;

#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4

#define OPS_ACC0(x, y, z)                                                      \
  (x + xdim0_advec_mom_kernel1_y_nonvector * (y) +                             \
   xdim0_advec_mom_kernel1_y_nonvector * ydim0_advec_mom_kernel1_y_nonvector * \
       (z))
#define OPS_ACC1(x, y, z)                                                      \
  (x + xdim1_advec_mom_kernel1_y_nonvector * (y) +                             \
   xdim1_advec_mom_kernel1_y_nonvector * ydim1_advec_mom_kernel1_y_nonvector * \
       (z))
#define OPS_ACC2(x, y, z)                                                      \
  (x + xdim2_advec_mom_kernel1_y_nonvector * (y) +                             \
   xdim2_advec_mom_kernel1_y_nonvector * ydim2_advec_mom_kernel1_y_nonvector * \
       (z))
#define OPS_ACC3(x, y, z)                                                      \
  (x + xdim3_advec_mom_kernel1_y_nonvector * (y) +                             \
   xdim3_advec_mom_kernel1_y_nonvector * ydim3_advec_mom_kernel1_y_nonvector * \
       (z))
#define OPS_ACC4(x, y, z)                                                      \
  (x + xdim4_advec_mom_kernel1_y_nonvector * (y) +                             \
   xdim4_advec_mom_kernel1_y_nonvector * ydim4_advec_mom_kernel1_y_nonvector * \
       (z))

// user function
__device__

    inline void
    advec_mom_kernel1_y_nonvector_gpu(const double *node_flux,
                                      const double *node_mass_pre,
                                      double *mom_flux, const double *celldy,
                                      const double *vel1) {

  double sigma, wind, width;
  double vdiffuw, vdiffdw, auw, adw, limiter;
  int upwind, donor, downwind, dif;
  double advec_vel_temp;

  if ((node_flux[OPS_ACC0(0, 0, 0)]) < 0.0) {
    upwind = 2;
    donor = 1;
    downwind = 0;
    dif = donor;
  } else {
    upwind = -1;
    donor = 0;
    downwind = 1;
    dif = upwind;
  }

  sigma =
      fabs(node_flux[OPS_ACC0(0, 0, 0)]) / node_mass_pre[OPS_ACC1(0, donor, 0)];
  width = celldy[OPS_ACC3(0, 0, 0)];
  vdiffuw = vel1[OPS_ACC4(0, donor, 0)] - vel1[OPS_ACC4(0, upwind, 0)];
  vdiffdw = vel1[OPS_ACC4(0, downwind, 0)] - vel1[OPS_ACC4(0, donor, 0)];
  limiter = 0.0;
  if (vdiffuw * vdiffdw > 0.0) {
    auw = fabs(vdiffuw);
    adw = fabs(vdiffdw);
    wind = 1.0;
    if (vdiffdw <= 0.0)
      wind = -1.0;
    limiter =
        wind * MIN(width * ((2.0 - sigma) * adw / width +
                            (1.0 + sigma) * auw / celldy[OPS_ACC3(0, dif, 0)]) /
                       6.0,
                   MIN(auw, adw));
  }
  advec_vel_temp = vel1[OPS_ACC4(0, donor, 0)] + (1.0 - sigma) * limiter;
  mom_flux[OPS_ACC2(0, 0, 0)] = advec_vel_temp * node_flux[OPS_ACC0(0, 0, 0)];
}

#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4

__global__ void ops_advec_mom_kernel1_y_nonvector(
    const double *__restrict arg0, const double *__restrict arg1,
    double *__restrict arg2, const double *__restrict arg3,
    const double *__restrict arg4, int size0, int size1, int size2) {

  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1 * 1 + idx_y * 1 * 1 * xdim0_advec_mom_kernel1_y_nonvector +
          idx_z * 1 * 1 * xdim0_advec_mom_kernel1_y_nonvector *
              ydim0_advec_mom_kernel1_y_nonvector;
  arg1 += idx_x * 1 * 1 + idx_y * 1 * 1 * xdim1_advec_mom_kernel1_y_nonvector +
          idx_z * 1 * 1 * xdim1_advec_mom_kernel1_y_nonvector *
              ydim1_advec_mom_kernel1_y_nonvector;
  arg2 += idx_x * 1 * 1 + idx_y * 1 * 1 * xdim2_advec_mom_kernel1_y_nonvector +
          idx_z * 1 * 1 * xdim2_advec_mom_kernel1_y_nonvector *
              ydim2_advec_mom_kernel1_y_nonvector;
  arg3 += idx_x * 0 * 1 + idx_y * 1 * 1 * xdim3_advec_mom_kernel1_y_nonvector +
          idx_z * 0 * 1 * xdim3_advec_mom_kernel1_y_nonvector *
              ydim3_advec_mom_kernel1_y_nonvector;
  arg4 += idx_x * 1 * 1 + idx_y * 1 * 1 * xdim4_advec_mom_kernel1_y_nonvector +
          idx_z * 1 * 1 * xdim4_advec_mom_kernel1_y_nonvector *
              ydim4_advec_mom_kernel1_y_nonvector;

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    advec_mom_kernel1_y_nonvector_gpu(arg0, arg1, arg2, arg3, arg4);
  }
}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_advec_mom_kernel1_y_nonvector(char const *name,
                                                ops_block block, int dim,
                                                int *range, ops_arg arg0,
                                                ops_arg arg1, ops_arg arg2,
                                                ops_arg arg3, ops_arg arg4) {
#else
void ops_par_loop_advec_mom_kernel1_y_nonvector_execute(
    ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
#endif

  // Timing
  double t1, t2, c1, c2;

  ops_arg args[5] = {arg0, arg1, arg2, arg3, arg4};

#if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args, 5, range, 133))
    return;
#endif

  if (OPS_diags > 1) {
    ops_timing_realloc(133, "advec_mom_kernel1_y_nonvector");
    OPS_kernels[133].count++;
    ops_timers_core(&c1, &t1);
  }

  // compute locally allocated range for the sub-block
  int start[3];
  int end[3];
#if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  if (!sb->owned)
    return;
  for (int n = 0; n < 3; n++) {
    start[n] = sb->decomp_disp[n];
    end[n] = sb->decomp_disp[n] + sb->decomp_size[n];
    if (start[n] >= range[2 * n]) {
      start[n] = 0;
    } else {
      start[n] = range[2 * n] - start[n];
    }
    if (sb->id_m[n] == MPI_PROC_NULL && range[2 * n] < 0)
      start[n] = range[2 * n];
    if (end[n] >= range[2 * n + 1]) {
      end[n] = range[2 * n + 1] - sb->decomp_disp[n];
    } else {
      end[n] = sb->decomp_size[n];
    }
    if (sb->id_p[n] == MPI_PROC_NULL &&
        (range[2 * n + 1] > sb->decomp_disp[n] + sb->decomp_size[n]))
      end[n] += (range[2 * n + 1] - sb->decomp_disp[n] - sb->decomp_size[n]);
  }
#else
  for (int n = 0; n < 3; n++) {
    start[n] = range[2 * n];
    end[n] = range[2 * n + 1];
  }
#endif

  int x_size = MAX(0, end[0] - start[0]);
  int y_size = MAX(0, end[1] - start[1]);
  int z_size = MAX(0, end[2] - start[2]);

  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];

  if (xdim0 != xdim0_advec_mom_kernel1_y_nonvector_h ||
      ydim0 != ydim0_advec_mom_kernel1_y_nonvector_h ||
      xdim1 != xdim1_advec_mom_kernel1_y_nonvector_h ||
      ydim1 != ydim1_advec_mom_kernel1_y_nonvector_h ||
      xdim2 != xdim2_advec_mom_kernel1_y_nonvector_h ||
      ydim2 != ydim2_advec_mom_kernel1_y_nonvector_h ||
      xdim3 != xdim3_advec_mom_kernel1_y_nonvector_h ||
      ydim3 != ydim3_advec_mom_kernel1_y_nonvector_h ||
      xdim4 != xdim4_advec_mom_kernel1_y_nonvector_h ||
      ydim4 != ydim4_advec_mom_kernel1_y_nonvector_h) {
    cudaMemcpyToSymbol(xdim0_advec_mom_kernel1_y_nonvector, &xdim0,
                       sizeof(int));
    xdim0_advec_mom_kernel1_y_nonvector_h = xdim0;
    cudaMemcpyToSymbol(ydim0_advec_mom_kernel1_y_nonvector, &ydim0,
                       sizeof(int));
    ydim0_advec_mom_kernel1_y_nonvector_h = ydim0;
    cudaMemcpyToSymbol(xdim1_advec_mom_kernel1_y_nonvector, &xdim1,
                       sizeof(int));
    xdim1_advec_mom_kernel1_y_nonvector_h = xdim1;
    cudaMemcpyToSymbol(ydim1_advec_mom_kernel1_y_nonvector, &ydim1,
                       sizeof(int));
    ydim1_advec_mom_kernel1_y_nonvector_h = ydim1;
    cudaMemcpyToSymbol(xdim2_advec_mom_kernel1_y_nonvector, &xdim2,
                       sizeof(int));
    xdim2_advec_mom_kernel1_y_nonvector_h = xdim2;
    cudaMemcpyToSymbol(ydim2_advec_mom_kernel1_y_nonvector, &ydim2,
                       sizeof(int));
    ydim2_advec_mom_kernel1_y_nonvector_h = ydim2;
    cudaMemcpyToSymbol(xdim3_advec_mom_kernel1_y_nonvector, &xdim3,
                       sizeof(int));
    xdim3_advec_mom_kernel1_y_nonvector_h = xdim3;
    cudaMemcpyToSymbol(ydim3_advec_mom_kernel1_y_nonvector, &ydim3,
                       sizeof(int));
    ydim3_advec_mom_kernel1_y_nonvector_h = ydim3;
    cudaMemcpyToSymbol(xdim4_advec_mom_kernel1_y_nonvector, &xdim4,
                       sizeof(int));
    xdim4_advec_mom_kernel1_y_nonvector_h = xdim4;
    cudaMemcpyToSymbol(ydim4_advec_mom_kernel1_y_nonvector, &ydim4,
                       sizeof(int));
    ydim4_advec_mom_kernel1_y_nonvector_h = ydim4;
  }

  dim3 grid((x_size - 1) / OPS_block_size_x + 1,
            (y_size - 1) / OPS_block_size_y + 1,
            (z_size - 1) / OPS_block_size_z + 1);
  dim3 tblock(OPS_block_size_x, OPS_block_size_y, OPS_block_size_z);

  int dat0 = (OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  int dat1 = (OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  int dat2 = (OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  int dat3 = (OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  int dat4 = (OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);

  char *p_a[5];

  // set up initial pointers
  int base0 = args[0].dat->base_offset +
              dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0 +
          dat0 * args[0].dat->size[0] * (start[1] * args[0].stencil->stride[1]);
  base0 = base0 +
          dat0 * args[0].dat->size[0] * args[0].dat->size[1] *
              (start[2] * args[0].stencil->stride[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  int base1 = args[1].dat->base_offset +
              dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1 +
          dat1 * args[1].dat->size[0] * (start[1] * args[1].stencil->stride[1]);
  base1 = base1 +
          dat1 * args[1].dat->size[0] * args[1].dat->size[1] *
              (start[2] * args[1].stencil->stride[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  int base2 = args[2].dat->base_offset +
              dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2 +
          dat2 * args[2].dat->size[0] * (start[1] * args[2].stencil->stride[1]);
  base2 = base2 +
          dat2 * args[2].dat->size[0] * args[2].dat->size[1] *
              (start[2] * args[2].stencil->stride[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  int base3 = args[3].dat->base_offset +
              dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3 +
          dat3 * args[3].dat->size[0] * (start[1] * args[3].stencil->stride[1]);
  base3 = base3 +
          dat3 * args[3].dat->size[0] * args[3].dat->size[1] *
              (start[2] * args[3].stencil->stride[2]);
  p_a[3] = (char *)args[3].data_d + base3;

  int base4 = args[4].dat->base_offset +
              dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4 +
          dat4 * args[4].dat->size[0] * (start[1] * args[4].stencil->stride[1]);
  base4 = base4 +
          dat4 * args[4].dat->size[0] * args[4].dat->size[1] *
              (start[2] * args[4].stencil->stride[2]);
  p_a[4] = (char *)args[4].data_d + base4;

#ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 5);
  ops_halo_exchanges(args, 5, range);
#endif

  if (OPS_diags > 1) {
    ops_timers_core(&c2, &t2);
    OPS_kernels[133].mpi_time += t2 - t1;
  }

  // call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0 && z_size > 0)
    ops_advec_mom_kernel1_y_nonvector<<<grid, tblock>>>(
        (double *)p_a[0], (double *)p_a[1], (double *)p_a[2], (double *)p_a[3],
        (double *)p_a[4], x_size, y_size, z_size);

  cutilSafeCall(cudaGetLastError());

  if (OPS_diags > 1) {
    cutilSafeCall(cudaDeviceSynchronize());
    ops_timers_core(&c1, &t1);
    OPS_kernels[133].time += t1 - t2;
  }

#ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 5);
  ops_set_halo_dirtybit3(&args[2], range);
#endif

  if (OPS_diags > 1) {
    // Update kernel record
    ops_timers_core(&c2, &t2);
    OPS_kernels[133].mpi_time += t2 - t1;
    OPS_kernels[133].transfer += ops_compute_transfer(dim, start, end, &arg0);
    OPS_kernels[133].transfer += ops_compute_transfer(dim, start, end, &arg1);
    OPS_kernels[133].transfer += ops_compute_transfer(dim, start, end, &arg2);
    OPS_kernels[133].transfer += ops_compute_transfer(dim, start, end, &arg3);
    OPS_kernels[133].transfer += ops_compute_transfer(dim, start, end, &arg4);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_advec_mom_kernel1_y_nonvector(char const *name,
                                                ops_block block, int dim,
                                                int *range, ops_arg arg0,
                                                ops_arg arg1, ops_arg arg2,
                                                ops_arg arg3, ops_arg arg4) {
  ops_kernel_descriptor *desc =
      (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 133;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 133;
  for (int i = 0; i < 6; i++) {
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 5;
  desc->args = (ops_arg *)malloc(5 * sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->function = ops_par_loop_advec_mom_kernel1_y_nonvector_execute;
  if (OPS_diags > 1) {
    ops_timing_realloc(133, "advec_mom_kernel1_y_nonvector");
  }
  ops_enqueue_kernel(desc);
}
#endif
