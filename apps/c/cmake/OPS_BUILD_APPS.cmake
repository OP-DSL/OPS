#   Clean the tmp directory for the code generation
macro(CreateTempDir)
    file(REMOVE_RECURSE "${CMAKE_CURRENT_BINARY_DIR}/tmp")
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/tmp")
endmacro()

function(add_cmake_test EXE_NAME SCRIPT_PATH ARGUMENTS)
    if(EXISTS ${SCRIPT_PATH})
        separate_arguments(args NATIVE_COMMAND ${ARGUMENTS})
        execute_process(COMMAND /bin/bash ${SCRIPT_PATH} ${EXE_NAME} ${args}
                        RESULT_VARIABLE test_result
                        OUTPUT_VARIABLE test_output)

        if(test_result EQUAL 0)
            string(REGEX REPLACE "\n" "" test_output "${test_output}")

            # message(STATUS "run command: ${test_output}")
            set(args " ")
            set(cmd "${test_output}")

            add_test(NAME ${EXE_NAME}
                    COMMAND ${CMAKE_COMMAND}
                    -DCMD=${cmd} -DARG=${args}
		    -DOPS_INSTALL_PATH=${CMAKE_INSTALL_PATH} -P ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/OPS_runtests.cmake
                    WORKING_DIRECTORY "${TMP_SOURCE_DIR}")
        else()
            message(FATAL_ERROR "Error in executing script to get runtime command string ${test_result}: ${test_output}")
        endif()
    endif()
endfunction()


macro(SetAppExe
    APP_exe 
    APP_SRC 
    APP_type
    APP_DIR_DST
    APP_DIR_SRC
    CWD 
    INP
    Links 
    Defs
    Options)
    add_executable(${APP_exe} ${APP_SRC})
    target_include_directories(${APP_exe} PRIVATE ${APP_DIR_SRC})
    foreach(Def IN LISTS Defs)
      target_compile_definitions(${APP_exe} PRIVATE ${Def})
    endforeach()
    foreach(Opt IN LISTS Optionss)
      target_compile_options(${APP_exe} PRIVATE ${Def})
    endforeach()
    message(STATUS "INP ${INP}")
    message(STATUS "DESTINATION ${APP_DIR_DST}")
    install(FILES ${INP} DESTINATION ${APP_DIR_DST})
    foreach(Link IN LISTS Links)
      target_link_libraries(${APP_exe} PRIVATE ${Link})
    endforeach()
    install(TARGETS ${APP_exe} DESTINATION ${APP_DIR_DST})
    add_cmake_test(${APP_DIR_DST}/${APP_exe} ${CWD}/cmake_test.sh ${APP_type})
endmacro()

#   Prepare the macro for compiling apps Name: App name Odd: Key words for source
#   files are included in other source files and need no explicit compilation
#   Others: Key words for source codes need no code generation using ops.py Extra:
#   Key words for ource codes that cannot be treated by the macro Trid: Whether
#   the tridiagonal library is required for this application GenerateTest: if
#   generating the testings, some apps need specific testing targets. 
#   TODO: tiled, sycl, openmpoffload
macro(
    BUILD_OPS_C_SAMPLE
    Name
    Odd
    Others
    Extra
    Trid
    GenerateTest)

    # Copy all source and head files into tmp
    file(GLOB CPP "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
    
    list(FILTER CPP EXCLUDE REGEX "ops.cpp")

    file(COPY ${CPP} DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/tmp/")
    file(GLOB HEADS "${CMAKE_CURRENT_SOURCE_DIR}/*.h")
    file(COPY ${HEADS} DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/tmp/")

    set(TMP_SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/tmp")

    # Get the file to be compiled, DEV: non-optimised codes (full directory and filename) 
    # OPS: codes generated by ops.py (full directory and filename)
    # OTHERS: Source codes need no code generation (full directory and filename)
    file(GLOB DEV "${TMP_SOURCE_DIR}/*.cpp")
    list(FILTER DEV EXCLUDE REGEX ${Odd})
    foreach(oth ${Others})
            list(FILTER DEV EXCLUDE REGEX ${oth})
    endforeach()
    foreach(ext ${Extra})
        list(FILTER DEV EXCLUDE REGEX ${ext})
    endforeach()

    list(GET DEV 0 Kernel)

    get_filename_component(KernelName ${Kernel} NAME_WE)

    # If not LEGACY_CODEGEN then activate the Installed Python Virtual Environment
    if(NOT LEGACY_CODEGEN)
	set(VENV_ACTIVATE "source ${CMAKE_INSTALL_PREFIX}/translator/ops_translator/ops_venv/bin/activate")

        execute_process(COMMAND /bin/bash -c ${VENV_ACTIVATE}
                        WORKING_DIRECTORY ${TMP_SOURCE_DIR}
                        RESULT_VARIABLE result
                        OUTPUT_VARIABLE output)

        if(result EQUAL 0)
	    set(PYTHON_EXECUTABLE "${CMAKE_INSTALL_PREFIX}/translator/ops_translator/ops_venv/bin/python3")
            message(STATUS "Python Virtual Enviroment activated successfully")
        else()
            message("command: ${VENV_ACTIVATE}")
            if(NOT "${output}" STREQUAL "")
                message(FATAL_ERROR "Activate Python Virtual Environment command failed with error code ${result}: ${output}")
            else()
                message(FATAL_ERROR "Activate Python Virtual Environment command failed with error code ${result}")
            endif()
        endif()
    endif()

    #       Run OPS code-generation
    if(LEGACY_CODEGEN)
        message(STATUS "Code-gen command legacy: ${OPS_C_TRANSLATOR} ${DEV}")
        execute_process(COMMAND ${OPS_C_TRANSLATOR} ${DEV}
                        WORKING_DIRECTORY ${TMP_SOURCE_DIR}
                        RESULT_VARIABLE result
                        OUTPUT_VARIABLE output)
    else()
        if(${CMAKE_PROJECT_NAME} STREQUAL OPS)
            set(PYTHON_FILE_ARGS "-DOPS_ACC_IGNORE -I ${CMAKE_SOURCE_DIR}/ops/c/include --file_paths")
            set(PYTHON_OPS_INCLUDE ${CMAKE_SOURCE_DIR}/ops/c/include)
        endif()
        if(${CMAKE_PROJECT_NAME} STREQUAL APP)
            set(PYTHON_FILE_ARGS "-DOPS_ACC_IGNORE -I ${CMAKE_INSTALL_PATH}/include --file_paths")
            set(PYTHON_OPS_INCLUDE ${CMAKE_INSTALL_PATH}/include)
        endif()
        foreach(filepath ${DEV})
            get_filename_component(filename ${filepath} NAME)
            list(APPEND FILENAMES ${filename})
        endforeach()

        execute_process(COMMAND ${PYTHON_EXECUTABLE} ${OPS_C_TRANSLATOR}
                        -DOPS_ACC_IGNORE
                        -I ${PYTHON_OPS_INCLUDE}
                        --file_paths ${FILENAMES}
                        WORKING_DIRECTORY ${TMP_SOURCE_DIR}
                        RESULT_VARIABLE result
                        OUTPUT_VARIABLE output)
    endif()

    if(result EQUAL 0)
        message(STATUS "OPS Python code generation runs successfully")
    else()
        message(FATAL_ERROR "OPS Python code generation command failed with error code ${result}: ${output}")
    endif()

    file(GLOB OPS "${TMP_SOURCE_DIR}/*ops*.cpp")

    list(FILTER OPS EXCLUDE REGEX ${Odd})

    file(GLOB OTHERS "${TMP_SOURCE_DIR}/*.cpp")
    foreach(OpsFile ${OPS})
            list(REMOVE_ITEM OTHERS ${OpsFile})
        string(REPLACE "_ops" "" NoOPS ${OpsFile})
        list(REMOVE_ITEM OTHERS ${NoOPS})
    endforeach()

    list(FILTER OTHERS EXCLUDE REGEX ${Odd})

    foreach(ext ${Extra})
        list(FILTER OTHERS EXCLUDE REGEX ${ext})
    endforeach()

    # Copy input parameters
    file(GLOB_RECURSE INPUT "${CMAKE_CURRENT_SOURCE_DIR}/*.in")

    # TARGET: DEV_SEQ, SEQ, OPENMP, TILED
    set(APP_TYPE "dev_seq")
    set(Name_exe ${Name}_${APP_TYPE})
    set(APP_INSTALL_DIR ${app_dir_c}/${Name_exe})
    set(APP_SRC ${DEV} ${OTHERS})
    set(Links "ops_seq" 
	      "OpenMP::OpenMP_CXX")
    if (HDF5_FOUND)
      list(APPEND Links "ops_hdf5_seq")
      list(APPEND Links "hdf5::hdf5")
      list(APPEND Links "hdf5::hdf5_hl")
      list(APPEND Links "MPI::MPI_CXX")
    endif()
    set(Defs "")
    set(Opts "")
    # Make sure to use "" for potentially empty inputs
    setappexe("${Name_exe}" "${APP_SRC}" "${APP_TYPE}" 
	      "${APP_INSTALL_DIR}" "${TMP_SOURCE_DIR}" 
	      "${CMAKE_CURRENT_SOURCE_DIR}" "${INPUT}" 
	      "${Links}" "${Defs}" "${Opts}")  
   
    set(APP_TYPE "seq")
    set(Name_exe ${Name}_${APP_TYPE})
    set(APP_INSTALL_DIR ${app_dir_c}/${Name_exe})
    set(APP_SRC ${OPS} ${OTHERS} "${TMP_SOURCE_DIR}/mpi_openmp/mpi_openmp_kernels.cpp")
    set(Links "ops_seq" 
	      "OpenMP::OpenMP_CXX")
    if (HDF5_FOUND)
      list(APPEND Links "ops_hdf5_seq")
      list(APPEND Links "hdf5::hdf5")
      list(APPEND Links "hdf5::hdf5_hl")
      list(APPEND Links "MPI::MPI_CXX")
    endif()
    set(Defs "")
    set(Opts "")
    # Make sure to use "" for potentially empty inputs
    setappexe("${Name_exe}" "${APP_SRC}" "${APP_TYPE}" 
	      "${APP_INSTALL_DIR}" "${TMP_SOURCE_DIR}" 
	      "${CMAKE_CURRENT_SOURCE_DIR}" "${INPUT}" 
	      "${Links}" "${Defs}" "${Opts}")  
    
    set(APP_TYPE "openmp")
    set(Name_exe ${Name}_${APP_TYPE})
    set(APP_INSTALL_DIR ${app_dir_c}/${Name_exe})
    set(APP_SRC ${OPS} ${OTHERS} 
	        "${TMP_SOURCE_DIR}/mpi_openmp/mpi_openmp_kernels.cpp")
    set(Links "ops_seq" 
	      "OpenMP::OpenMP_CXX")
    if (HDF5_FOUND)
      list(APPEND Links "ops_hdf5_seq")
      list(APPEND Links "hdf5::hdf5")
      list(APPEND Links "hdf5::hdf5_hl")
      list(APPEND Links "MPI::MPI_CXX")
    endif()
    set(Defs "")
    set(Opts "")
    # Make sure to use "" for potentially empty inputs
    setappexe("${Name_exe}" "${APP_SRC}" "${APP_TYPE}" 
	      "${APP_INSTALL_DIR}" "${TMP_SOURCE_DIR}" 
	      "${CMAKE_CURRENT_SOURCE_DIR}" "${INPUT}" 
	      "${Links}" "${Defs}" "${Opts}")  
    
    set(APP_TYPE "tiled")
    set(Name_exe ${Name}_${APP_TYPE})
    set(APP_INSTALL_DIR ${app_dir_c}/${Name_exe})
    set(APP_SRC ${OPS} ${OTHERS} 
	        "${TMP_SOURCE_DIR}/mpi_openmp/mpi_openmp_kernels.cpp")
    set(Links "ops_seq" 
	      "OpenMP::OpenMP_CXX")
    if (HDF5_FOUND)
      list(APPEND Links "ops_hdf5_seq")
      list(APPEND Links "hdf5::hdf5")
      list(APPEND Links "hdf5::hdf5_hl")
      list(APPEND Links "MPI::MPI_CXX")
    endif()
    set(Defs "-DOPS_LAZY")
    set(Opts "")
    # Make sure to use "" for potentially empty inputs
    setappexe("${Name_exe}" "${APP_SRC}" "${APP_TYPE}" 
	      "${APP_INSTALL_DIR}" "${TMP_SOURCE_DIR}" 
	      "${CMAKE_CURRENT_SOURCE_DIR}" "${INPUT}" 
	      "${Links}" "${Defs}" "${Opts}")  
   
    if(CUDAToolkit_FOUND) 
      set(APP_TYPE "cuda")
      set(Name_exe ${Name}_${APP_TYPE})
      set(APP_INSTALL_DIR ${app_dir_c}/${Name_exe})
      set(APP_SRC ${OPS} ${OTHERS} 
                  "${TMP_SOURCE_DIR}/cuda/cuda_kernels.cu")
      set(Links "ops_cuda"
	        "CUDA::cudart_static"
	        "-lcurand"	
                "OpenMP::OpenMP_CXX")
      if (HDF5_FOUND)
        list(APPEND Links "ops_hdf5_seq")
        list(APPEND Links "hdf5::hdf5")
        list(APPEND Links "hdf5::hdf5_hl")
        list(APPEND Links "MPI::MPI_CXX")
      endif()
      set(Defs "-DOPS_LAZY")
      # Not sure this should be here: why not on the general nvcc flags? 
      set(Opts "$<$<COMPILE_LANGUAGE:CUDA>:--fmad=false>")
      # Make sure to use "" for potentially empty inputs
      setappexe("${Name_exe}" "${APP_SRC}" "${APP_TYPE}" 
                "${APP_INSTALL_DIR}" "${TMP_SOURCE_DIR}" 
                "${CMAKE_CURRENT_SOURCE_DIR}" "${INPUT}" 
                "${Links}" "${Defs}" "${Opts}")  
    endif()     
    #if(OMPOFFLOAD)
    #    add_executable(${Name}_ompoffload ${OPS} ${OTHERS}
    #                    "${TMP_SOURCE_DIR}/openmp_offload/openmp_offload_kernels.cpp")
    #    target_include_directories(${Name}_ompoffload PRIVATE ${TMP_SOURCE_DIR})
    #    target_link_libraries(${Name}_ompoffload ops_ompoffload OpenMP::OpenMP_CXX)
    #    target_compile_options(${Name}_ompoffload PRIVATE ${OMPOFFLOAD_FLAGS})
    #    if(HDF5_SEQ)
    #        target_link_libraries(${Name}_ompoffload ops_hdf5_seq hdf5::hdf5 hdf5::hdf5_hl
    #                                MPI::MPI_CXX)
    #    endif()
    #    target_link_options(${Name}_ompoffload PRIVATE ${OMPOFFLOAD_FLAGS})
    #    install(TARGETS ${Name}_ompoffload DESTINATION ${APP_INSTALL_DIR}/${Name})

    #    if((OPS_TEST)
    #        AND (GPU_NUMBER GREATER_EQUAL 1)
    #        AND (${GenerateTest} STREQUAL "YES"))
    #        add_cmake_test(${CMAKE_CURRENT_BINARY_DIR}/${Name}_ompoffload ${CMAKE_CURRENT_SOURCE_DIR}/cmake_test.sh ompoffload)
    #    endif()
    #endif()

    #if(OPS_HIP)
    #    if(HIP AND NOT TRID)
    #        add_executable(${Name}_hip ${OPS} ${OTHERS}
    #                        "${TMP_SOURCE_DIR}/hip/hip_kernels.cpp")
    #        message("${TMP_SOURCE_DIR}/hip/${KernelName}_hip_kernel.cpp")

    #    target_include_directories(${Name}_hip PRIVATE ${TMP_SOURCE_DIR})
    #    target_link_libraries(${Name}_hip ops_hip hip::device OpenMP::OpenMP_CXX)

    #    # if (HDF5_SEQ) target_link_libraries(${Name}_hip ops_hdf5_seq hdf5::hdf5
    #    #                                     hdf5::hdf5_hl  MPI::MPI_CXX) endif()
    #    install(TARGETS ${Name}_hip DESTINATION ${APP_INSTALL_DIR}/${Name})
    #    if((OPS_TEST)
    #        AND (GPU_NUMBER GREATER_EQUAL 1)
    #        AND (${GenerateTest} STREQUAL "YES"))

    #        set(args "OPS_CL_DEVICE=1 OPS_BLOCK_SIZE_X=512 OPS_BLOCK_SIZE_Y=1")
    #        add_test(NAME ${Name}_hip
    #                COMMAND
    #                ${CMAKE_COMMAND} -DCMD=$<TARGET_FILE:${Name}_opencl> -DARG=${args}
    #                -DOPS_INSTALL_PATH=${OPS_CMAKE_INSTALL_PATH} -P
    #                ${OPS_APP_SRC}/runtests.cmake
    #                WORKING_DIRECTORY "${TMP_SOURCE_DIR}")
    #        endif()
    #    endif()
    #endif()

    #if(MPI)
    #    add_executable(${Name}_dev_mpi ${DEV} ${OTHERS})
    #    target_include_directories(${Name}_dev_mpi PRIVATE ${TMP_SOURCE_DIR})
    #    target_compile_definitions(${Name}_dev_mpi PRIVATE "-DOPS_MPI")

    #    add_executable(${Name}_mpi ${OPS} ${OTHERS}
    #                    "${TMP_SOURCE_DIR}/mpi_openmp/mpi_openmp_kernels.cpp")
    #    target_include_directories(${Name}_mpi PRIVATE ${TMP_SOURCE_DIR})
    #    target_compile_definitions(${Name}_mpi PRIVATE "-DOPS_MPI")

    #    add_executable(${Name}_mpi_openmp ${OPS} ${OTHERS}
    #                    "${TMP_SOURCE_DIR}/mpi_openmp/mpi_openmp_kernels.cpp")
    #    target_include_directories(${Name}_mpi_openmp PRIVATE ${TMP_SOURCE_DIR})
    #    target_compile_definitions(${Name}_mpi_openmp PRIVATE "-DOPS_MPI")

    #    add_executable(${Name}_mpi_tiled ${OPS} ${OTHERS}
    #                    "${TMP_SOURCE_DIR}/mpi_openmp/mpi_openmp_kernels.cpp")
    #    target_include_directories(${Name}_mpi_tiled PRIVATE ${TMP_SOURCE_DIR})
    #    target_compile_definitions(${Name}_mpi_tiled PRIVATE "-DOPS_MPI -DOPS_LAZY")

    #    if(HDF5_MPI)
    #        target_link_libraries(${Name}_dev_mpi PRIVATE ops_hdf5_mpi hdf5::hdf5
    #                                            hdf5::hdf5_hl MPI::MPI_CXX)
    #        target_link_libraries(${Name}_mpi PRIVATE ops_hdf5_mpi hdf5::hdf5
    #                                        hdf5::hdf5_hl MPI::MPI_CXX)
    #        target_link_libraries(${Name}_mpi_openmp PRIVATE ops_hdf5_mpi hdf5::hdf5
    #                                        hdf5::hdf5_hl MPI::MPI_CXX)
    #        target_link_libraries(${Name}_mpi_tiled PRIVATE ops_hdf5_mpi hdf5::hdf5
    #                                        hdf5::hdf5_hl MPI::MPI_CXX)
    #    endif()

    #    if(TRID)
    #        target_link_libraries(${Name}_dev_mpi PRIVATE ops_trid_mpi -L${LIBTRID_PATH}/lib -ltridcpu_mpi
    #                                MPI::MPI_CXX)
    #        target_link_libraries(${Name}_mpi PRIVATE ops_trid_mpi -L${LIBTRID_PATH}/lib -ltridcpu_mpi
    #                                MPI::MPI_CXX)
    #        target_link_libraries(${Name}_mpi_openmp PRIVATE ops_trid_mpi -L${LIBTRID_PATH}/lib -ltridcpu_mpi
    #                                MPI::MPI_CXX)
    #        target_link_libraries(${Name}_mpi_tiled PRIVATE ops_trid_mpi -L${LIBTRID_PATH}/lib -ltridcpu_mpi
    #                                MPI::MPI_CXX)
    #    endif()

    #    target_link_libraries(${Name}_dev_mpi PRIVATE ops_mpi MPI::MPI_CXX
    #                                      OpenMP::OpenMP_CXX)
    #    target_link_libraries(${Name}_mpi PRIVATE ops_mpi MPI::MPI_CXX
    #                                      OpenMP::OpenMP_CXX)
    #    target_link_libraries(${Name}_mpi_openmp PRIVATE ops_mpi MPI::MPI_CXX
    #                                      OpenMP::OpenMP_CXX)
    #    target_link_libraries(${Name}_mpi_tiled PRIVATE ops_mpi MPI::MPI_CXX
    #                                      OpenMP::OpenMP_CXX)

    #    if((OPS_TEST) AND (${GenerateTest} STREQUAL "YES"))
    #        add_cmake_test(${CMAKE_CURRENT_BINARY_DIR}/${Name}_dev_mpi ${CMAKE_CURRENT_SOURCE_DIR}/cmake_test.sh dev_mpi)
    #        add_cmake_test(${CMAKE_CURRENT_BINARY_DIR}/${Name}_mpi ${CMAKE_CURRENT_SOURCE_DIR}/cmake_test.sh mpi)
    #        add_cmake_test(${CMAKE_CURRENT_BINARY_DIR}/${Name}_mpi_openmp ${CMAKE_CURRENT_SOURCE_DIR}/cmake_test.sh mpi_openmp)
    #        add_cmake_test(${CMAKE_CURRENT_BINARY_DIR}/${Name}_mpi_tiled ${CMAKE_CURRENT_SOURCE_DIR}/cmake_test.sh mpi_tiled)
    #    endif()

    #    install(TARGETS ${Name}_dev_mpi DESTINATION ${APP_INSTALL_DIR}/${Name})
    #    install(TARGETS ${Name}_mpi DESTINATION ${APP_INSTALL_DIR}/${Name})
    #    install(TARGETS ${Name}_mpi_openmp DESTINATION ${APP_INSTALL_DIR}/${Name})
    #    install(TARGETS ${Name}_mpi_tiled DESTINATION ${APP_INSTALL_DIR}/${Name})

    #    if(CUDA_MPI)
    #        add_executable(${Name}_mpi_cuda ${OPS} ${OTHERS}
    #                        "${TMP_SOURCE_DIR}/cuda/cuda_kernels.cu")
    #        target_include_directories(${Name}_mpi_cuda PRIVATE ${TMP_SOURCE_DIR})
    #        target_compile_definitions(${Name}_mpi_cuda PRIVATE "-DOPS_MPI -DMPICH_IGNORE_CXX_SEEK")
    #        target_compile_options(${Name}_mpi_cuda
    #                     PRIVATE $<$<COMPILE_LANGUAGE:CUDA>: --fmad=false >)
    #        foreach(include_dir IN LISTS MPI_INC_LIST)
    #            string(FIND ${include_dir} "include" include_index)
    #            if(NOT include_index EQUAL -1)
    #                target_compile_options(${Name}_mpi_cuda PRIVATE ${include_dir})
    #            endif()
    #        endforeach()

    #        add_executable(${Name}_mpi_cuda_tiled ${OPS} ${OTHERS}
    #                        "${TMP_SOURCE_DIR}/cuda/cuda_kernels.cu")
    #        target_include_directories(${Name}_mpi_cuda_tiled PRIVATE ${TMP_SOURCE_DIR})
    #        target_compile_definitions(${Name}_mpi_cuda_tiled PRIVATE "-DOPS_MPI -DMPICH_IGNORE_CXX_SEEK -DOPS_LAZY")
    #        target_compile_options(${Name}_mpi_cuda_tiled
    #                     PRIVATE $<$<COMPILE_LANGUAGE:CUDA>: --fmad=false >)
    #        foreach(include_dir IN LISTS MPI_INC_LIST)
    #            string(FIND ${include_dir} "include" include_index)
    #            if(NOT include_index EQUAL -1)
    #                target_compile_options(${Name}_mpi_cuda_tiled PRIVATE ${include_dir})
    #            endif()
    #        endforeach()

    #        if(HDF5_MPI)
    #            target_link_libraries(${Name}_mpi_cuda PRIVATE ops_hdf5_mpi hdf5::hdf5 hdf5::hdf5_hl
    #                                    MPI::MPI_CXX)
    #            target_link_libraries(${Name}_mpi_cuda_tiled PRIVATE ops_hdf5_mpi hdf5::hdf5 hdf5::hdf5_hl
    #                                    MPI::MPI_CXX)
    #        endif()

    #        if(TRID)
    #            target_link_libraries(${Name}_mpi_cuda PRIVATE ops_trid_mpi_cuda -L${LIBTRID_PATH}/lib -ltridcuda_mpi
    #                                    MPI::MPI_CXX)
    #            target_link_libraries(${Name}_mpi_cuda_tiled PRIVATE ops_trid_mpi_cuda -L${LIBTRID_PATH}/lib -ltridcuda_mpi
    #                                    MPI::MPI_CXX)
    #            if(NCCL_FOUND)
    #                target_link_libraries(${Name}_mpi_cuda PRIVATE ${NCCL_LIBRARY})
    #                target_link_libraries(${Name}_mpi_cuda_tiled PRIVATE ${NCCL_LIBRARY})
    #            endif()
    #        endif()

    #        target_link_libraries(${Name}_mpi_cuda PRIVATE ops_mpi_cuda CUDA::cudart_static -lcurand MPI::MPI_CXX
    #                                OpenMP::OpenMP_CXX)
    #        target_link_libraries(${Name}_mpi_cuda_tiled PRIVATE ops_mpi_cuda CUDA::cudart_static -lcurand MPI::MPI_CXX
    #                                OpenMP::OpenMP_CXX)

    #        install(TARGETS ${Name}_mpi_cuda DESTINATION ${APP_INSTALL_DIR}/${Name})
    #        install(TARGETS ${Name}_mpi_cuda_tiled DESTINATION ${APP_INSTALL_DIR}/${Name})

    #        if((OPS_TEST)
    #            AND (GPU_NUMBER GREATER_EQUAL 1)
    #            AND (${GenerateTest} STREQUAL "YES"))
    #            add_cmake_test(${CMAKE_CURRENT_BINARY_DIR}/${Name}_mpi_cuda ${CMAKE_CURRENT_SOURCE_DIR}/cmake_test.sh "mpi_cuda ${GPU_NUMBER}")
    #            add_cmake_test(${CMAKE_CURRENT_BINARY_DIR}/${Name}_mpi_cuda_tiled ${CMAKE_CURRENT_SOURCE_DIR}/cmake_test.sh "mpi_cuda_tiled ${GPU_NUMBER}")
    #        endif()
    #    endif()

    #    if(OMPOFFLOAD_MPI)
    #        add_executable(${Name}_mpi_ompoffload ${OPS} ${OTHERS}
    #                        "${TMP_SOURCE_DIR}/openmp_offload/openmp_offload_kernels.cpp")
    #        target_include_directories(${Name}_mpi_ompoffload PRIVATE ${TMP_SOURCE_DIR})
    #        target_compile_definitions(${Name}_mpi_ompoffload PRIVATE "-DOPS_MPI -DMPICH_IGNORE_CXX_SEEK")
    #        target_compile_options(${Name}_mpi_ompoffload PRIVATE ${OMPOFFLOAD_FLAGS})
    #        foreach(include_dir IN LISTS MPI_INC_LIST)
    #            string(FIND ${include_dir} "include" include_index)
    #            if(NOT include_index EQUAL -1)
    #                target_compile_options(${Name}_mpi_ompoffload PRIVATE ${include_dir})
    #            endif()
    #        endforeach()

    #        add_executable(${Name}_mpi_ompoffload_tiled ${OPS} ${OTHERS}
    #                        "${TMP_SOURCE_DIR}/openmp_offload/openmp_offload_kernels.cpp")
    #        target_include_directories(${Name}_mpi_ompoffload_tiled PRIVATE ${TMP_SOURCE_DIR})
    #        target_compile_definitions(${Name}_mpi_ompoffload_tiled PRIVATE "-DOPS_MPI -DMPICH_IGNORE_CXX_SEEK -DOPS_LAZY")
    #        target_compile_options(${Name}_mpi_ompoffload_tiled PRIVATE ${OMPOFFLOAD_FLAGS})
    #        foreach(include_dir IN LISTS MPI_INC_LIST)
    #            string(FIND ${include_dir} "include" include_index)
    #            if(NOT include_index EQUAL -1)
    #                target_compile_options(${Name}_mpi_ompoffload_tiled PRIVATE ${include_dir})
    #            endif()
    #        endforeach()

    #        if(HDF5_MPI)
    #            target_link_libraries(${Name}_mpi_ompoffload PRIVATE ops_hdf5_mpi hdf5::hdf5 hdf5::hdf5_hl
    #                                    MPI::MPI_CXX)
    #            target_link_libraries(${Name}_mpi_ompoffload_tiled PRIVATE ops_hdf5_mpi hdf5::hdf5 hdf5::hdf5_hl
    #                                    MPI::MPI_CXX)
    #        endif()

    #        target_link_libraries(${Name}_mpi_ompoffload PRIVATE ops_mpi_ompoffload MPI::MPI_CXX
    #                                OpenMP::OpenMP_CXX)
    #        target_link_libraries(${Name}_mpi_ompoffload_tiled PRIVATE ops_mpi_ompoffload MPI::MPI_CXX
    #                                OpenMP::OpenMP_CXX)

    #        target_link_options(${Name}_mpi_ompoffload PRIVATE ${OMPOFFLOAD_FLAGS})
    #        target_link_options(${Name}_mpi_ompoffload_tiled PRIVATE ${OMPOFFLOAD_FLAGS})

    #        install(TARGETS ${Name}_mpi_ompoffload DESTINATION ${APP_INSTALL_DIR}/${Name})
    #        install(TARGETS ${Name}_mpi_ompoffload_tiled DESTINATION ${APP_INSTALL_DIR}/${Name})

    #        if((OPS_TEST)
    #            AND (GPU_NUMBER GREATER_EQUAL 1)
    #            AND (${GenerateTest} STREQUAL "YES"))
    #            add_cmake_test(${CMAKE_CURRENT_BINARY_DIR}/${Name}_mpi_ompoffload ${CMAKE_CURRENT_SOURCE_DIR}/cmake_test.sh "mpi_ompoffload ${GPU_NUMBER}")
    #            add_cmake_test(${CMAKE_CURRENT_BINARY_DIR}/${Name}_mpi_ompoffload_tiled ${CMAKE_CURRENT_SOURCE_DIR}/cmake_test.sh "mpi_ompoffload_tiled ${GPU_NUMBER}")
    #        endif()
    #    endif()

    #endif()

endmacro()
