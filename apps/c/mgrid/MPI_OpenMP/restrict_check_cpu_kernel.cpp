//
// auto-generated by ops.py
//
#define OPS_ACC0(x,y) (n_x*1 + x + (n_y*1+(y))*xdim0_restrict_check)

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_restrict_check(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3) {
#else
void ops_par_loop_restrict_check_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[4] = { arg0, arg1, arg2, arg3};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,4,range,7)) return;
  #endif

  if (OPS_diags > 1) {
    ops_timing_realloc(7,"restrict_check");
    OPS_kernels[7].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(args, "restrict_check");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 4,block, range, start, end, arg_idx) < 0) return;
  #endif

  #ifdef OPS_MPI
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_restrict_check = args[0].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  const double * __restrict__ val = (double *)(args[0].data + base0);


  #ifdef OPS_MPI
  int * __restrict__ p_a2 = (int *)(((ops_reduction)args[2].data)->data + ((ops_reduction)args[2].data)->size * block->index);
  #else //OPS_MPI
  int * __restrict__ p_a2 = (int *)((ops_reduction)args[2].data)->data;
  #endif //OPS_MPI


  const int * __restrict__ sizex = (int *)args[3].data;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 4);
  ops_halo_exchanges(args,4,range);
  ops_H_D_exchanges_host(args, 4);
  #endif

  if (OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    OPS_kernels[7].mpi_time += __t1-__t2;
  }

  int p_a2_0 = p_a2[0];
  #pragma omp parallel for reduction(max:p_a2_0)
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd reduction(max:p_a2_0) aligned(val)
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      int err[1];
      err[0] = p_a2[0];
      
  if (val[OPS_ACC0(0,0)] != idx[0]*4 + idx[1]*4**sizex) {
    printf("ERR (%d, %d): value %g expected %d\n", idx[0], idx[1], val[OPS_ACC0(0,0)], idx[0]*4 + idx[1]*4**sizex);
    *err = 1;
  } else
    *err = 0;

      p_a2_0 = MAX(p_a2_0,err[0]);
    }
  }
  p_a2[0] = p_a2_0;
  if (OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    OPS_kernels[7].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 4);
  #endif

  if (OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    OPS_kernels[7].mpi_time += __t1-__t2;
    OPS_kernels[7].transfer += ops_compute_transfer(dim, start, end, &arg0);
  }
}
#undef OPS_ACC0


#ifdef OPS_LAZY
void ops_par_loop_restrict_check(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 7;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 7;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 4;
  desc->args = (ops_arg*)malloc(4*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->args[2] = arg2;
  desc->args[3] = arg3;
  char *tmp = (char*)malloc(1*sizeof(int));
  memcpy(tmp, arg3.data,1*sizeof(int));
  desc->args[3].data = tmp;
  desc->function = ops_par_loop_restrict_check_execute;
  if (OPS_diags > 1) {
    ops_timing_realloc(7,"restrict_check");
  }
  ops_enqueue_kernel(desc);
}
#endif
