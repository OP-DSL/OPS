//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_1D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void initialize_kernel(ptr_double x,
  ptr_double rho_new,
  ptr_double rhou_new,
  ptr_double rhoE_new,
  ptr_double  rhoin,
  int *idx, const double xmin, const double dx, const double pl, const double pr, const double rhol, const double ul2, const double ur, const double gam1, const double eps, const double lambda)
{
  OPS_ACCS(x, 0) = xmin + (idx[0]-2) * dx;
  if (OPS_ACCS(x, 0) >= -4.0){
		OPS_ACCS(rho_new, 0) = 1.0 + eps * sin(lambda *OPS_ACCS(x, 0));
		OPS_ACCS(rhou_new, 0) = ur * OPS_ACCS(rho_new, 0);
		OPS_ACCS(rhoE_new, 0) = (pr / gam1) + 0.5 * pow(OPS_ACCS(rhou_new, 0),2)/OPS_ACCS(rho_new, 0);
	}
	else {
		OPS_ACCS(rho_new, 0) = rhol;
		OPS_ACCS(rhou_new, 0) = ul2 * OPS_ACCS(rho_new, 0);
		OPS_ACCS(rhoE_new, 0) = (pl / gam1) + 0.5 * pow(OPS_ACCS(rhou_new, 0),2)/OPS_ACCS(rho_new, 0);
	}

	OPS_ACCS(rhoin, 0) = gam1 * (OPS_ACCS(rhoE_new, 0) - 0.5 * OPS_ACCS(rhou_new, 0) * OPS_ACCS(rhou_new, 0) / OPS_ACCS(rho_new, 0));

}


__kernel void ops_initialize_kernel(
__global double* restrict arg0,
__global double* restrict arg1,
__global double* restrict arg2,
__global double* restrict arg3,
__global double* restrict arg4,
const double xmin,
const double dx,
const double pl,
const double pr,
const double rhol,
const double ul2,
const double ur,
const double gam1,
const double eps,
const double lambda,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
int arg_idx0,
const int size0 ){


  int idx_x = get_global_id(0);

  int arg_idx[1];
  arg_idx[0] = arg_idx0+idx_x;
  if (idx_x < size0) {
    ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1] };
    ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1] };
    ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1] };
    ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1] };
    ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1] };
    initialize_kernel(ptr0,
                      ptr1,
                      ptr2,
                      ptr3,
                      ptr4,
                      arg_idx,
                      xmin,
                      dx,
                      pl,
                      pr,
                      rhol,
                      ul2,
                      ur,
                      gam1,
                      eps,
                      lambda);
  }

}
