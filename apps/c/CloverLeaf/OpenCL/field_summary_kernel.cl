//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void field_summary_kernel(const ptr_double volume,
  const ptr_double density0,
  const ptr_double energy0,
  const ptr_double pressure,
  const ptr_double xvel0,
  const ptr_double yvel0,
  double *vol,
  double *mass,
  double *ie,
  double *ke,
  double *press) {

  double vsqrd, cell_vol, cell_mass;



  vsqrd = 0.0;
  vsqrd = vsqrd + 0.25 * ( OPS_ACCS(xvel0, 0,0) * OPS_ACCS(xvel0, 0,0) + OPS_ACCS(yvel0, 0,0) * OPS_ACCS(yvel0, 0,0));
  vsqrd = vsqrd + 0.25 * ( OPS_ACCS(xvel0, 1,0) * OPS_ACCS(xvel0, 1,0) + OPS_ACCS(yvel0, 1,0) * OPS_ACCS(yvel0, 1,0));
  vsqrd = vsqrd + 0.25 * ( OPS_ACCS(xvel0, 0,1) * OPS_ACCS(xvel0, 0,1) + OPS_ACCS(yvel0, 0,1) * OPS_ACCS(yvel0, 0,1));
  vsqrd = vsqrd + 0.25 * ( OPS_ACCS(xvel0, 1,1) * OPS_ACCS(xvel0, 1,1) + OPS_ACCS(yvel0, 1,1) * OPS_ACCS(yvel0, 1,1));

  cell_vol = OPS_ACCS(volume, 0,0);
  cell_mass = cell_vol * OPS_ACCS(density0, 0,0);
  *vol = *vol + cell_vol;
  *mass = *mass + cell_mass;
  *ie = *ie + cell_mass * OPS_ACCS(energy0, 0,0);
  *ke = *ke + cell_mass * 0.5 * vsqrd;
  *press = *press + cell_vol * OPS_ACCS(pressure, 0,0);

}


__kernel void ops_field_summary_kernel(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global const double* restrict arg3,
__global const double* restrict arg4,
__global const double* restrict arg5,
__global double* restrict arg6,
__local double* scratch6,
int r_bytes6,
__global double* restrict arg7,
__local double* scratch7,
int r_bytes7,
__global double* restrict arg8,
__local double* scratch8,
int r_bytes8,
__global double* restrict arg9,
__local double* scratch9,
int r_bytes9,
__global double* restrict arg10,
__local double* scratch10,
int r_bytes10,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int size0,
const int size1 ){

  arg6 += r_bytes6;
  double arg6_l[1];
  arg7 += r_bytes7;
  double arg7_l[1];
  arg8 += r_bytes8;
  double arg8_l[1];
  arg9 += r_bytes9;
  double arg9_l[1];
  arg10 += r_bytes10;
  double arg10_l[1];
  for (int d=0; d<1; d++) arg6_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg7_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg8_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg9_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg10_l[d] = ZERO_double;

  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_field_summary_kernel], xdim0_field_summary_kernel};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_field_summary_kernel], xdim1_field_summary_kernel};
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_field_summary_kernel], xdim2_field_summary_kernel};
    const ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_field_summary_kernel], xdim3_field_summary_kernel};
    const ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_field_summary_kernel], xdim4_field_summary_kernel};
    const ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_field_summary_kernel], xdim5_field_summary_kernel};
    field_summary_kernel(ptr0,
                         ptr1,
                         ptr2,
                         ptr3,
                         ptr4,
                         ptr5,
                         arg6_l,
                         arg7_l,
                         arg8_l,
                         arg9_l,
                         arg10_l);
  }
  int group_index = get_group_id(0) + get_group_id(1)*get_num_groups(0)+ get_group_id(2)*get_num_groups(0)*get_num_groups(1);
  for (int d=0; d<1; d++)
    reduce_double(arg6_l[d], scratch6, &arg6[group_index*1+d], OPS_INC);
  for (int d=0; d<1; d++)
    reduce_double(arg7_l[d], scratch7, &arg7[group_index*1+d], OPS_INC);
  for (int d=0; d<1; d++)
    reduce_double(arg8_l[d], scratch8, &arg8[group_index*1+d], OPS_INC);
  for (int d=0; d<1; d++)
    reduce_double(arg9_l[d], scratch9, &arg9[group_index*1+d], OPS_INC);
  for (int d=0; d<1; d++)
    reduce_double(arg10_l[d], scratch10, &arg10[group_index*1+d], OPS_INC);

}
