//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

inline void advec_mom_kernel_mass_flux_x(ptr_double node_flux,
  const ptr_double mass_flux_x) {


  OPS_ACCS(node_flux, 0,0) = 0.25 * ( OPS_ACCS(mass_flux_x, 0,-1) + OPS_ACCS(mass_flux_x, 0,0) +
    OPS_ACCS(mass_flux_x, 1,-1) + OPS_ACCS(mass_flux_x, 1,0) );
}


__kernel void ops_advec_mom_kernel_mass_flux_x(
__global double* restrict arg0,
__global const double* restrict arg1,
const int base0,
const int base1,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_advec_mom_kernel_mass_flux_x], xdim0_advec_mom_kernel_mass_flux_x};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_advec_mom_kernel_mass_flux_x], xdim1_advec_mom_kernel_mass_flux_x};
    advec_mom_kernel_mass_flux_x(ptr0,
                     ptr1);
  }

}
