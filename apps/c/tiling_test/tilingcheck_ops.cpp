//
// auto-generated by ops.py
//
void ops_init_backend();
#include <stdlib.h>
#include <stdio.h>


#define OPS_1D
#include  "ops_lib_core.h"

//
// ops_par_loop declarations
//

void ops_par_loop_eqG1(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_eqD(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_eqE1(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_eqK(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg );



#include "user_kernels.h"

int main(int argc, const char** argv)
{


    ops_init(argc, argv, 6);
  ops_init_backend();


    int nxglbl = 64;
    int nhalox = 5;

    double *temp = NULL;
    int *temp_int = NULL;


    ops_block block = ops_decl_block(1, "my_grid");

    int base[] = {0};
    int size[1], d_m[1], d_p[1];


    size[0] = {nxglbl};    d_m[0] = {0};    d_p[0] = {0};

    ops_dat store1 = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "store1");
    ops_dat store2 = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "store2");
    ops_dat store3 = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "store3");
    ops_dat store4 = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "store4");
    ops_dat store5 = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "store5");
    ops_dat store6 = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "store6");
    ops_dat divm = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "divm");

    ops_dat ucor = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "ucor");
    ops_dat vcor = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "vcor");
    ops_dat wcor = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "wcor");

    ops_dat wd1x = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "wd1x");
    ops_dat pd1x = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "pd1x");
    ops_dat td1x = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "td1x");

    ops_dat wd2x = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "wd2x");
    ops_dat pd2x = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "pd2x");
    ops_dat td2x = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "td2x");

    ops_dat ufxl = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "ufxl");
    ops_dat vfxl = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "vfxl");
    ops_dat wfxl = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "wfxl");

    ops_dat drun = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "drun");
    ops_dat urun = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "urun");
    ops_dat vrun = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "vrun");
    ops_dat wrun = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "wrun");
    ops_dat erun = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "erun");

    ops_dat derr = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "derr");
    ops_dat uerr = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "uerr");
    ops_dat verr = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "verr");
    ops_dat werr = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "werr");
    ops_dat eerr = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "eerr");


    size[0] = {nxglbl};    d_m[0] = {0};    d_p[0] = {0};

    ops_dat yrun[2];
    yrun[0] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "yrun1");
    yrun[1] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "yrun2");

    ops_dat yerr[2];
    yerr[0] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "yerr1");
    yerr[1] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "yerr2");

    ops_dat rrte[2];
    rrte[0] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "rrte1");
    rrte[1] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "rrte2");

    ops_dat rate[2];
    rate[0] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "rate1");
    rate[1] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "rate2");



    size[0] = {nxglbl};    d_m[0] = {-nhalox};    d_p[0] = {nhalox};

    ops_dat itndex[2];
    itndex[0] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp_int, "int", "itndex1");
    itndex[1] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp_int, "int", "itndex2");

    ops_dat yrhs[2];
    yrhs[0] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "yrhs1");
    yrhs[1] = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "yrhs2");

    ops_dat drhs = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "drhs");
    ops_dat erhs = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "erhs");
    ops_dat urhs = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "urhs");
    ops_dat vrhs = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "vrhs");
    ops_dat wrhs = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "wrhs");


    ops_dat utmp = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "utmp");
    ops_dat vtmp = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "vtmp");
    ops_dat wtmp = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "wtmp");
    ops_dat prun = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "prun");
    ops_dat trun = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "trun");
    ops_dat transp = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "transp");
    ops_dat store7 = ops_decl_dat(block, 1, size, base, d_m, d_p, temp, "double", "store7");


    int s1d_0[] = {0};
    ops_stencil S1D_0 = ops_decl_stencil(1,1,s1d_0,"0");

    int s1d_11pt[] = {-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5};
    ops_stencil S1D_11pt = ops_decl_stencil(1,11,s1d_11pt,"11pt");


    ops_partition("");


    int iter_range[2];


    for(int ispec = 0; ispec < 2; ispec++) {

        iter_range[0] = -nhalox;   iter_range[1] = nxglbl+nhalox;
        ops_par_loop_eqG1("eq_G rhscal 845", block, 1, iter_range,
                     ops_arg_dat(store7, 1, S1D_0, "double", OPS_WRITE),
                     ops_arg_dat(yrhs[ispec], 1, S1D_0, "double", OPS_READ),
                     ops_arg_dat(urhs, 1, S1D_0, "double", OPS_READ));

        iter_range[0] = 0;   iter_range[1] = nxglbl;
        ops_par_loop_eqD("eq_D rhscal dfbydx 850", block, 1, iter_range,
                     ops_arg_dat(store7, 1, S1D_11pt, "double", OPS_READ),
                     ops_arg_dat(store1, 1, S1D_0, "double", OPS_WRITE));


        iter_range[0] = 0;   iter_range[1] = nxglbl;
        ops_par_loop_eqE1("eq_E1 rhscal 1487", block, 1, iter_range,
                     ops_arg_dat(rate[ispec], 1, S1D_0, "double", OPS_INC),
                     ops_arg_dat(vtmp, 1, S1D_0, "double", OPS_INC),
                     ops_arg_dat(store1, 1, S1D_0, "double", OPS_READ),
                     ops_arg_dat(store2, 1, S1D_0, "double", OPS_READ),
                     ops_arg_dat(store3, 1, S1D_0, "double", OPS_READ),
                     ops_arg_dat(store4, 1, S1D_0, "double", OPS_READ));

    }








    iter_range[0] = -nhalox;   iter_range[1] = nxglbl+nhalox;
    ops_par_loop_eqK("eq_K rhsvel 63", block, 1, iter_range,
                 ops_arg_dat(vtmp, 1, S1D_0, "double", OPS_WRITE),
                 ops_arg_dat(vrhs, 1, S1D_0, "double", OPS_READ),
                 ops_arg_dat(drhs, 1, S1D_0, "double", OPS_READ));


    iter_range[0] = -nhalox;   iter_range[1] = nxglbl+nhalox;
    ops_par_loop_eqG1("eq_G rhsvel 179", block, 1, iter_range,
                 ops_arg_dat(store7, 1, S1D_0, "double", OPS_WRITE),
                 ops_arg_dat(urhs, 1, S1D_0, "double", OPS_READ),
                 ops_arg_dat(vtmp, 1, S1D_0, "double", OPS_READ));

    iter_range[0] = 0;   iter_range[1] = nxglbl;
    ops_par_loop_eqD("eq_D rhsvel dfbydx 187", block, 1, iter_range,
                 ops_arg_dat(store7, 1, S1D_11pt, "double", OPS_READ),
                 ops_arg_dat(store5, 1, S1D_0, "double", OPS_WRITE));


#ifdef OPS_LAZY
    ops_execute();
#endif

    ops_exit();
    return 0;
}
