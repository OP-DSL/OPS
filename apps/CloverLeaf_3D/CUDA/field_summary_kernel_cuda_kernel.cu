//
// auto-generated by ops.py on 2014-07-15 13:58
//

__constant__ int xdim0_field_summary_kernel;
__constant__ int ydim0_field_summary_kernel;
__constant__ int xdim1_field_summary_kernel;
__constant__ int ydim1_field_summary_kernel;
__constant__ int xdim2_field_summary_kernel;
__constant__ int ydim2_field_summary_kernel;
__constant__ int xdim3_field_summary_kernel;
__constant__ int ydim3_field_summary_kernel;
__constant__ int xdim4_field_summary_kernel;
__constant__ int ydim4_field_summary_kernel;
__constant__ int xdim5_field_summary_kernel;
__constant__ int ydim5_field_summary_kernel;
__constant__ int xdim6_field_summary_kernel;
__constant__ int ydim6_field_summary_kernel;

#define OPS_ACC0(x,y,z) (x+xdim0_field_summary_kernel*(y)+xdim0_field_summary_kernel*ydim0_field_summary_kernel*(z))
#define OPS_ACC1(x,y,z) (x+xdim1_field_summary_kernel*(y)+xdim1_field_summary_kernel*ydim1_field_summary_kernel*(z))
#define OPS_ACC2(x,y,z) (x+xdim2_field_summary_kernel*(y)+xdim2_field_summary_kernel*ydim2_field_summary_kernel*(z))
#define OPS_ACC3(x,y,z) (x+xdim3_field_summary_kernel*(y)+xdim3_field_summary_kernel*ydim3_field_summary_kernel*(z))
#define OPS_ACC4(x,y,z) (x+xdim4_field_summary_kernel*(y)+xdim4_field_summary_kernel*ydim4_field_summary_kernel*(z))
#define OPS_ACC5(x,y,z) (x+xdim5_field_summary_kernel*(y)+xdim5_field_summary_kernel*ydim5_field_summary_kernel*(z))
#define OPS_ACC6(x,y,z) (x+xdim6_field_summary_kernel*(y)+xdim6_field_summary_kernel*ydim6_field_summary_kernel*(z))

//user function
__device__

void field_summary_kernel( const double *volume, const double *density0,
                     const double *energy0, const double *pressure,
                     const double *xvel0,
                     const double *yvel0,
                     const double *zvel0,
                     double *vol,
                     double *mass,
                     double *ie,
                     double *ke,
                     double *press) {

  double vsqrd, cell_vol, cell_mass;

  vsqrd = 0.0;
  for (int iz=0;iz<2;iz++){
    for (int iy=0;iy<2;iy++){
      for (int ix=0;ix<2;ix++){
        vsqrd+=0.125*( xvel0[OPS_ACC4(ix,iy,iz)] * xvel0[OPS_ACC4(ix,iy,iz)] +
                       yvel0[OPS_ACC5(ix,iy,iz)] * yvel0[OPS_ACC5(ix,iy,iz)] +
                       zvel0[OPS_ACC6(ix,iy,iz)] * zvel0[OPS_ACC6(ix,iy,iz)]);
      }
    }
  }

  cell_vol = volume[OPS_ACC0(0,0,0)];
  cell_mass = cell_vol * density0[OPS_ACC1(0,0,0)];
  *vol = *vol + cell_vol;
  *mass = *mass + cell_mass;
  *ie = *ie + cell_mass * energy0[OPS_ACC2(0,0,0)];
  *ke = *ke + cell_mass * 0.5 * vsqrd;
  *press = *press + cell_vol * pressure[OPS_ACC3(0,0,0)];

}



#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4
#undef OPS_ACC5
#undef OPS_ACC6


__global__ void ops_field_summary_kernel(
const double* __restrict arg0,
const double* __restrict arg1,
const double* __restrict arg2,
const double* __restrict arg3,
const double* __restrict arg4,
const double* __restrict arg5,
const double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
int size0,
int size1,
int size2 ){

  double arg7_l[1];
  double arg8_l[1];
  double arg9_l[1];
  double arg10_l[1];
  double arg11_l[1];
  for (int d=0; d<1; d++) arg7_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg8_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg9_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg10_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg11_l[d] = ZERO_double;

  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1 + idx_y * 1 * xdim0_field_summary_kernel + idx_z * 1 * xdim0_field_summary_kernel * ydim0_field_summary_kernel;
  arg1 += idx_x * 1 + idx_y * 1 * xdim1_field_summary_kernel + idx_z * 1 * xdim1_field_summary_kernel * ydim1_field_summary_kernel;
  arg2 += idx_x * 1 + idx_y * 1 * xdim2_field_summary_kernel + idx_z * 1 * xdim2_field_summary_kernel * ydim2_field_summary_kernel;
  arg3 += idx_x * 1 + idx_y * 1 * xdim3_field_summary_kernel + idx_z * 1 * xdim3_field_summary_kernel * ydim3_field_summary_kernel;
  arg4 += idx_x * 1 + idx_y * 1 * xdim4_field_summary_kernel + idx_z * 1 * xdim4_field_summary_kernel * ydim4_field_summary_kernel;
  arg5 += idx_x * 1 + idx_y * 1 * xdim5_field_summary_kernel + idx_z * 1 * xdim5_field_summary_kernel * ydim5_field_summary_kernel;
  arg6 += idx_x * 1 + idx_y * 1 * xdim6_field_summary_kernel + idx_z * 1 * xdim6_field_summary_kernel * ydim6_field_summary_kernel;

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    field_summary_kernel(arg0, arg1, arg2, arg3,
                   arg4, arg5, arg6, arg7_l, arg8_l,
                   arg9_l, arg10_l, arg11_l);
  }
  for (int d=0; d<1; d++)
    ops_reduction<OPS_INC>(&arg7[d+blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y],arg7_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction<OPS_INC>(&arg8[d+blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y],arg8_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction<OPS_INC>(&arg9[d+blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y],arg9_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction<OPS_INC>(&arg10[d+blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y],arg10_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction<OPS_INC>(&arg11[d+blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y],arg11_l[d]);

}

// host stub function
void ops_par_loop_field_summary_kernel(char const *name, ops_block Block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8,
 ops_arg arg9, ops_arg arg10, ops_arg arg11) {

  ops_arg args[12] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11};

  sub_block_list sb = OPS_sub_block_list[Block->index];
  //compute localy allocated range for the sub-block
  int start_add[3];
  int end_add[3];
  for ( int n=0; n<3; n++ ){
    start_add[n] = sb->istart[n];end_add[n] = sb->iend[n]+1;
    if (start_add[n] >= range[2*n]) {
      start_add[n] = 0;
    }
    else {
      start_add[n] = range[2*n] - start_add[n];
    }
    if (end_add[n] >= range[2*n+1]) {
      end_add[n] = range[2*n+1] - sb->istart[n];
    }
    else {
      end_add[n] = sb->sizes[n];
    }
  }


  int x_size = MAX(0,end_add[0]-start_add[0]);
  int y_size = MAX(0,end_add[1]-start_add[1]);
  int z_size = MAX(0,end_add[2]-start_add[2]);

  int xdim0 = args[0].dat->block_size[0]*args[0].dat->dim;
  int ydim0 = args[0].dat->block_size[1];
  int xdim1 = args[1].dat->block_size[0]*args[1].dat->dim;
  int ydim1 = args[1].dat->block_size[1];
  int xdim2 = args[2].dat->block_size[0]*args[2].dat->dim;
  int ydim2 = args[2].dat->block_size[1];
  int xdim3 = args[3].dat->block_size[0]*args[3].dat->dim;
  int ydim3 = args[3].dat->block_size[1];
  int xdim4 = args[4].dat->block_size[0]*args[4].dat->dim;
  int ydim4 = args[4].dat->block_size[1];
  int xdim5 = args[5].dat->block_size[0]*args[5].dat->dim;
  int ydim5 = args[5].dat->block_size[1];
  int xdim6 = args[6].dat->block_size[0]*args[6].dat->dim;
  int ydim6 = args[6].dat->block_size[1];


  //Timing
  double t1,t2,c1,c2;
  ops_timing_realloc(41,"field_summary_kernel");
  ops_timers_core(&c2,&t2);

  if (OPS_kernels[41].count == 0) {
    cudaMemcpyToSymbol( xdim0_field_summary_kernel, &xdim0, sizeof(int) );
    cudaMemcpyToSymbol( ydim0_field_summary_kernel, &ydim0, sizeof(int) );
    cudaMemcpyToSymbol( xdim1_field_summary_kernel, &xdim1, sizeof(int) );
    cudaMemcpyToSymbol( ydim1_field_summary_kernel, &ydim1, sizeof(int) );
    cudaMemcpyToSymbol( xdim2_field_summary_kernel, &xdim2, sizeof(int) );
    cudaMemcpyToSymbol( ydim2_field_summary_kernel, &ydim2, sizeof(int) );
    cudaMemcpyToSymbol( xdim3_field_summary_kernel, &xdim3, sizeof(int) );
    cudaMemcpyToSymbol( ydim3_field_summary_kernel, &ydim3, sizeof(int) );
    cudaMemcpyToSymbol( xdim4_field_summary_kernel, &xdim4, sizeof(int) );
    cudaMemcpyToSymbol( ydim4_field_summary_kernel, &ydim4, sizeof(int) );
    cudaMemcpyToSymbol( xdim5_field_summary_kernel, &xdim5, sizeof(int) );
    cudaMemcpyToSymbol( ydim5_field_summary_kernel, &ydim5, sizeof(int) );
    cudaMemcpyToSymbol( xdim6_field_summary_kernel, &xdim6, sizeof(int) );
    cudaMemcpyToSymbol( ydim6_field_summary_kernel, &ydim6, sizeof(int) );
  }


  double *arg7h = (double *)arg7.data;
  double *arg8h = (double *)arg8.data;
  double *arg9h = (double *)arg9.data;
  double *arg10h = (double *)arg10.data;
  double *arg11h = (double *)arg11.data;

  dim3 grid( (x_size-1)/OPS_block_size_x+ 1, (y_size-1)/OPS_block_size_y + 1, z_size);
  dim3 block(OPS_block_size_x,OPS_block_size_y,1);

  int nblocks = ((x_size-1)/OPS_block_size_x+ 1)*((y_size-1)/OPS_block_size_y + 1)*z_size;
  int maxblocks = nblocks;
  int reduct_bytes = 0;
  int reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);

  reallocReductArrays(reduct_bytes);
  reduct_bytes = 0;

  arg7.data = OPS_reduct_h + reduct_bytes;
  arg7.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg7.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg8.data = OPS_reduct_h + reduct_bytes;
  arg8.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg8.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg9.data = OPS_reduct_h + reduct_bytes;
  arg9.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg9.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg10.data = OPS_reduct_h + reduct_bytes;
  arg10.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg10.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg11.data = OPS_reduct_h + reduct_bytes;
  arg11.data_d = OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg11.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));


  mvReductArraysToDevice(reduct_bytes);
  int dat0 = args[0].dat->size;
  int dat1 = args[1].dat->size;
  int dat2 = args[2].dat->size;
  int dat3 = args[3].dat->size;
  int dat4 = args[4].dat->size;
  int dat5 = args[5].dat->size;
  int dat6 = args[6].dat->size;

  char *p_a[12];

  //set up initial pointers
  int base0 = dat0 * 1 * 
  (start_add[0] * args[0].stencil->stride[0] - args[0].dat->offset[0]);
  base0 = base0+ dat0 *
    args[0].dat->block_size[0] *
    (start_add[1] * args[0].stencil->stride[1] - args[0].dat->offset[1]);
  base0 = base0+ dat0 *
    args[0].dat->block_size[0] *
    args[0].dat->block_size[1] *
    (start_add[2] * args[0].stencil->stride[2] - args[0].dat->offset[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  int base1 = dat1 * 1 * 
  (start_add[0] * args[1].stencil->stride[0] - args[1].dat->offset[0]);
  base1 = base1+ dat1 *
    args[1].dat->block_size[0] *
    (start_add[1] * args[1].stencil->stride[1] - args[1].dat->offset[1]);
  base1 = base1+ dat1 *
    args[1].dat->block_size[0] *
    args[1].dat->block_size[1] *
    (start_add[2] * args[1].stencil->stride[2] - args[1].dat->offset[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  int base2 = dat2 * 1 * 
  (start_add[0] * args[2].stencil->stride[0] - args[2].dat->offset[0]);
  base2 = base2+ dat2 *
    args[2].dat->block_size[0] *
    (start_add[1] * args[2].stencil->stride[1] - args[2].dat->offset[1]);
  base2 = base2+ dat2 *
    args[2].dat->block_size[0] *
    args[2].dat->block_size[1] *
    (start_add[2] * args[2].stencil->stride[2] - args[2].dat->offset[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  int base3 = dat3 * 1 * 
  (start_add[0] * args[3].stencil->stride[0] - args[3].dat->offset[0]);
  base3 = base3+ dat3 *
    args[3].dat->block_size[0] *
    (start_add[1] * args[3].stencil->stride[1] - args[3].dat->offset[1]);
  base3 = base3+ dat3 *
    args[3].dat->block_size[0] *
    args[3].dat->block_size[1] *
    (start_add[2] * args[3].stencil->stride[2] - args[3].dat->offset[2]);
  p_a[3] = (char *)args[3].data_d + base3;

  int base4 = dat4 * 1 * 
  (start_add[0] * args[4].stencil->stride[0] - args[4].dat->offset[0]);
  base4 = base4+ dat4 *
    args[4].dat->block_size[0] *
    (start_add[1] * args[4].stencil->stride[1] - args[4].dat->offset[1]);
  base4 = base4+ dat4 *
    args[4].dat->block_size[0] *
    args[4].dat->block_size[1] *
    (start_add[2] * args[4].stencil->stride[2] - args[4].dat->offset[2]);
  p_a[4] = (char *)args[4].data_d + base4;

  int base5 = dat5 * 1 * 
  (start_add[0] * args[5].stencil->stride[0] - args[5].dat->offset[0]);
  base5 = base5+ dat5 *
    args[5].dat->block_size[0] *
    (start_add[1] * args[5].stencil->stride[1] - args[5].dat->offset[1]);
  base5 = base5+ dat5 *
    args[5].dat->block_size[0] *
    args[5].dat->block_size[1] *
    (start_add[2] * args[5].stencil->stride[2] - args[5].dat->offset[2]);
  p_a[5] = (char *)args[5].data_d + base5;

  int base6 = dat6 * 1 * 
  (start_add[0] * args[6].stencil->stride[0] - args[6].dat->offset[0]);
  base6 = base6+ dat6 *
    args[6].dat->block_size[0] *
    (start_add[1] * args[6].stencil->stride[1] - args[6].dat->offset[1]);
  base6 = base6+ dat6 *
    args[6].dat->block_size[0] *
    args[6].dat->block_size[1] *
    (start_add[2] * args[6].stencil->stride[2] - args[6].dat->offset[2]);
  p_a[6] = (char *)args[6].data_d + base6;


  ops_H_D_exchanges_cuda(args, 12);
  ops_halo_exchanges(args,12,range);

  ops_timers_core(&c1,&t1);
  OPS_kernels[41].mpi_time += t1-t2;

  int nshared = 0;
  int nthread = OPS_block_size_x*OPS_block_size_y;

  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);

  nshared = MAX(nshared*nthread,reduct_size*nthread);

  //call kernel wrapper function, passing in pointers to data
  ops_field_summary_kernel<<<grid, block, nshared >>> (  (double *)p_a[0], (double *)p_a[1],
           (double *)p_a[2], (double *)p_a[3],
           (double *)p_a[4], (double *)p_a[5],
           (double *)p_a[6], (double *)arg7.data_d,
           (double *)arg8.data_d, (double *)arg9.data_d,
           (double *)arg10.data_d, (double *)arg11.data_d,x_size, y_size, z_size);

  mvReductArraysToHost(reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg7h[d] = arg7h[d] + ((double *)arg7.data)[d+b*1];
    }
  }
  arg7.data = (char *)arg7h;

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg8h[d] = arg8h[d] + ((double *)arg8.data)[d+b*1];
    }
  }
  arg8.data = (char *)arg8h;

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg9h[d] = arg9h[d] + ((double *)arg9.data)[d+b*1];
    }
  }
  arg9.data = (char *)arg9h;

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg10h[d] = arg10h[d] + ((double *)arg10.data)[d+b*1];
    }
  }
  arg10.data = (char *)arg10h;

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg11h[d] = arg11h[d] + ((double *)arg11.data)[d+b*1];
    }
  }
  arg11.data = (char *)arg11h;

  if (OPS_diags>1) {
    cutilSafeCall(cudaDeviceSynchronize());
  }
  ops_timers_core(&c2,&t2);
  OPS_kernels[41].time += t2-t1;
  ops_mpi_reduce(&arg7,(double *)p_a[7]);
  ops_mpi_reduce(&arg8,(double *)p_a[8]);
  ops_mpi_reduce(&arg9,(double *)p_a[9]);
  ops_mpi_reduce(&arg10,(double *)p_a[10]);
  ops_mpi_reduce(&arg11,(double *)p_a[11]);
  ops_timers_core(&c1,&t1);
  OPS_kernels[41].mpi_time += t1-t2;
  ops_set_dirtybit_cuda(args, 12);

  //Update kernel record
  OPS_kernels[41].count++;
  OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg0);
  OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg1);
  OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg2);
  OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg3);
  OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg4);
  OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg5);
  OPS_kernels[41].transfer += ops_compute_transfer(dim, range, &arg6);
}
