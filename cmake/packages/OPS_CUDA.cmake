find_package(CUDAToolkit QUIET)

if(CUDAToolkit_FOUND)                                                              
  set(CMAKE_CUDA_COMPILER ${CUDAToolkit_NVCC_EXECUTABLE}) 
  enable_language(CUDA)
  enable_language(C)
  if(NOT SET_GPU_ARCH)  
    include(FindCUDA/select_compute_arch)
    CUDA_DETECT_INSTALLED_GPUS(INSTALLED_GPU_CCS_1)
    string(STRIP "${INSTALLED_GPU_CCS_1}" INSTALLED_GPU_CCS_2)
    string(REPLACE " " ";" INSTALLED_GPU_CCS_3 "${INSTALLED_GPU_CCS_2}")
    string(REPLACE "." "" CUDA_ARCH_LIST "${INSTALLED_GPU_CCS_3}")
    set_property(GLOBAL PROPERTY CUDA_ARCHITECTURES "${CUDA_ARCH_LIST}")
    message(STATUS "CUDA_ARCHITECTURES ${CUDA_ARCH_LIST} ${SET_GPU_ARCH}")
    list(GET CUDA_ARCH_LIST 0 SET_CUDA_ARCH)
    list(LENGTH CUDA_ARCH_LIST GPU_NUMBER) 
    message(STATUS "CUDA Architecture from autodetect ${SET_CUDA_ARCH}, N GPUS ${GPU_NUMBER}")	  
    message(STATUS "If different architecture has to be used set -DSET_GPU_ARCH=XXX!")           
  endif()
  set(CMAKE_CUDA_ARCHITECTURES "${SET_CUDA_ARCH}")  
  #set(CMAKE_CUDA_ARCHITECTURES "${SET_GPU_ARCH}"                                                               
  #    CACHE STRING "CUDA architectures")  
  # Set the CUDA Flags compilers
  set(OPS_CUDAFLAGS "-Xcompiler=\"-fPIC\" -g -std=c++11 -gencode arch=compute_${SET_CUDA_ARCH},code=sm_${SET_CUDA_ARCH}") 
  # If CMAKE_CUDA_ARCHITECTURES is correct there is no need to add the flags for the architectures, CMake does it
  #set(OPS_CUDAFLAGS "-Xcompiler=\"-fPIC\" -g -std=c++11") 
  set(OPS_CUDAFLAGS_RELEASE "-O3 --use_fast_math") 
  set(OPS_CUDAFLAGS_DEBUG "-O0") 
  if(IEEE)
    set(OPS_CUDAFLAGS "${OPS_CUDAFLAGS} --fmad=false")
  endif(IEEE)
else()                                                                             
  message(WARNING "CUDA toolkit not found! The CUDA codes won't compile!")      
endif()

