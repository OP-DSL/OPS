{% extends "cpp/loop_host.cpp.j2" %}

{% block prologue %}
{% set num_dims = [1, lh.ndim-1] | max_value %}
{% if lh.ndim > 1 and soa_set %}
{% set num_dims = num_dims + 1 %}
{% endif %}
__constant__ int dims_{{lh.kernel}}[{{lh.args|length}}][{{num_dims}}];
static int dims_{{lh.kernel}}_h[{{lh.args|length}}][{{num_dims}}] = {{'{{'|safe}}0{{'}}'|safe}};
{% endblock %}

{% block kernel_wrapper %}
{% set signature=[""] %}
{% for arg in lh.args %}
    {% if arg is ops_read %}
        {% set pre = "const " %}
    {% else %}
        {% set pre = "" %}
    {% endif %}
    {% if arg is ops_dat %}
        {% set current_arg %}{{pre}}ACC<{{lh.dats[arg.dat_id].typ}}> &{{args_list[arg.id]}}{{", " if not loop.last}}{% endset %}
    {% elif arg is ops_idx %}
        {% set current_arg %}const int *idx{{", " if not loop.last}}{% endset %}
    {% else %}
        {% set current_arg %}{{pre}}{{arg.typ}} *{{args_list[arg.id]}}{{", " if not loop.last}}{% endset %}
    {% endif %}
    {% if signature.append(signature.pop() + current_arg) %}{% endif %}
{% endfor %}

//  =============
//  User function
//  =============
__device__ void {{lh.kernel}}_gpu({{signature[0]}}) {
    {# insert kernel body #}
    {{kernel_body}}
}

{# Generate cuda kernel wrapper function #}
{% set signature = [""] %}
{% set any_prolong = [False] %}
{% set arg_idx_present = [False] %}

{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% set current_arg %}{{lh.dats[arg.dat_id].typ}}* __restrict arg{{arg.id}}, {% endset %}
    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
                {% set current_arg %}const {{arg.typ}} arg{{arg.id}}, {% endset %}
            {% else %}
                {% set current_arg %}const {{arg.typ}}* __restrict arg{{arg.id}}, {% endset %}
            {% endif %}
        {% else %}
            {% set current_arg %}{{arg.typ}}* __restrict arg{{arg.id}}, {% endset %}
        {% endif %}
    {% elif arg is ops_idx %}
        {% if arg_idx_present.append(True + arg_idx_present.pop()) %} {% endif %}
        {% if lh.ndim == 1 %}
            {% set current_arg %}int arg_idx0, {% endset %}
        {% elif lh.ndim == 2 %}
            {% set current_arg %}int arg_idx0, int arg_idx1, {% endset %}
        {% elif lh.ndim == 3 %}
            {% set current_arg %}int arg_idx0, int arg_idx1, int arg_idx2, {% endset %}
        {% endif %}
    {% endif %}

    {% if arg is ops_dat %}
        {% if lh.ndim == 1 %}
            {% set current_arg %}{{current_arg}}int xstride_{{arg.id}}, {% endset %}
        {% elif lh.ndim == 2 %}
            {% set current_arg %}{{current_arg}}int xstride_{{arg.id}}, int ystride_{{arg.id}}, {% endset %}
        {% elif lh.ndim == 3 %}
            {% set current_arg %}{{current_arg}}int xstride_{{arg.id}}, int ystride_{{arg.id}}, int zstride_{{arg.id}}, {% endset %}
        {% endif %}
        {% if arg.restrict or arg.prolong %}
            {% if any_prolong.append(True + any_prolong.pop()) %} {% endif %}
            {% if lh.ndim == 1 %}
                {% set current_arg %}{{current_arg}}int stride_{{arg.id}}0, {% endset %}
            {% elif lh.ndim == 2 %}
                {% set current_arg %}{{current_arg}}int stride_{{arg.id}}0, int stride_{{arg.id}}1, {% endset %}
            {% elif lh.ndim == 3 %}
                {% set current_arg %}{{current_arg}}int stride_{{arg.id}}0, int stride_{{arg.id}}1, int stride_{{arg.id}}2, {% endset %}
            {% endif %}
        {% endif %}
    {% endif %}

    {% if signature.append(signature.pop() + current_arg + "\n") %} {% endif %}
{% endfor %}

{% if any_prolong[0] %}
    {% if lh.ndim == 1 %}
        {% set current_arg %}int global_idx0, {% endset %}
    {% elif lh.ndim == 2 %}
        {% set current_arg %}int global_idx0, int global_idx1, {% endset %}
    {% elif lh.ndim == 3 %}
        {% set current_arg %}int global_idx0, int global_idx1, int global_idx2, {% endset %}
    {% endif %}
{% if signature.append(signature.pop() + current_arg) %} {% endif %}
{% endif %}

{% if lh.ndim == 1 %}
    {% set current_arg %}int size0{% endset %}
{% elif lh.ndim == 2 %}
    {% set current_arg %}int size0, int size1{% endset %}
{% elif lh.ndim == 3 %}
    {% set current_arg %}int size0, int size1, int size2{% endset %}
{% endif %}
{% if signature.append(signature.pop() + current_arg) %} {% endif %}

//  ============================
//  Cuda kernel wrapper function
//  ============================
__global__ void ops_{{lh.kernel}}({{signature[0]}}) {
{# Local variables to hold reductions on GPU #}
{% for arg in lh.args %}
{% if arg is ops_gbl or arg is ops_reduce %}
    {% if not arg is ops_read %}
    {{arg.typ}} arg{{arg.id}}_l[{{arg.dim}}];
    {% endif %}
    {% if arg is ops_inc %}
    for (int d = 0; d < {{arg.dim}}; d++) arg{{arg.id}}_l[d] = ZERO_{{arg.typ}};
    {% elif arg is ops_min %}
    for (int d = 0; d < {{arg.dim}}; d++) arg{{arg.id}}_l[d] = INFINITY_{{arg.typ}};
    {% elif arg is ops_max %}
    for (int d = 0; d < {{arg.dim}}; d++) arg{{arg.id}}_l[d] = -INFINITY_{{arg.typ}};
    {% endif %}
{% endif %}
{% endfor %}

{% if lh.ndim == 3 %}
    int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
    int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
{% elif lh.ndim == 2 %}
    int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
{% endif %}
    int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

{% if arg_idx_present[0] %}
    int arg_idx[{{lh.ndim}}];
    arg_idx[0] = arg_idx0+idx_x;
    {% if lh.ndim == 2 %}
    arg_idx[1] = arg_idx1+idx_y;
    {% elif lh.ndim == 3 %}
    arg_idx[1] = arg_idx1+idx_y;
    arg_idx[2] = arg_idx2+idx_z;
    {% endif %}
{% endif %}

{% for arg in lh.args %}
    {% if arg is ops_dat %}
    {% if arg.restrict %}
        {% set n_x -%}idx_x*stride_{{arg.id}}0{%- endset %}
        {% set n_y -%}idx_y*stride_{{arg.id}}1{%- endset %}
        {% set n_z -%}idx_z*stride_{{arg.id}}2{%- endset %}
    {% elif arg.prolong %}
        {% set n_x -%}(idx_x+global_idx0%stride_{{arg.id}}0)/stride_{{arg.id}}0{%- endset %}
        {% set n_y -%}(idx_y+global_idx1%stride_{{arg.id}}1)/stride_{{arg.id}}1{%- endset %}
        {% set n_z -%}(idx_z+global_idx2%stride_{{arg.id}}2)/stride_{{arg.id}}2{%- endset %}
    {% else %}
        {% set n_x -%}idx_x{%- endset %}
        {% set n_y -%}idx_y{%- endset %}
        {% set n_z -%}idx_z{%- endset %}
    {% endif %}
    {% if lh.ndim == 1 %}
    {% if soa_set %}
    arg{{arg.id}} += {{n_x}} * xstride_{{arg.id}};
    {% else %}
    arg{{arg.id}} += {{n_x}} * xstride_{{arg.id}}*{{arg.dim}};
    {% endif %}
    {% elif lh.ndim == 2 %}
    {% if soa_set %}
    arg{{arg.id}} += {{n_x}} * xstride_{{arg.id}} + {{n_y}} * ystride_{{arg.id}} * dims_{{lh.kernel}}[{{arg.id}}][0];
    {% else %}
    arg{{arg.id}} += {{n_x}} * xstride_{{arg.id}}*{{arg.dim}} + {{n_y}} * ystride_{{arg.id}}*{{arg.dim}} * dims_{{lh.kernel}}[{{arg.id}}][0];
    {% endif %}
    {% elif lh.ndim == 3 %}
    {% if soa_set %}
    arg{{arg.id}} += {{n_x}} * xstride_{{arg.id}} + {{n_y}} * ystride_{{arg.id}} * dims_{{lh.kernel}}[{{arg.id}}][0] + {{n_z}} * zstride_{{arg.id}} * dims_{{lh.kernel}}[{{arg.id}}][0] * dims_{{lh.kernel}}[{{arg.id}}][1];
    {% else %}
    arg{{arg.id}} += {{n_x}} * xstride_{{arg.id}}*{{arg.dim}} + {{n_y}} * ystride_{{arg.id}}*{{arg.dim}} * dims_{{lh.kernel}}[{{arg.id}}][0] + {{n_z}} * zstride_{{arg.id}}*{{arg.dim}} * dims_{{lh.kernel}}[{{arg.id}}][0] * dims_{{lh.kernel}}[{{arg.id}}][1];
    {% endif %}
    {% endif %}
    {% endif %}
{% endfor %}

{% if lh.ndim == 1 %}
    if(idx_x < size0) {
{% elif lh.ndim == 2 %}
    if(idx_x < size0 && idx_y < size1) {
{% elif lh.ndim == 3 %}
    if(idx_x < size0 && idx_y < size1 && idx_z < size2) {
{% endif %}

{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% set signature = [""] %}
        {% if arg.dim > 1 %}
            {% set current_val %}{{arg.dim}}, {% endset %}
            {% if signature.append(signature.pop() + current_val) %} {% endif %}
        {% endif %}
        {% for i in range(lh.ndim-1) %}
            {% set current_val %}dims_{{lh.kernel}}[{{arg.id}}][{{i}}], {% endset %}
            {% if signature.append(signature.pop() + current_val) %} {% endif %}
        {% endfor %}
        {% if arg.dim > 1 %}
            {% if soa_set %}
                {% set current_val %}dims_{{lh.kernel}}[{{arg.id}}][{{lh.ndim-1}}], {% endset %}
            {% else %}
                {% set current_val %}0, {% endset %}
            {% endif %}
            {% if signature.append(signature.pop() + current_val) %} {% endif %}
        {% endif %}
        {% if arg is ops_read %}
        const ACC<{{lh.dats[arg.dat_id].typ}}> argp{{arg.id}}({{signature[0]}}arg{{arg.id}});
        {% else %}
        ACC<{{lh.dats[arg.dat_id].typ}}> argp{{arg.id}}({{signature[0]}}arg{{arg.id}});
        {% endif %}
    {% endif %}
{% endfor %}

{% set signature = [""] %}
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% set current_val %}argp{{arg.id}}{{", " if not loop.last}}{% endset %}
    {% elif arg is ops_idx %}
        {% set current_val %}arg_idx{{", " if not loop.last}}{% endset %}
    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
                {% set current_val %}&arg{{arg.id}}{{", " if not loop.last}}{% endset %}
            {% else %}
                {% set current_val %}arg{{arg.id}}{{", " if not loop.last}}{% endset %}
            {% endif %}
        {% else %}
            {% set current_val %}arg{{arg.id}}_l{{", " if not loop.last}}{% endset %}
        {% endif %}
    {% endif %}
    {% if signature.append(signature.pop() + current_val) %} {% endif %}
{% endfor %}
        {{lh.kernel}}_gpu({{signature[0]}});

    }// End of cuda index in_range check

{% if lh.ndim == 1 or lh.ndim == 2 %}
{% set offset -%}(blockIdx.x + blockIdx.y*gridDim.x)*{%- endset %}
{% elif lh.ndim == 3 %}
{% set offset -%}(blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y)*{%- endset %}
{% endif %}

{% if lh.has_reduction %}
//  ==============================
//  Reduction across thread blocks
//  ==============================
{% endif %}
{% for arg in lh.args %}
    {% if arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_inc %}
    for(int d = 0; d < {{arg.dim}}; d++)
        {% if target.name == "cuda" %}
        ops_reduction_cuda<OPS_INC>(&arg{{arg.id}}[d+{{offset}}{{arg.dim}}],arg{{arg.id}}_l[d]);
        {% elif target.name == "hip" %}
        ops_reduction_hip<OPS_INC>(&arg{{arg.id}}[d+{{offset}}{{arg.dim}}],arg{{arg.id}}_l[d]);
        {% endif %}
        {% elif arg is ops_min %}
    for(int d = 0; d < {{arg.dim}}; d++)
        {% if target.name == "cuda" %}
        ops_reduction_cuda<OPS_MIN>(&arg{{arg.id}}[d+{{offset}}{{arg.dim}}],arg{{arg.id}}_l[d]);
        {% elif target.name == "hip" %}
        ops_reduction_hip<OPS_MIN>(&arg{{arg.id}}[d+{{offset}}{{arg.dim}}],arg{{arg.id}}_l[d]);
        {% endif %}
        {% elif arg is ops_max %}
    for(int d = 0; d < {{arg.dim}}; d++)
        {% if target.name == "cuda" %}
        ops_reduction_cuda<OPS_MAX>(&arg{{arg.id}}[d+{{offset}}{{arg.dim}}],arg{{arg.id}}_l[d]);
        {% elif target.name == "hip" %}
        ops_reduction_hip<OPS_MAX>(&arg{{arg.id}}[d+{{offset}}{{arg.dim}}],arg{{arg.id}}_l[d]);
        {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}

}// End of cuda kernel wrapper function
{% endblock %}

{% block host_prologue_sub_1 %}
    ops_block block = desc->block;
{% endblock %}

{% block host_prologue_sub_3 %}
{% if lh.arg_idx == -1 %}
#ifdef OPS_MPI
{% endif %}
    int arg_idx[{{lh.ndim}}];
{% if lh.arg_idx == -1 %}
#endif
{% endif %}
{% endblock %}

{% block host_prologue %}
{{super()}}

{% if lh.arg_idx != -1 or lh.multiGrid %}
#if defined(OPS_MPI)
#if defined(OPS_LAZY)
    sub_block_list sb = OPS_sub_block_list[block->index];
    {% for n in range(0, lh.ndim) %}
    arg_idx[{{n}}] = sb->decomp_disp[{{n}}]+start_indx[{{n}}];
    {% endfor %}
#endif  // OPS_LAZY
#else   // OPS_MPI
    {% for n in range(0, lh.ndim) %}
    arg_idx[{{n}}] = start_indx[{{n}}];
    {% endfor %}
#endif  // OPS_MPI
{% endif %}

{% if lh.multiGrid %}
    int global_idx[{{lh.ndim}}];
#ifdef OPS_MPI
    {% for n in range(0, lh.ndim) %}
    global_idx[{{n}}] = arg_idx[{{n}}];
    {% endfor %}
#else
    {% for n in range(0, lh.ndim) %}
    global_idx[{{n}}] = start_indx[{{n}}];
    {% endfor %}
#endif
{% endif %}

{% for arg in lh.args %}
{% if arg is ops_dat %}
    int xdim{{arg.id}} = args[{{arg.id}}].dat->size[0];
    {% if lh.ndim > 2 or (lh.ndim == 2 and soa_set) %}
    int ydim{{arg.id}} = args[{{arg.id}}].dat->size[1];
    {% endif %}
    {% if lh.ndim > 3 or (lh.ndim == 3 and soa_set) %}
    int zdim{{arg.id}} = args[{{arg.id}}].dat->size[2];
    {% endif %}
{% endif %}
{% endfor %}

{% set condition = [""] %}
{% for arg in lh.args %}
{% if arg is ops_dat %}
    {% set current_val %}xdim{{arg.id}} != dims_{{lh.kernel}}_h[{{arg.id}}][0] || {% endset %}
    {% if condition.append(condition.pop() + current_val) %} {% endif %}
    {% if lh.ndim > 2 or (lh.ndim == 2 and soa_set) %}
        {% set current_val %}ydim{{arg.id}} != dims_{{lh.kernel}}_h[{{arg.id}}][1] || {% endset %}
        {% if condition.append(condition.pop() + current_val) %} {% endif %}
    {% endif %}
    {% if lh.ndim > 3 or (lh.ndim == 3 and soa_set) %}
        {% set current_val %}zdim{{arg.id}} != dims_{{lh.kernel}}_h[{{arg.id}}][2] || {% endset %}
        {% if condition.append(condition.pop() + current_val) %} {% endif %}
    {% endif %}
{% endif %}
{% endfor %}

    if ({{(condition[0])[:-4]}}) {
    {% for arg in lh.args %}
    {% if arg is ops_dat %}
        dims_{{lh.kernel}}_h[{{arg.id}}][0] = xdim{{arg.id}};
        {% if lh.ndim > 2 or (lh.ndim == 2 and soa_set) %}
        dims_{{lh.kernel}}_h[{{arg.id}}][1] = ydim{{arg.id}};
        {% endif %}
        {% if lh.ndim > 3 or (lh.ndim == 3 and soa_set) %}
        dims_{{lh.kernel}}_h[{{arg.id}}][2] = zdim{{arg.id}};
        {% endif %}
    {% endif %}
    {% endfor %}

    {% if target.name == "cuda" %}
        cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_{{lh.kernel}}, dims_{{lh.kernel}}_h, sizeof(dims_{{lh.kernel}})));
    {% elif target.name == "hip" %}
        hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol( dims_{{lh.kernel}}, dims_{{lh.kernel}}_h, sizeof(dims_{{lh.kernel}})));
    {% endif %}
    }

{# setup reduction variables #}
{% for arg in lh.args %}
{% if arg is ops_gbl or arg is ops_reduce %}
	{% if arg is ops_read %}
    	{% if (not arg.dim.isdigit()) or (arg.dim.isdigit() and arg.dim|int > 1) %}
    {{arg.typ}} *arg{{arg.id}}h = ({{arg.typ}}*)arg{{arg.id}}.data;
        {% endif %}
  	{% else %}
#ifdef OPS_MPI
    {{arg.typ}} *arg{{arg.id}}h = ({{arg.typ}}*)(((ops_reduction)args[{{arg.id}}].data)->data + ((ops_reduction)args[{{arg.id}}].data)->size*block->index);
#else
    {{arg.typ}} *arg{{arg.id}}h = ({{arg.typ}}*)(((ops_reduction)args[{{arg.id}}].data)->data);
#endif
    {% endif %}
{% endif %}
{% endfor %}

    int x_size = MAX(0,end_indx[0]-start_indx[0]);
{% if lh.ndim == 2 %}
    int y_size = MAX(0,end_indx[1]-start_indx[1]);
{% elif lh.ndim == 3 %}
    int y_size = MAX(0,end_indx[1]-start_indx[1]);
    int z_size = MAX(0,end_indx[2]-start_indx[2]);
{%endif%}

{% if lh.ndim == 1 %}
    dim3 grid( (x_size-1)/block->instance->OPS_block_size_x + 1, 1, 1);
{% elif lh.ndim == 2 %}
    dim3 grid( (x_size-1)/block->instance->OPS_block_size_x + 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
{% elif lh.ndim == 3 %}
    dim3 grid( (x_size-1)/block->instance->OPS_block_size_x + 1, (y_size-1)/block->instance->OPS_block_size_y + 1, (z_size-1)/block->instance->OPS_block_size_z + 1);
{% endif %}

{% if lh.ndim > 1 %}
    dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);
{% else %}
    dim3 tblock(block->instance->OPS_block_size_x,1,1);
{% endif %}

{% if lh.has_reduction %}
{% if lh.ndim == 1 %}
    int nblocks = ((x_size-1)/block->instance->OPS_block_size_x + 1);
{% elif lh.ndim == 2 %}
    int nblocks = ((x_size-1)/block->instance->OPS_block_size_x + 1)*((y_size-1)/block->instance->OPS_block_size_y + 1);
{% elif lh.ndim == 3 %}
    int nblocks = ((x_size-1)/block->instance->OPS_block_size_x + 1)*((y_size-1)/block->instance->OPS_block_size_y + 1)*((z_size-1)/block->instance->OPS_block_size_z + 1);
{% endif %}

    int maxblocks = nblocks;
    int reduct_bytes = 0;
    size_t reduct_size = 0;
{% endif %}

{% if lh.isGblRead and lh.isGblReadMDIM %}
    int consts_bytes = 0;
{% endif %}

{% for arg in lh.args %}
{% if arg is ops_gbl or arg is ops_reduce %}
    {% if arg is ops_read %}
        {% if (not arg.dim.isdigit()) or (arg.dim.isdigit() and arg.dim|int > 1) %}
    consts_bytes += ROUND_UP(arg{{arg.id}}.dim*sizeof({{arg.typ}}));
        {% endif %}
    {% else %}
    reduct_bytes += ROUND_UP(maxblocks*{{arg.dim}}*sizeof({{arg.typ}}));
    reduct_size = MAX(reduct_size,{{arg.dim}}*sizeof({{arg.typ}}));
    {% endif %}
{% endif %}
{% endfor %}

{% if lh.isGblRead and lh.isGblReadMDIM %}
    reallocConstArrays(block->instance, consts_bytes);
    consts_bytes = 0;
{% endif %}

{% if lh.has_reduction %}
    reallocReductArrays(block->instance, reduct_bytes);
    reduct_bytes = 0;
{% endif %}

{% for arg in lh.args %}
{% if arg is ops_gbl or arg is ops_reduce %}
    {% if not arg is ops_read %}
    arg{{arg.id}}.data = block->instance->OPS_reduct_h + reduct_bytes;
    arg{{arg.id}}.data_d = block->instance->OPS_reduct_d + reduct_bytes;
    for (int b = 0; b < maxblocks; b++) {
    {% endif %}
    {% if arg is ops_inc %}
        for (int d = 0; d < {{arg.dim}}; d++)   (({{arg.typ}} *)arg{{arg.id}}.data)[d+b*{{arg.dim}}] = ZERO_{{arg.typ}};
    }
    {% elif arg is ops_min %}
        for (int d = 0; d < {{arg.dim}}; d++)   (({{arg.typ}} *)arg{{arg.id}}.data)[d+b*{{arg.dim}}] = INFINITY_{{arg.typ}};
    }
    {% elif arg is ops_max %}
        for (int d = 0; d < {{arg.dim}}; d++)   (({{arg.typ}} *)arg{{arg.id}}.data)[d+b*{{arg.dim}}] = -INFINITY_{{arg.typ}};
    }
    {% endif %}
	{% if not arg is ops_read %}
    reduct_bytes += ROUND_UP(maxblocks*{{arg.dim}}*sizeof({{arg.typ}}));
	{% endif %}
{% endif %}
{% endfor %}

{% for arg in lh.args %}
{% if arg is ops_gbl or arg is ops_reduce %}
    {% if arg is ops_read %}
        {% if (not arg.dim.isdigit()) or (arg.dim.isdigit() and arg.dim|int > 1) %}
    arg{{arg.id}}.data = block->instance->OPS_consts_h + consts_bytes;
    arg{{arg.id}}.data_d = block->instance->OPS_consts_d + consts_bytes;
    for (int d = 0; d < arg{{arg.id}}.dim; d++)    (({{arg.typ}} *)arg{{arg.id}}.data)[d] = arg{{arg.id}}h[d];
    consts_bytes += ROUND_UP(arg{{arg.id}}.dim*sizeof({{arg.typ}}));
        {% endif %}
    {% endif %}
{% endif %}
{% endfor %}

{% if lh.isGblRead and lh.isGblReadMDIM %}
    mvConstArraysToDevice(block->instance, consts_bytes);
{% endif %}

{% if lh.has_reduction %}
    mvReductArraysToDevice(block->instance, reduct_bytes);
{% endif %}

{% for arg in lh.args %}
{% if arg is ops_dat %}
    long long int dat{{arg.id}} = (block->instance->OPS_soa ? args[{{arg.id}}].dat->type_size : args[{{arg.id}}].dat->elem_size);
{% endif %}
{% endfor %}

    char *p_a[{{lh.args|length}}];

{# some custom logic for multigrid #}
{% if lh.multiGrid %}
{% for arg in lh.args %}
    {% if arg.restrict or arg.prolong %}
//  This arg has a restrict/prolong stencil - so create different ranges
    int start_{{arg.id}}[{{lh.ndim}}], end_{{arg.id}}[{{lh.ndim}}];
    int stride_{{arg.id}}[{{lh.ndim}}], d_size_{{arg.id}}[{{lh.ndim}}];
#ifdef OPS_MPI
    for (int n = 0; n < {{lh.ndim}}; n++) {
        sub_dat *sd{{arg.id}} = OPS_sub_dat_list[args[{{arg.id}}].dat->index];
        stride_{{arg.id}}[n] = args[{{arg.id}}].stencil->mgrid_stride[n];
        d_size_{{arg.id}}[n] = args[{{arg.id}}].dat->d_m[n] + sd{{arg.id}}->decomp_size[n] - args[{{arg.id}}].dat->d_p[n];
        {% if arg.restrict %}
        start_{{arg.id}}[n] = global_idx[n]*stride_{{arg.id}}[n] - sd{{arg.id}}->decomp_disp[n] + args[{{arg.id}}].dat->d_m[n];
        {% else %}
        start_{{arg.id}}[n] = global_idx[n]/stride_{{arg.id}}[n] - sd{{arg.id}}->decomp_disp[n] + args[{{arg.id}}].dat->d_m[n];
        {% endif %}
        end_{{arg.id}}[n] = start_{{arg.id}}[n] + d_size_{{arg.id}}[n];
    }
#else
    for (int n = 0; n < {{lh.ndim}}; n++) {
        stride_{{arg.id}}[n] = args[{{arg.id}}].stencil->mgrid_stride[n];
        d_size_{{arg.id}}[n] = args[{{arg.id}}].dat->d_m[n] + args[{{arg.id}}].dat->size[n] - args[{{arg.id}}].dat->d_p[n];
        {% if arg.restrict %}
        start_{{arg.id}}[n] = global_idx[n]*stride_{{arg.id}}[n];
        {% else %}
        start_{{arg.id}}[n] = global_idx[n]/stride_{{arg.id}}[n];
        {% endif %}
        end_{{arg.id}}[n] = start_{{arg.id}}[n] + d_size_{{arg.id}}[n];
    }
#endif 
    {% endif %}
{% endfor %}
{% endif %}

//  =======================
//  set up initial pointers
//  =======================
{% for arg in lh.args %}
{% if arg is ops_dat %}
    {% if arg.restrict or arg.prolong %}
    long long int base{{arg.id}} = args[{{arg.id}}].dat->base_offset + dat{{arg.id}} * 1 * (start_{{arg.id}}[0] * args[{{arg.id}}].stencil->stride[0]);
    {% else %}
    long long int base{{arg.id}} = args[{{arg.id}}].dat->base_offset + dat{{arg.id}} * 1 * (start_indx[0] * args[{{arg.id}}].stencil->stride[0]);
    {% endif %}
    {% for d in range(1, lh.ndim) %}
    base{{arg.id}} = base{{arg.id}} + dat{{arg.id}} * 
    {% for d2 in range(0,d) %}
                     args[{{arg.id}}].dat->size[{{d2}}] * 
    {% endfor %}
    {% if arg.restrict or arg.prolong %}
                     (start_{{arg.id}}[{{d}}] * args[{{arg.id}}].stencil->stride[{{d}}]);
    {% else %}
                     (start_indx[{{d}}] * args[{{arg.id}}].stencil->stride[{{d}}]);
    {% endif %}
    {% endfor %}
    p_a[{{arg.id}}] = (char *)args[{{arg.id}}].data_d + base{{arg.id}};

{% endif %}
{% endfor %}

//  =============
//  Halo exchange
//  =============
#ifndef OPS_LAZY
    ops_H_D_exchanges_device(args, {{lh.args|length}});
    ops_halo_exchanges(args, {{lh.args|length}}, range);
#endif

    if (block->instance->OPS_diags > 1) { 
        ops_timers_core(&__c2, &__t2);
        block->instance->OPS_kernels[{{kernel_idx}}].mpi_time += __t2 - __t1;
    }

{# set up shared memory for reduction #}
{% if lh.has_reduction %}
    size_t nshared = 0;
    int nthread = block->instance->OPS_block_size_x*block->instance->OPS_block_size_y*block->instance->OPS_block_size_z;
{% endif %}

{% for arg in lh.args %}
{% if arg is ops_gbl or arg is ops_reduce %}
    {% if not arg is ops_read %}
    nshared = MAX(nshared,sizeof({{arg.typ}})*{{arg.dim}});
    {% endif %}
{% endif %}
{% endfor %}

{% if lh.has_reduction %}
    nshared = MAX(nshared*nthread,reduct_size*nthread);
{% endif %}

{# Declare stride variable and copy stencil strides from ops_arg #}
//  ==========================================================
//  ops_dat strides for offset calculation in wrapper function
//  ==========================================================
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if lh.ndim == 1 %}
    int xstride_{{arg.id}};
    xstride_{{arg.id}} = args[{{arg.id}}].stencil->stride[0];
        {% elif lh.ndim == 2 %}
    int xstride_{{arg.id}}, ystride_{{arg.id}};
    xstride_{{arg.id}} = args[{{arg.id}}].stencil->stride[0];    ystride_{{arg.id}} = args[{{arg.id}}].stencil->stride[1];
        {% elif lh.ndim == 3 %}
    int xstride_{{arg.id}}, ystride_{{arg.id}}, zstride_{{arg.id}};
    xstride_{{arg.id}} = args[{{arg.id}}].stencil->stride[0];    ystride_{{arg.id}} = args[{{arg.id}}].stencil->stride[1];
    zstride_{{arg.id}} = args[{{arg.id}}].stencil->stride[2];
        {% endif %}
    {% endif %}
{% endfor %}

{% endblock %}

{% block host_loop %}
{# kernel call #}
//  call kernel wrapper function, passing in pointers to data
{% if lh.ndim == 1 %}
    if (x_size > 0) {
{% elif lh.ndim == 2 %}
    if (x_size > 0 && y_size > 0) {
{% elif lh.ndim == 3 %}
    if (x_size > 0 && y_size > 0 && z_size > 0) {
{% endif %}
{% set signature = [""] %}
{% set any_prolong = [False] %}
{% if signature.append(signature.pop() + "\n") %} {% endif %}
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% set current_arg %}                   ({{lh.dats[arg.dat_id].typ}} *)p_a[{{arg.id}}], {% endset %}
    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
                {% set current_arg %}                   *({{arg.typ}} *)arg{{arg.id}}.data, {% endset %}
            {% else %}
                {% set current_arg %}                   ({{arg.typ}} *)arg{{arg.id}}.data_d, {% endset %}
            {% endif %}
        {% else %}
            {% set current_arg %}                   ({{arg.typ}} *)arg{{arg.id}}.data_d, {% endset %}
        {% endif %}
    {% elif arg is ops_idx %}
        {% if lh.ndim == 1 %}
            {% set current_arg %}                   arg_idx[0], {% endset %}
        {% elif lh.ndim == 2 %}
            {% set current_arg %}                   arg_idx[0], arg_idx[1], {% endset %}
        {% elif lh.ndim == 3 %}
            {% set current_arg %}                   arg_idx[0], arg_idx[1], arg_idx[2], {% endset %}
        {% endif %}
    {% endif %}
    
    {% if arg is ops_dat %}
        {% if lh.ndim == 1 %}
            {% set current_arg %}{{current_arg}}xstride_{{arg.id}}, {% endset %}
        {% elif lh.ndim == 2 %}
            {% set current_arg %}{{current_arg}}xstride_{{arg.id}}, ystride_{{arg.id}}, {% endset %}
        {% elif lh.ndim == 3 %}
            {% set current_arg %}{{current_arg}}xstride_{{arg.id}}, ystride_{{arg.id}}, zstride_{{arg.id}}, {% endset %}
        {% endif %}
        {% if arg.restrict or arg.prolong %}
            {% if any_prolong.append(True + any_prolong.pop()) %} {% endif %}
            {% if lh.ndim == 1 %}
                {% set current_arg %}{{current_arg}}stride_{{arg.id}}[0], {% endset %}
            {% elif lh.ndim == 2 %}
                {% set current_arg %}{{current_arg}}stride_{{arg.id}}[0],stride_{{arg.id}}[1], {% endset %}
            {% elif lh.ndim == 3 %}
                {% set current_arg %}{{current_arg}}stride_{{arg.id}}[0],stride_{{arg.id}}[1],stride_{{arg.id}}[2], {% endset %}
            {% endif %}
        {% endif %}
    {% endif %}
    
    {% if signature.append(signature.pop() + current_arg + "\n") %} {% endif %}
{% endfor %}

{% if any_prolong[0] %}
    {% if lh.ndim == 1 %}
        {% set current_arg %}                   global_idx[0], {% endset %}
    {% elif lh.ndim == 2 %}
        {% set current_arg %}                   global_idx[0], global_idx[1], {% endset %}
    {% elif lh.ndim == 3 %}
        {% set current_arg %}                   global_idx[0], global_idx[1], global_idx[2], {% endset %}
    {% endif %}

    {% if signature.append(signature.pop() + current_arg + "\n") %} {% endif %}
{% endif %}

{% if lh.ndim == 1 %}
    {% set current_arg %}                   x_size{% endset %}
{% elif lh.ndim == 2 %}
    {% set current_arg %}                   x_size, y_size{% endset %}
{% elif lh.ndim == 3 %}
    {% set current_arg %}                   x_size, y_size, z_size{% endset %}
{% endif %}
{% if signature.append(signature.pop() + current_arg) %} {% endif %}

{% if lh.has_reduction %}
        ops_{{lh.kernel}}<<<grid, tblock, nshared >>> ({{signature[0]}});
{% else %}
        ops_{{lh.kernel}}<<<grid, tblock >>> ({{signature[0]}});
{% endif %}

    }

{% if target.name == "cuda" %}
    cutilSafeCall(block->instance->ostream(), cudaGetLastError());
{% elif target.name == "hip" %}
    hipSafeCall(block->instance->ostream(), hipGetLastError());
{% endif %}

{# Complete Reduction Operation by moving data onto host #}
{# and reducing over blocks #}
{% if lh.has_reduction %}
    mvReductArraysToHost(block->instance, reduct_bytes);
{% endif %}

{% for arg in lh.args %}
{% if arg is ops_gbl or arg is ops_reduce %}    
    {% if not arg is ops_read %}
        {% if arg is ops_inc %}
    for (int b = 0; b < maxblocks; b++)
        for (int d = 0; d < {{arg.dim}}; d++)
           arg{{arg.id}}h[d] = arg{{arg.id}}h[d] + (({{arg.typ}} *)arg{{arg.id}}.data)[d+b*{{arg.dim}}];
        {% elif arg is ops_min %}
    for (int b = 0; b < maxblocks; b++)
        for (int d = 0; d < {{arg.dim}}; d++)
            arg{{arg.id}}h[d] = MIN(arg{{arg.id}}h[d],(({{arg.typ}} *)arg{{arg.id}}.data)[d+b*{{arg.dim}}]);            
        {% elif arg is ops_max %}
    for (int b = 0; b < maxblocks; b++)
        for (int d = 0; d < {{arg.dim}}; d++)
            arg{{arg.id}}h[d] = MAX(arg{{arg.id}}h[d],(({{arg.typ}} *)arg{{arg.id}}.data)[d+b*{{arg.dim}}]);
        {% endif %}
    arg{{arg.id}}.data = (char *)arg{{arg.id}}h;
    
    {% endif %}
{% endif %}
{% endfor %}

{% endblock %}

{% block host_epilogue %}
    if(block->instance->OPS_diags > 1) {
    {% if target.name == "cuda" %}
        cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    {% elif target.name == "hip" %}
        hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    {% endif %}
        ops_timers_core(&__c1, &__t1);
        block->instance->OPS_kernels[{{kernel_idx}}].time += __t1 - __t2;
    }

#ifndef OPS_LAZY
    ops_set_dirtybit_device(args, {{lh.args|length}});
    {% for arg in lh.args %}
        {% if arg is ops_dat and (arg is ops_write or arg is ops_rw or arg is ops_inc or arg is ops_max or arg is ops_min) %}
    ops_set_halo_dirtybit3(&args[{{arg.id}}], range);
        {% endif %}
    {% endfor %}
#endif

    if (block->instance->OPS_diags > 1) {
//      ====================
//      Update kernel record
//      ====================
        ops_timers_core(&__c2, &__t2);
        block->instance->OPS_kernels[{{kernel_idx}}].mpi_time += __t2 - __t1;
        {% for arg in lh.args %}
            {% if arg is ops_dat %}
        block->instance->OPS_kernels[{{kernel_idx}}].transfer += ops_compute_transfer(dim, start_indx, end_indx, &arg{{arg.id}});
            {% endif %}
        {% endfor %}
    }
}

{% endblock %}

{% block kernel_descriptor_lazy_call %}
    create_kerneldesc_and_enque("{{lh.kernel}}", args, {{lh.args|length}}, {{kernel_idx}}, dim, 1, range, block, ops_par_loop_{{lh.kernel}}_execute);
{% endblock %}
