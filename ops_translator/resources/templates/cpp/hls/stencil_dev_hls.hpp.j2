{% macro chainLinkTranform(link) -%}
{%- if link is isnumaric -%}
stencilValues[{{link}}]
{%- elif "buf_r" in link -%}
{{link}}[i_l]
{%- elif "buf_p" in link -%}
{{link}}[i_p]
{%- else -%}
{{link}}
{%- endif -%}
{%- endmacro -%}
{% block header_block %}
#pragma onece

#include <common_config.hpp>
#include <ops_hls_stencil_core.hpp>

static constexpr unsigned short {{stencil.stencil_ptr}}_num_points = {{stencil.num_points}};
static constexpr unsigned short {{stencil.stencil_ptr}}_stencil_size = {{stencil.stencil_size}};
static constexpr unsigned short {{stencil.stencil_ptr}}_stencil_dim = {{stencil.dim}};
{% endblock %}

class {{stencil.stencil_ptr}} : public ops::hls::StencilCore <stencil_type, {{stencil.stencil_ptr}}_num_points,
        vector_factor, ops::hls::CoefTypes::CONST_COEF, {{stencil.stencil_ptr}}_stencil_size,
        {{stencil.stencil_ptr}}_stencil_dim>
{
    public:
        using ops::hls::StencilCore <stencil_type, {{stencil.stencil_ptr}}_num_points,
        vector_factor, ops::hls::CoefTypes::CONST_COEF, {{stencil.stencil_ptr}}_stencil_size,
        {{stencil.stencil_ptr}}_stencil_dim>::m_gridProp;

        void stencilRead(widen_stream_dt& rd_buffer,
    {% for i in range(stencil.num_points) %}
                ::hls::stream<stencil_type> output_bus_{{i}}[vector_factor]{{"," if not loop.last}}
    {% endfor %}
                )
        {
            unsigned short i = 0; 
        {% if stencil.dim > 1 %}
            unsigned i_l = 0; // Line buffer index
            unsigned short j = 0; 
        {% endif %}
        {% if stencil.dim > 2 %}
            unsigned i_p = 0; // Plane buffer index
            unsigned short k = 0;
        {% endif %}

            ::ops::hls::GridPropertyCore gridProp = m_gridProp;
            unsigned short itr_limit = gridProp.itr_limit;
            unsigned short act_total_itr = gridProp.total_itr;
            widen_dt read_val = 0;
            
            widen_dt stencilValues[{{stencil.stencil_ptr}}_num_points];
            #pragma HLS ARRAY_PARTITION variable = stencilValues dim = 1 complete

        {% for buffer in stencil.window_buffers %}
            widen_dt {{buffer}}[max_depth_bytes/(sizeof(stencil_type) * vector_factor)];
            #pragma HLS BIND_STORAGE variable =  {{buffer}} type = ram_t2p impl=uram latency=2
        {% endfor %}

        {% for unique_row in stencil.rows %}
            stencil_type rowArr_{{unique_row[1]}}_{{unique_row[0]}}[vector_factor + s_stencil_span_x];
            #pragma HLS ARRAY_PARTITION variable = rowArr_{{unique_row[1]}}_{{unique_row[0]}} dim=1 complete
        {% endfor %}

            for (unsigned short itr = 0; itr < itr_limit; itr++)
            {
            #pragma HLS PIPELINE II=1

                spc_temp_blocking_read:
                {
                    bool cond_x_terminate = (i == gridProp.xblocks - 1); 
            {% if stencil.dim == 2 %}
                    bool cond_y_terminate = (j == gridProp.outer_loop_limit - 1);
            {% elif stenicl.dim == 3 %}
                    bool cond_y_terminate = (j == gridProp.grid_size[1] - 1);
                    bool cond_z_terminate = (k == gridProp.outer_loop_limit - 1);
            {% endif %}

                    if (cond_x_terminate)
                        i = 0;
                    else
                        i++;
            {% if stencil.dim == 2 %}
                    if (cond_x_terminate && cond_y_terminate)
                        j = 0;
                    else if (cond_x_terminate)
                        j++;
            {% elif stenicl.dim == 3 %}
                    if (cond_x_terminate && cond_y_terminate && cond_z_terminate)
                        k = 0;
                    else if (cond_x_terminate && cond_y_terminate)
                        k++
            {% endif %}

                    bool cond_read = (itr < act_total_itr);

                    if (cond_read)
                        read_val = rd_buffer.read();

            {% for chain in stencil.chains %}
                    {{chainLinkTranform(chain[0])}} = {{chainLinkTranform(chain[1])}};
            {% endfor %}

            # {% if stencil.dim > 1 %}
            #         bool cond_end_of_line = 
            # {% endif %}
                }
            }
        }
}
