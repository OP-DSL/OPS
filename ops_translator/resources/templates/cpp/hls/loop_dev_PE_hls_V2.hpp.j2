{%- macro hls_stream_name(arg) -%}
    {%- if arg is not ops_rw -%}
arg{{arg.id}}_{{"rd" if (arg is ops_read) else ("wr" if (arg is ops_write))}}_buffer
    {%- endif -%}
{%- endmacro -%}

{%- macro hls_stream_name_t2(arg, suffix) -%}
arg{{arg.id}}_{{suffix}}_buffer
{%- endmacro -%}

{%- macro buffer_read_idx(buffer) -%}
    {%- if buffer.buffer_type == ops.BufferType.LINE_BUFF -%}
{{buffer.name}}_i_l_rd {%- else -%}{{buffer.name}}_i_p_rd {%- endif -%}
{%- endmacro -%}

{%- macro buffer_write_idx(buffer) -%}
    {%- if buffer.buffer_type == ops.BufferType.LINE_BUFF -%}
{{buffer.name}}_i_l_wr {%- else -%}{{buffer.name}}_i_p_wr {%- endif -%}
{%- endmacro -%}

{%- macro chainLinkTranform(link, arg_id, isread) -%}
    {%- if link is number -%}
arg{{arg_id}}_stencilValues[{{link}}]
    {%- elif link is window_buffer -%}
        {%- if isread -%}
arg{{arg_id}}_{{link.name}}[{{buffer_read_idx(link)}}]
        {%- else -%}
arg{{arg_id}}_{{link.name}}[{{buffer_write_idx(link)}}]
        {%- endif -%}
    {%- else -%}
arg{{arg_id}}_{{link}}
    {%- endif -%}
{%- endmacro -%}



{% set half_span_x = (prog.findStencil(lh.get_read_stencil()).stencil_size - 1) / 2%}
{% block header_block %}
#pragma once
#include "common_config.hpp"
#include <ops_hls_stencil_core_v2.hpp>

 
{% set stencil = prog.findStencil(lh.get_read_stencil()) %}
    {% if stencil is not none %}
static constexpr unsigned short read_num_points = {{stencil.num_points}};
static constexpr unsigned short read_stencil_size = {{stencil.stencil_size}};
static constexpr unsigned short read_stencil_dim = {{stencil.dim}};
    {% endif %}
{% set stencil = prog.findStencil(lh.get_write_stencil()) %}
    {% if stencil is not none %}
static constexpr unsigned short write_num_points = {{stencil.num_points}};
static constexpr unsigned short write_stencil_size = {{stencil.stencil_size}};
static constexpr unsigned short write_stencil_dim = {{stencil.dim}};
    {% endif %}
{% endblock %}

{% block kernel_core %}
inline void kernel_{{lh.kernel}}_core(
    {% for arg in lh.args %}
        {% if loop.last %}
            {% if consts %}
                {% set last_check = False %}
            {% else %}
                {% set last_check = True %}
            {% endif %}
        {% else %}
            {% set last_check = False %}
        {% endif %}
        {% if arg is ops_read %}
            {% if prog.findStencil(arg.stencil_ptr) %}
                {% for i in range(prog.findStencil(arg.stencil_ptr).num_points)%}
        const stencil_type& reg_{{arg.id}}_{{i}}{{"," if (not loop.last or not last_check)}}
                {% endfor %}
            {% endif %}
        {% endif %}
        {% if arg is ops_write or ops_rw%}
            {% if prog.findStencil(arg.stencil_ptr) %}
                {% for i in range(prog.findStencil(arg.stencil_ptr).num_points)%}
        stencil_type& reg_{{arg.id}}_{{i}}{{"," if (not loop.last or not last_check)}}
                {% endfor %}
            {% endif %}
        {% endif %}
        {% if arg is ops_idx %}
        const ops::hls::SizeType& idx{{"," if (not loop.last or not last_check)}}
        {% endif %}
    {% endfor %}
    {% for const in consts %}
        const {{const.typ}} {{const.ptr}}{{"," if not loop.last}}
    {% endfor %}
)
{
#ifdef DEBUG_LOG
    printf("[KERNEL_INTERNAL]|%s| starting kernel core: kernel_{{lh.kernel}}_core\n",__func__);
#endif
    {{kernel_body}}

#ifdef DEBUG_LOG
    {% for arg in lh.args %}
        {% if arg is ops_read %}
            {% if prog.findStencil(arg.stencil_ptr) %}
                {% for i in range(prog.findStencil(arg.stencil_ptr).num_points)%}
    printf("[KERNEL_INTERNAL]|%s| read_val - reg_{{arg.id}}_{{i}}: %f \n", __func__, reg_{{arg.id}}_{{i}});
                {% endfor %}
            {% endif %}
        {% elif arg is ops_write or ops_rw%}
            {% if prog.findStencil(arg.stencil_ptr) %}
                {% for i in range(prog.findStencil(arg.stencil_ptr).num_points)%}
    printf("[KERNEL_INTERNAL]|%s| write_val - reg_{{arg.id}}_{{i}}: %f \n", __func__, reg_{{arg.id}}_{{i}});
                {% endfor %}
            {% endif %}
        {% elif arg is ops_idx %}
    printf("[KERNEL_INTERNAL]|%s| index_val: (%d, %d, %d) \n", __func__, idx[0], idx[1], idx[2]);
        {% endif %}
    {% endfor %}
#endif

#ifdef DEBUG_LOG
    printf("[KERNEL_INTERNAL]|%s| exiting: kernel_{{lh.kernel}}_core\n",__func__);
#endif
}
{% endblock %}

{% block stencil_class %}
class Stencil_{{lh.kernel}} : public ops::hls::StencilCoreV2<stencil_type, read_num_points, vector_factor, ops::hls::CoefTypes::CONST_COEF,
        read_stencil_size, read_stencil_dim>
{
    using ops::hls::StencilCoreV2<stencil_type, read_num_points, vector_factor, ops::hls::CoefTypes::CONST_COEF,
            read_stencil_size, read_stencil_dim>::m_stencilConfig;
public:

    void stencilRun(
    {% for arg in lh.args|ops_dat %}
        {% if loop.last %}
            {% if consts %}
                {% set last_check = False %}
            {% else %}
                {% set last_check = True %}
            {% endif %}
        {% else %}
            {% set last_check = False %}
        {% endif %}
        {% if arg is not ops_rw %}
            widen_stream_dt& {{hls_stream_name(arg)-}}{{"," if (not loop.last or not last_check)}}
        {% else %}
            widen_stream_dt& {{hls_stream_name_t2(arg, "rd")-}},
            widen_stream_dt& {{hls_stream_name_t2(arg, "wr")-}}{{"," if (not loop.last or not last_check)}}
        {% endif %}
    {% endfor %}
    {% for const in consts %}
        const {{const.typ}} {{const.ptr}}{{"," if not loop.last}}
    {% endfor %}
        )
    {
        short i = -1;
    {% if prog.findStencil(lh.get_read_stencil()).dim > 1 %}
        short j = -s_stencil_half_span_x; 
    {% endif %}
    {% if prog.findStencil(lh.get_read_stencil()).dim > 2 %}
        unsigned short k = -s_stencil_half_span_x;
        plane_diff = stencilConfig.grid_size[0] * stencilConfig.grid_size[1] - 1;
    {% endif %}

    {% for buffer in prog.findStencil(lh.get_read_stencil()).window_buffers %}
        {% if buffer.buffer_type == ops.BufferType.LINE_BUFF %}
        unsigned short {{buffer_read_idx(buffer)}} = {{(buffer.read_point.x - buffer.write_point.x, 0)|max}};
        unsigned short {{buffer_write_idx(buffer)}} = {{(buffer.write_point.x - buffer.read_point.x, 0)|max}};
        {% else %}
        unsigned short {{buffer_read_idx(buffer)}} = max({{(buffer.read_point - buffer.write_point).y}} * stencilConfig.grid_size[0] + {{(buffer.read_point - buff.write_point).x}},0);
        unsigned short {{buffer_write_idx(buffer)}} = max({{(buffer.write_point - buffer.read_point).y}} * stencilConfig.grid_size[0] + {{(buffer.write_point - buff.read_point).x}},0);
        {% endif %}
    {% endfor %}

        ::ops::hls::StencilConfigCore stencilConfig = m_stencilConfig;
        #pragma HLS ARRAY_PARTITION variable = stencilConfig.lower_limit dim = 1 complete
        #pragma HLS ARRAY_PARTITION variable = stencilConfig.upper_limit dim = 1 complete

    {% if prog.findStencil(lh.get_read_stencil()).dim  == 1 %}
        unsigned short iter_limit = stencilConfig.total_itr;
    {% elif prog.findStencil(lh.get_read_stencil()).dim == 2%}
        unsigned short iter_limit = stencilConfig.outer_loop_limit * stencilConfig.grid_size[0];
    {% else %}
        unsigned short iter_limit = stencilConfig.outer_loop_limit * 
                stencilConfig.grid_size[1] * stencilConfig.grid_size[0];
    {% endif %}

        unsigned short total_itr = stencilConfig.total_itr;

    {% for arg in lh.args|ops_dat %}
        {% if arg is ops_read %}
        widen_dt arg{{arg.id}}_read_val = 0;
        {% elif arg is ops_write %}
        widen_dt arg{{arg.id}}_update_val;
        {% else %}
        widen_dt arg{{arg.id}}_read_val = 0;
        widen_dt arg{{arg.id}}_update_val;
        {% endif %}
    {% endfor %}

    {% for arg in lh.args|ops_dat|ops_read %}
        widen_dt arg{{arg.id}}_stencilValues[read_num_points];
        #pragma HLS ARRAY_PARTITION variable = arg{{arg.id}}_stencilValues dim = 1 complete

        {% for buffer in prog.findStencil(arg.stencil_ptr).window_buffers %}
        widen_dt arg{{arg.id}}_{{buffer.name}}[max_depth_bytes/(sizeof(stencil_type) * vector_factor)];
        #pragma HLS BIND_STORAGE variable = arg{{arg.id}}_{{buffer.name}} type = ram_t2p impl=uram latency=2
        {% endfor %}

        {% for row_discriptor in prog.findStencil(arg.stencil_ptr).row_discriptors %}
        stencil_type arg{{arg.id}}_rowArr_{{row_discriptor.row_id[0]}}_{{row_discriptor.row_id[1]}}[vector_factor + s_stencil_span_x];
        #pragma HLS ARRAY_PARTITION variable = arg{{arg.id}}_rowArr_{{row_discriptor.row_id[0]}}_{{row_discriptor.row_id[1]}} dim=1 complete
        {% endfor %}
    {% endfor %}

        for (unsigned short itr = 0; itr < iter_limit; itr++)
        {
        #pragma HLS PIPELINE II=1

            spc_temp_blocking_read:
            {
                bool cond_x_terminate = (i == stencilConfig.grid_size[0] - 1); 
    {% if prog.findStencil(lh.get_read_stencil()).dim == 2 %}
                bool cond_y_terminate = (j == stencilConfig.outer_loop_limit - 1);
    {% elif prog.findStencil(lh.get_read_stencil()).dim == 3 %}
                bool cond_y_terminate = (j == stencilConfig.grid_size[1] - 1);
                bool cond_z_terminate = (k == stencilConfig.outer_loop_limit - 1);
    {% endif %}

#ifdef DEBUG_LOG
                printf("[DEBUG][INTERNAL] loop params before update i(%d), j(%d),"\
    {% for buffer in prog.findStencil(lh.get_read_stencil()).window_buffers %}
                    "{{buffer_read_idx(buffer)}}(%d), "\
                    "{{buffer_write_idx(buffer)}}(%d), "\
    {% endfor %}
                    "itr(%d)\n", i, j,
    {% for buffer in prog.findStencil(lh.get_read_stencil()).window_buffers %}
                    {{buffer_read_idx(buffer)}},
                    {{buffer_write_idx(buffer)}},
    {% endfor %}
                    itr);
#endif
                if (cond_x_terminate)
                    i = 0;
                else
                    i++;
    {% if prog.findStencil(lh.get_read_stencil()).dim == 2 %}
                if (cond_x_terminate && cond_y_terminate)
                    j = 0;
                else if  (cond_x_terminate)
                    j++;
    {% elif prog.findStencil(lh.get_read_stencil()).dim == 3%}
                if (cond_x_terminate && cond_y_terminate && cond_z_terminate)
                    k = 0;
                else if (cond_x_terminate && cond_y_terminate)
                    k++;
    {% endif %}

                bool cond_read = (itr < total_itr);

                if (cond_read){
    {% for arg in lh.args|ops_dat %}
        {% if arg is ops_read or arg is ops_rw %}
                    arg{{arg.id}}_read_val = arg{{arg.id}}_rd_buffer.read();
        {% endif %}
    {% endfor %}
                }
    {% for arg in lh.args|ops_dat|ops_read %}
        {% for chain in prog.findStencil(lh.get_read_stencil()).chains %}
                {{chainLinkTranform(chain[0], arg.id, 0)}} = {{chainLinkTranform(chain[1], arg.id, 1)}};
        {% endfor %}
    {% endfor %}


    {% for buffer in prog.findStencil(lh.get_read_stencil()).window_buffers %}
        {% if buffer.buffer_type == ops.BufferType.LINE_BUFF %}
                bool cond_end_of_line_buff_{{buffer_read_idx(buffer)}} = {{buffer_read_idx(buffer)}} >= (stencilConfig.grid_size[0] - 1);
                bool cond_end_of_line_buff_{{buffer_write_idx(buffer)}} = {{buffer_write_idx(buffer)}} >= (stencilConfig.grid_size[0] - 1);
        {% else %}
                bool cond_end_of_line_buff_{{buffer_read_idx(buffer)}} = {{buffer_read_idx(buffer)}} >= (plane_diff);
                bool cond_end_of_line_buff_{{buffer_write_idx(buffer)}} = {{buffer_write_idx(buffer)}} >= (plane_diff);
        {% endif %}

                if (cond_end_of_line_buff_{{buffer_read_idx(buffer)}})
                    {{buffer_read_idx(buffer)}} = 0;
                else
                    {{buffer_read_idx(buffer)}}++;

                if (cond_end_of_line_buff_{{buffer_write_idx(buffer)}})
                    {{buffer_write_idx(buffer)}} = 0;
                else
                    {{buffer_write_idx(buffer)}}++;

    {% endfor %}

#ifdef DEBUG_LOG
                printf("[DEBUG][INTERNAL] loop params after update i(%d), j(%d),"\
    {% for buffer in prog.findStencil(lh.get_read_stencil()).window_buffers %}
                        "{{buffer_read_idx(buffer)}}(%d), "\
                        "{{buffer_write_idx(buffer)}}(%d), "\
    {% endfor %}
                        "itr(%d)\n", i, j,
    {% for buffer in prog.findStencil(lh.get_read_stencil()).window_buffers %}
                        {{buffer_read_idx(buffer)}},
                        {{buffer_write_idx(buffer)}},
    {% endfor %}
                        itr);
            
                printf("[DEBUG][INTERNAL] --------------------------------------------------------\n\n");

    {% for arg in lh.args|ops_dat|ops_read %}
                printf("[DEBUG][INTERNAL] read values arg{{arg.id}}: (");
                for (int ri = 0; ri < vector_factor; ri++)
                {
                    ops::hls::DataConv tmpConverter;
                    tmpConverter.i = arg{{arg.id}}_read_val.range((ri + 1)*s_datatype_size - 1, ri * s_datatype_size);
                    printf("%f ", tmpConverter.f);
                }
                printf(")\n");
    {% endfor %}
#endif      
            }

            vec2arr: for (unsigned short x = 0; x < vector_factor; x++)
            {
#pragma HLS UNROLL factor=vector_factor
    {% for arg in lh.args|ops_dat|ops_read %}
        {% set stencil = prog.findStencil(lh.get_read_stencil()) %}
        {% for row_discriptor in stencil.row_discriptors %}
            {% for point in row_discriptor.row_points %}
                {% if point.x == row_discriptor.base_point.x %}
                ops::hls::DataConv arg{{arg.id}}_tmpConverter_{{point.y}}_{{point.z}};
                arg{{arg.id}}_tmpConverter_{{point.y}}_{{point.z}}.i = arg{{arg.id}}_stencilValues[{{stencil.points.index(point)}}].range(s_datatype_size * (x + 1) - 1, x * s_datatype_size);
                arg{{arg.id}}_rowArr_{{row_discriptor.row_id[0]}}_{{row_discriptor.row_id[1]}}[x + s_stencil_half_span_x] = arg{{arg.id}}_tmpConverter_{{point.y}}_{{point.z}}.f; 
                {% endif %}
            {% endfor %}
        {% endfor %}
    {% endfor %}               
            }
            vec2arr_rest:
            {
    {% for arg in lh.args|ops_dat|ops_read %}
        {% set stencil = prog.findStencil(lh.get_read_stencil()) %}
        {% for row_discriptor in stencil.row_discriptors %}
            {% for point in row_discriptor.row_points %}
                {% if point.x != row_discriptor.base_point.x %}
                    {% for i in range(config.vector_factor) %}
                        {% set diff = point.x - row_discriptor.base_point.x %}
                        {% set access_idx = diff * config.vector_factor + row_discriptor.base_point.x + i %}
                        {% if (diff < 0 and access_idx >= 0) or (diff > 0 and access_idx < config.vector_factor + 2 * half_span_x) %}
                ops::hls::DataConv arg{{arg.id}}_tmpConverter_{{point.x}}_{{point.y}}_{{point.z}}_{{i}};
                arg{{arg.id}}_tmpConverter_{{point.x}}_{{point.y}}_{{point.z}}_{{i}}.i = arg{{arg.id}}_stencilValues[{{stencil.points.index(point)}}].range(s_datatype_size * ({{i}} + 1) - 1, s_datatype_size * {{i}});
                arg{{arg.id}}_rowArr_{{row_discriptor.row_id[0]}}_{{row_discriptor.row_id[1]}}[{{access_idx}}] = arg{{arg.id}}_tmpConverter_{{point.x}}_{{point.y}}_{{point.z}}_{{i}}.f;
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endfor %}
        {% endfor %}
    {% endfor %}
            }

            process: for (unsigned short x = 0; x < vector_factor; x++)
            {
#pragma HLS UNROLL factor=vector_factor
                unsigned short index = (i << shift_bits) + x;
                bool neg_cond = register_it(             
                        (index < stencilConfig.lower_limit[0]) 
                        || (index >= stencilConfig.upper_limit[0])
    {% if prog.findStencil(lh.get_read_stencil()).dim > 1 %}
                        || (j < stencilConfig.lower_limit[1]) 
                        || (j >= stencilConfig.upper_limit[1])
    {% endif %}
    {% if prog.findStencil(lh.get_read_stencil()).dim > 2 %}
                        || (k < stencilConfig.lower_limit[2]) 
                        || (k >= stencilConfig.upper_limit[2])
    {% endif %}
                );

#ifdef DEBUG_LOG
    {% if prog.findStencil(lh.get_read_stencil()).dim == 1 %}
                printf("[DEBUG][INTERNAL] index=(%d), lowerbound=(%d), upperbound=(%d), neg_cond=%d\n", index,
                            stencilConfig.lower_limit[0], stencilConfig.upper_limit[0], neg_cond);

    {% elif prog.findStencil(lh.get_read_stencil()).dim == 2 %}
                printf("[DEBUG][INTERNAL] index=(%d, %d), lowerbound=(%d, %d), upperbound=(%d, %d), neg_cond=%d\n", index, j,
                            stencilConfig.lower_limit[0], stencilConfig.lower_limit[1], stencilConfig.upper_limit[0], stencilConfig.upper_limit[1], neg_cond);
    {% else %}
                printf("[DEBUG][INTERNAL] index=(%d, %d, %d), lowerbound=(%d, %d, %d), upperbound=(%d, %d, %d), neg_cond=%d\n", index, j, k,
                            stencilConfig.lower_limit[0], stencilConfig.lower_limit[1], stencilConfig.lower_limit[2], 
                            stencilConfig.upper_limit[0], stencilConfig.upper_limit[1], stencilConfig.upper_limit[2], neg_cond);

    {% endif %}
#endif
    {% for arg in lh.args|ops_dat|ops_write %}
                stencil_type arg{{arg.id}}_result; 
    {% endfor %}
    {% if lh.arg_idx != -1 %}
                ops::hls::SizeType idx = {index, {% if prog.findStencil(lh.get_read_stencil()).dim > 1 %}y,{% else %}1,{% endif %} {% if prog.findStencil(lh.get_read_stencil()).dim > 2 %}z,{% else %}1,{% endif %}};
    {% endif %}

                kernel_{{lh.kernel}}_core(
    {% for arg in lh.args %}
        {% if loop.last %}
            {% if consts %}
                {% set last_check = False %}
            {% else %}
                {% set last_check = True %}
            {% endif %}
        {% else %}
            {% set last_check = False %}
        {% endif %}
        {% if arg is ops_read %}
            {% if prog.findStencil(arg.stencil_ptr) %}
                {% for i in range(prog.findStencil(arg.stencil_ptr).num_points)%}
                        arg{{arg.id}}_rowArr_{{prog.findStencil(arg.stencil_ptr).points[i].y}}_{{prog.findStencil(arg.stencil_ptr).points[i].z}}[x + {{prog.findStencil(arg.stencil_ptr).points[i].x}}]{{"," if (not loop.last or not last_check)}}
                {% endfor %}
            {% endif %}
        {% endif %}
        {% if arg is ops_write or ops_rw%}
            {% if prog.findStencil(arg.stencil_ptr) %}
                {% for i in range(prog.findStencil(arg.stencil_ptr).num_points)%}
                        arg{{arg.id}}_result{{"," if (not loop.last or not last_check)}}
                {% endfor %}
            {% endif %}
        {% endif %}
        {% if arg is ops_idx %}
                        idx{{"," if (not loop.last or not last_check)}}
        {% endif %}
    {% endfor %}
    {% for const in consts %}
                        {{const.ptr}}{{"," if not loop.last}}
    {% endfor %}
                );

    {% for arg in lh.args|ops_dat|ops_write %}
                ops::hls::DataConv arg{{arg.id}}_tmpConvWrite; 
    {% endfor %}
                if (not neg_cond)
                {
    {% for arg in lh.args|ops_dat|ops_write %}
                    arg{{arg.id}}_tmpConvWrite.f = arg{{arg.id}}_result;
    {% endfor %}
                }
                else
                {
    {% if isFullyMapped %}
        {% for arg in lh.args|ops_dat|ops_write %}
                    arg{{arg.id}}_tmpConvWrite.f = arg{{datMap[arg.id]}}_rowArr_{{prog.findStencil(lh.get_read_stencil()).base_point.y}}_{{prog.findStencil(lh.get_read_stencil()).base_point.z}}[x + {{prog.findStencil(lh.get_read_stencil()).base_point.x}}];
        {% endfor %}
    {% else %}
        //TODO: right now fpga kernel expected to be fully mapped
    {% endif %}
                }

    {% for arg in lh.args|ops_dat|ops_write %}
                arg{{arg.id}}_update_val.range(s_datatype_size * (x + 1) - 1, x * s_datatype_size) = arg{{arg.id}}_tmpConvWrite.i;
    {% endfor %}         
            }

            write:
            {
                bool cond_write = (j >= 0);

                if (cond_write)
                {
    {% for arg in lh.args|ops_dat|ops_write %}
                    {{hls_stream_name(arg)}} <<  arg{{arg.id}}_update_val;
    {% endfor %}
                }
            }
        }
    } 
};
{% endblock %}

{% block kernel_PE %}
void kernel_{{lh.kernel}}_PE(const ops::hls::StencilConfigCore& stencilConfig,
    {% for arg in lh.args|ops_dat %}
        {% if loop.last %}
            {% if consts %}
                {% set last_check = False %}
            {% else %}
                {% set last_check = True %}
            {% endif %}
        {% else %}
            {% set last_check = False %}
        {% endif %}
        {% if arg is not ops_rw %}
            Stencil_{{lh.kernel}}::widen_stream_dt& {{hls_stream_name(arg)-}}{{"," if (not loop.last or not last_check)}}
        {% else %}
            Stencil_{{lh.kernel}}::widen_stream_dt& {{hls_stream_name_t2(arg, "rd")-}},
            Stencil_{{lh.kernel}}::widen_stream_dt& {{hls_stream_name_t2(arg, "wr")-}}{{"," if (not loop.last or not last_check)}}
        {% endif %}
    {% endfor %}
    {% for const in consts %}
        const {{const.typ}} {{const.ptr}}{{"," if not loop.last}}
    {% endfor %}
)
{
    Stencil_{{lh.kernel}} stencil;

#ifdef DEBUG_LOG
    printf("[KERNEL_DEBUG]|%s| stencil config gridSize: %d (xblocks), %d, %d\n", __func__, stencilConfig.grid_size[0], stencilConfig.grid_size[1], stencilConfig.grid_size[2]);
#endif
    stencil.setConfig(stencilConfig);

#ifdef DEBUG_LOG
    printf("[KERNEL_DEBUG]|%s| starting stencil kernel PE\n", __func__);
#endif

    stencil.stencilRun(
        {% for arg in lh.args|ops_dat %}
        {% if loop.last %}
            {% if consts %}
                {% set last_check = False %}
            {% else %}
                {% set last_check = True %}
            {% endif %}
        {% else %}
            {% set last_check = False %}
        {% endif %}
        {% if arg is not ops_rw %}
            {{hls_stream_name(arg)-}}{{"," if (not loop.last or not last_check)}}
        {% else %}
            {{hls_stream_name_t2(arg, "rd")-}},
            {{hls_stream_name_t2(arg, "wr")-}}{{"," if (not loop.last or not last_check)}}
        {% endif %}
    {% endfor %}
    {% for const in consts %}
            {{const.ptr}}{{"," if not loop.last}}
    {% endfor %});

#ifdef DEBUG_LOG
    printf("[KERNEL_DEBUG]|%s| Ending stencil kernel PE\n", __func__);
#endif
} 
{% endblock %}