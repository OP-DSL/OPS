{% extends "fortran/loop_host.F90.j2" %}

{% block prologue %}
{{super()}}
{% endblock %}

{% block global_decls %}
{% for arg in lh.args %}
    {% if arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_inc or arg is ops_min or arg is ops_max %}
    {{arg.typ | upper}}, DIMENSION(:), DEVICE, ALLOCATABLE :: reductionArrayDevice{{arg.id+1}}_{{lh.kernel}}
        {% elif (arg is ops_read and ((not arg.dim.isdigit()) or (arg.dim.isdigit and arg.dim|int != 1))) or arg is ops_write %}
    {{arg.typ | upper}}, DIMENSION(:), DEVICE, ALLOCATABLE :: opGblDat{{arg.id+1}}Device_{{lh.kernel}}
        {% endif %}

    {% endif %}
{% endfor %}
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if arg.dim == 1 %}
    INTEGER(KIND=4), CONSTANT :: xdim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}_{{lh.kernel}}_h = -1
            {% if lh.ndim == 1 %}
#define OPS_ACC{{arg.id+1}}(x) (x + 1)
            {% elif lh.ndim == 2 %}
#define OPS_ACC{{arg.id+1}}(x,y) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)) + 1)
            {% elif lh.ndim == 3 %}
    INTEGER(KIND=4), CONSTANT :: ydim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}_h = -1
#define OPS_ACC{{arg.id+1}}(x,y,z) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*(z)) + 1)
            {% endif %}
        {% elif arg.dim > 1 %}
    INTEGER(KIND=4), MANAGED :: multi_d{{arg.id+1}}
    INTEGER(KIND=4), CONSTANT :: xdim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}_{{lh.kernel}}_h = -1
            {% if soa_set %}
                {% if lh.ndim == 1 %}
#define OPS_ACC_MD{{arg.id+1}}(d,x) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(d-1)) + 1)
                {% elif lh.ndim == 2 %}
    INTEGER(KIND=4), CONSTANT :: ydim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}_h = -1
#define OPS_ACC_MD{{arg.id+1}}(d,x,y) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*(d-1)) + 1)
                {% elif lh.ndim == 3 %}
    INTEGER(KIND=4), CONSTANT :: ydim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}_h = -1
    INTEGER(KIND=4), CONSTANT :: zdim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: zdim{{arg.id+1}}_{{lh.kernel}}_h = -1
#define OPS_ACC_MD{{arg.id+1}}(d,x,y,z) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*(z)) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*zdim{{arg.id+1}}_{{lh.kernel}}*(d-1)) + 1)
                {% endif %}
            {% else %}
                {% if lh.ndim == 1 %}
#define OPS_ACC_MD{{arg.id+1}}(d,x) ((d) + ((x)*multi_d{{arg.id+1}}))
                {% elif lh.ndim == 2 %}
#define OPS_ACC_MD{{arg.id+1}}(d,x,y) ((d) + ((x)*multi_d{{arg.id+1}}) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)*multi_d{{arg.id+1}}))
                {% elif lh.ndim == 3 %}
    INTEGER(KIND=4), CONSTANT :: ydim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}_h = -1
#define OPS_ACC_MD{{arg.id+1}}(d,x,y,z) ((d) + ((x)*multi_d{{arg.id+1}}) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)*multi_d{{arg.id+1}}) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*(z)*multi_d{{arg.id+1}}))
                {% endif %}
            {% endif %}
        {% endif %}

    {% endif %}
{% endfor %}

{% endblock %}

{% block user_kernel_function %}
    CONTAINS

{% set reduct_1_dim = [False] %}
{% set reduct_m_dim = [False] %}
{% set reduct_type_real = [False] %}
{% set reduct_type_integer = [False] %}
{% if lh.has_reduction %}
{% for arg in lh.args %}
    {% if arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_inc or arg is ops_min or arg is ops_max %}
            {% if arg.dim == 1 %}
                {% if reduct_1_dim.append(True + reduct_1_dim.pop()) %} {% endif %}
            {% else %}
                {% if reduct_m_dim.append(True + reduct_m_dim.pop()) %} {% endif %}
            {% endif %}
            {% if arg is fortran_real_type %}
                {% if reduct_type_real.append(True + reduct_type_real.pop()) %} {% endif %}
            {% elif arg is fortran_integer_type %}
                {% if reduct_type_integer.append(True + reduct_type_integer.pop()) %} {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}
{% endif %}
{% if reduct_1_dim[0] and reduct_type_real[0] %}
{% include "fortran/cuda/cuda_reductions_real_1dim.F90.j2" %}

{% endif %}
{% if reduct_1_dim[0] and reduct_type_integer[0] %}
{% include "fortran/cuda/cuda_reductions_integer_1dim.F90.j2" %}

{% endif %}
{% if reduct_m_dim[0] and reduct_type_real[0] %}
{% include "fortran/cuda/cuda_reductions_real_mdim.F90.j2" %}

{% endif %}
{% if reduct_m_dim[0] and reduct_type_integer[0] %}
{% include "fortran/cuda/cuda_reductions_integer_mdim.F90.j2" %}

{% endif %}

!   =============
!   User function
!   =============
ATTRIBUTES (DEVICE) {{kernel_func}}

{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if arg.dim == 1 %}
#undef OPS_ACC{{arg.id+1}}
        {% elif arg.dim > 1 %}
#undef OPS_ACC_MD{{arg.id+1}}
        {% endif %}
    {% endif %}
{% endfor %}

{% endblock %}

{% block kernel_wrapper_func %}
!   ==================================================
!   CUDA kernel function - wrapper calling user kernel
!   ==================================================
ATTRIBUTES (GLOBAL) SUBROUTINE {{lh.kernel}}_wrap( &
{% for arg in lh.args %}
    {% if arg is ops_idx %}
  idx, &
    {% elif arg is ops_dat %}
  opsDat{{arg.id+1}}Local, &
    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
  opsGblDat{{arg.id+1}}Device, &
        {% else %}
  reductionArrayDevice{{arg.id+1}}, &
        {% endif %}
    {% endif %}
{% endfor %}
{% for arg in lh.args %}
    {% if arg is ops_dat %}
  dat{{arg.id+1}}_base, &
    {% endif %}
{% endfor %}
{% if lh.ndim == 1 %}
  size1 )
{% elif lh.ndim == 2 %}
  size1, size2 )
{% elif lh.ndim == 3 %}
  size1, size2, size3 )
{% endif %}

{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if arg is ops_read %}
    {{lh.dats[arg.dat_id].typ | upper}}, DEVICE, DIMENSION(*), INTENT(IN)    :: opsDat{{arg.id+1}}Local
        {% elif arg is ops_write %}
    {{lh.dats[arg.dat_id].typ | upper}}, DEVICE, DIMENSION(*), INTENT(OUT)   :: opsDat{{arg.id+1}}Local(*)
        {% elif arg is ops_rw or arg is ops_inc %}
    {{lh.dats[arg.dat_id].typ | upper}}, DEVICE, DIMENSION(*), INTENT(INOUT) :: opsDat{{arg.id+1}}Local(*)
        {% endif %}
    INTEGER(KIND=4) :: arg{{arg.id+1}}_offset

    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
    {{arg.typ | upper}}, VALUE :: opsGblDat{{arg.id+1}}Device
            {% else %}
    {{arg.typ | upper}}, DEVICE :: opsGblDat{{arg.id+1}}Device(:)
            {% endif %}
        {% elif arg is ops_inc or arg is ops_min or arg is ops_max %}
    {{arg.typ | upper}}, DIMENSION(:), DEVICE :: reductionArrayDevice{{arg.id+1}}
            {% if arg.dim == 1 %}
    {{arg.typ | upper}} :: opsGblDat{{arg.id+1}}Device
            {% else %}
    {{arg.typ | upper}}, DIMENSION({{arg.dim}}) :: opsGblDat{{arg.id+1}}Device
            {% endif %}
    {{arg.typ | upper}}, DIMENSION(0:*), SHARED :: sharedMem
        {% endif %}

    {% elif arg is ops_idx %}
    INTEGER(KIND=4), DIMENSION({{lh.ndim}}), INTENT(IN) :: idx
    INTEGER(KIND=4), DIMENSION({{lh.ndim}})             :: idx_local

    {% endif %}
{% endfor %}
{% for arg in lh.args %}
    {% if arg is ops_dat %}
    INTEGER(KIND=4), VALUE :: dat{{arg.id+1}}_base
    {% endif %}
{% endfor %}

{% if lh.ndim == 1 %}
    INTEGER(KIND=4), VALUE :: size1
    INTEGER(KIND=4)        :: n_x
{% elif lh.ndim == 2 %}
    INTEGER(KIND=4), VALUE :: size1, size2
    INTEGER(KIND=4)        :: n_x, n_y
{% elif lh.ndim == 3 %}
    INTEGER(KIND=4), VALUE :: size1, size2, size3
    INTEGER(KIND=4)        :: n_x, n_y, n_z
{% endif %}

{% if lh.ndim == 2 %}
    n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
{% elif lh.ndim == 3 %}
    n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
    n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
{% endif %}
    n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

{% if lh.arg_idx != -1 %}
    {% if lh.ndim == 2 %}
    idx_local(2) = idx(2) + n_y-1
    {% elif lh.ndim == 3 %}
    idx_local(3) = idx(3) + n_z-1
    idx_local(2) = idx(2) + n_y-1
    {% endif %}
    idx_local(1) = idx(1) + n_x-1
{% endif %}

{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if soa_set %}
            {% if lh.ndim == 1 %}
    arg{{arg.id+1}}_offset = ((n_x-1)*{{arg.strides[0] | int}})
            {% elif lh.ndim == 2 %}
    arg{{arg.id+1}}_offset = ((n_x-1)*{{arg.strides[0] | int}}) + ((n_y-1)*{{arg.strides[1] | int}}*xdim{{arg.id+1}}_{{lh.kernel}})
            {% elif lh.ndim == 3 %}
    arg{{arg.id+1}}_offset = ((n_x-1)*{{arg.strides[0] | int}}) + ((n_y-1)*{{arg.strides[1] | int}}*xdim{{arg.id+1}}_{{lh.kernel}}) + ((n_z-1)*{{arg.strides[2] | int}}*xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}})
            {% endif %}
        {% else %}
            {% if lh.ndim == 1 %}
    arg{{arg.id+1}}_offset = ((n_x-1)*{{arg.strides[0] | int}}*{{arg.dim}})
            {% elif lh.ndim == 2 %}
    arg{{arg.id+1}}_offset = ((n_x-1)*{{arg.strides[0] | int}}*{{arg.dim}}) + ((n_y-1)*{{arg.strides[1] | int}}*{{arg.dim}}*xdim{{arg.id+1}}_{{lh.kernel}})
            {% elif lh.ndim == 3 %}
    arg{{arg.id+1}}_offset = ((n_x-1)*{{arg.strides[0] | int}}*{{arg.dim}}) + ((n_y-1)*{{arg.strides[1] | int}}*{{arg.dim}}*xdim{{arg.id+1}}_{{lh.kernel}}) + ((n_z-1)*{{arg.strides[2] | int}}*{{arg.dim}}*xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}})
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}

{# Initialize local reduction variables depending on the operation #}
{% for arg in lh.args %}
    {% if arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_inc %}
    opsGblDat{{arg.id+1}}Device = 0.0_8
        {% elif arg is ops_min %}
    opsGblDat{{arg.id+1}}Device = HUGE(opsGblDat{{arg.id+1}}Device)
        {% elif arg is ops_max %}
    opsGblDat{{arg.id+1}}Device = -1.0_8*HUGE(opsGblDat{{arg.id+1}}Device)
        {% endif %}
    {% endif %}
{% endfor %}

{% if lh.ndim == 1 %}
    IF((n_x-1) < size1) THEN
{% elif lh.ndim == 2 %}
    IF((n_x-1) < size1 .AND. (n_y-1) < size2) THEN
{% elif lh.ndim == 3 %}
    IF((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN
{% endif %}

        CALL {{lh.kernel}}_gpu( &
{% for arg in lh.args %}
    {% if arg is ops_dat %}
                    opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base + arg{{arg.id+1}}_offset){% if not loop.last %},{% endif %} &
    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
                    opsGblDat{{arg.id+1}}Device{% if not loop.last %},{% endif %} &
            {% else %}
                    opsGblDat{{arg.id+1}}Device(1){% if not loop.last %},{% endif %} &
            {% endif %}
        {% elif arg is ops_inc or arg is ops_min or arg is ops_max %}{# ops_inc or ops_min or ops_max #}
            {% if arg.dim == 1 %}
                    opsGblDat{{arg.id+1}}Device{% if not loop.last %},{% endif %} &
            {% else %}
                    opsGblDat{{arg.id+1}}Device(1){% if not loop.last %},{% endif %} &
            {% endif %}
        {% endif %}
    {% elif arg is ops_idx %}
                    idx_local{% if not loop.last %},{% endif %} &
    {% endif %}
    {% if loop.last %}
               )
    {% endif %}
{% endfor %}

    END IF

{% if lh.has_reduction %}
!   =============================
!   Reduction across thread block
!   =============================
{% for arg in lh.args %}
    {% if arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_inc or arg is ops_min or arg is ops_max %}
            {% set reduct_op = [""] %}
            {% if arg is ops_inc %}
                {%if reduct_op.append(reduct_op.pop() + "0") %}{% endif %}
            {% elif arg is ops_min %}
                {%if reduct_op.append(reduct_op.pop() + "1") %}{% endif %}
            {% elif arg is ops_max %}
                {%if reduct_op.append(reduct_op.pop() + "2") %}{% endif %}
            {% endif %}
            {% if arg.dim == 1 %}
                {% if arg is fortran_real_type %}
    CALL ReductionReal8(sharedMem, reductionArrayDevice{{arg.id+1}}((blockIdx%z - 1)*gridDim%y*gridDim%x + (blockIdx%y - 1)*gridDim%x + (blockIdx%x - 1) + 1:), opsGblDat{{arg.id+1}}Device, {{reduct_op[0] | int}})
                {% elif arg is fortran_integer_type %}
    CALL ReductionInt4(sharedMem,  reductionArrayDevice{{arg.id+1}}((blockIdx%z - 1)*gridDim%y*gridDim%x + (blockIdx%y - 1)*gridDim%x + (blockIdx%x - 1) + 1:), opsGblDat{{arg.id+1}}Device, {{reduct_op[0] | int}})
                {% endif%}
            {% else %} {# multi-dim #}
                {% if arg is fortran_real_type %}
    CALL ReductionReal8Mdim(sharedMem, reductionArrayDevice{{arg.id+1}}(((blockIdx%z - 1)*gridDim%y*gridDim%x + (blockIdx%y - 1)*gridDim%x + (blockIdx%x - 1))*({{arg.dim}}) + 1:), opsGblDat{{arg.id+1}}Device, {{reduct_op[0] | int}}, {{arg.dim}})
                {% elif arg is fortran_integer_type %}
    CALL ReductionInt4Mdim(sharedMem,  reductionArrayDevice{{arg.id+1}}(((blockIdx%z - 1)*gridDim%y*gridDim%x + (blockIdx%y - 1)*gridDim%x + (blockIdx%x - 1))*({{arg.dim}}) + 1:), opsGblDat{{arg.id+1}}Device, {{reduct_op[0] | int}}, {{arg.dim}})
                {% endif%}
            {% endif %}

        {% endif %}
    {% endif %}
{% endfor %}
{% endif %}
END SUBROUTINE

{% endblock %}

{% block kernel_host_function %}
!   ===============
!   Host subroutine
!   ===============
#ifndef OPS_LAZY
ATTRIBUTES (HOST) SUBROUTINE {{lh.kernel}}_host( userSubroutine, block, dim, range, &
{% for arg in lh.args %}
    opsArg{{arg.id+1}}{% if not loop.last %},{% endif %} &
    {% if loop.last %}
    )
    {% endif %}
{% endfor %}

    CHARACTER(KIND=C_CHAR,LEN=*), INTENT(IN) :: userSubroutine
    TYPE(ops_block), INTENT(IN) :: block
    INTEGER(KIND=4), INTENT(IN) :: dim
    INTEGER(KIND=4), DIMENSION(2*dim), INTENT(IN) :: range

{% for arg in lh.args %}
    TYPE(ops_arg), INTENT(IN) :: opsArg{{arg.id+1}}
{% endfor %}

    TYPE(ops_arg), DIMENSION({{lh.args|length}}) :: opsArgArray

#else
ATTRIBUTES (HOST) SUBROUTINE {{lh.kernel}}_host_execute( descPtr )

    TYPE(ops_kernel_descriptor), INTENT(IN) :: descPtr
    TYPE(ops_block) :: block
    INTEGER(KIND=C_INT) :: dim
    INTEGER(KIND=C_INT), POINTER, DIMENSION(:) :: range
    CHARACTER(KIND=C_CHAR), POINTER, DIMENSION(:) :: userSubroutine
    TYPE(ops_arg), POINTER, DIMENSION(:) :: opsArgArray

{% for arg in lh.args %}
    TYPE(ops_arg) :: opsArg{{arg.id+1}}
{% endfor %}

#endif

{% for arg in lh.args %}
    {% if arg is ops_dat %}
    {{lh.dats[arg.dat_id].typ | upper}}, DIMENSION(:), DEVICE, POINTER :: opsDat{{arg.id+1}}Local
    INTEGER(KIND=4) :: opsDat{{arg.id+1}}Cardinality
    INTEGER(KIND=4), POINTER, DIMENSION(:)  :: dat{{arg.id+1}}_size
    INTEGER(KIND=4) :: dat{{arg.id+1}}_base
        {% if lh.ndim == 1 %}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}
        {% elif lh.ndim == 2 %}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}, ydim{{arg.id+1}}
        {% elif lh.ndim == 3 %}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}, ydim{{arg.id+1}}, zdim{{arg.id+1}}
        {% endif %}
    {% elif arg is ops_gbl or arg is ops_reduce %}
    INTEGER(KIND=4) :: opsDat{{arg.id+1}}Cardinality
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
    {{arg.typ | upper}}, DIMENSION(:), POINTER :: opsDat{{arg.id+1}}Host
            {% else %}
    {{arg.typ | upper}}, DIMENSION(:), DEVICE, POINTER :: opsDat{{arg.id+1}}Host
            {% endif %}
        {% elif arg is ops_inc or arg is ops_min or arg is ops_max %}
    {{arg.typ | upper}},  DIMENSION(:), POINTER :: opsDat{{arg.id+1}}Host
    {{arg.typ | upper}}, DIMENSION(:), ALLOCATABLE :: reductionArrayHost{{arg.id+1}}
    INTEGER(KIND=4) :: reductionCardinality{{arg.id+1}}
        {% endif %}
    {% endif %}

{% endfor %}
    REAL(KIND=8) :: t1__, t2__, t3__
    REAL(KIND=4) :: transfer_total, transfer
    INTEGER(KIND=4) :: istat

{% if lh.ndim == 1 %}
    INTEGER(KIND=4) :: x_size
{% elif lh.ndim == 2 %}
    INTEGER(KIND=4) :: x_size, y_size
{% elif lh.ndim == 3 %}
    INTEGER(KIND=4) :: x_size, y_size, z_size
{% endif %}
    INTEGER(KIND=4), DIMENSION({{lh.ndim}}) :: start_indx, end_indx
{% if lh.arg_idx != -1 %}
    INTEGER(KIND=4), DIMENSION({{lh.ndim}}), DEVICE :: idx
    INTEGER(KIND=4), DIMENSION({{lh.ndim}})         :: idx_h
{% endif %}
    INTEGER(KIND=4) :: n_indx
    INTEGER(KIND=4) :: i10
    INTEGER(KIND=4) :: i20
    INTEGER(KIND=4) :: blocksPerGrid
    INTEGER(KIND=4) :: nshared
    INTEGER(KIND=4) :: nthread

!   ================================
!   CUDA grid and thread block sizes
!   ================================
    TYPE(dim3) :: grid, tblock

    CHARACTER(LEN=40) :: kernelName

    kernelName = "{{lh.kernel}}"

#ifdef OPS_LAZY
!   ==========================
!   Set from kernel descriptor
!   ==========================
    dim = descPtr%dim
    CALL c_f_pointer(descPtr%range, range, (/2*dim/))
    CALL c_f_pointer(descPtr%name, userSubroutine, (/descPtr%name_len/))
    block%blockCptr = descPtr%block
    CALL c_f_pointer(block%blockCptr, block%blockPtr)
    CALL c_f_pointer(descPtr%args, opsArgArray, (/descPtr%nargs/))

{% for d in range(lh.args | length) %}
    opsArg{{d+1}} = opsArgArray({{d+1}})
{% endfor %}
#else
{% for d in range(lh.args | length) %}
    opsArgArray({{d+1}}) = opsArg{{d+1}}
{% endfor %}
#endif

    CALL setKernelTime({{kernel_idx}}, kernelName//c_null_char, 0.0_8, 0.0_8, 0.0_4, 1)
    CALL ops_timers_core(t1__)

#if defined(OPS_MPI) && !defined(OPS_LAZY)
    IF ( getRange(block, start_indx, end_indx, range) < 0 ) THEN
        RETURN
    END IF
#elif !defined(OPS_MPI)  && !defined(OPS_LAZY)
    DO n_indx = 1, {{lh.ndim}}
        start_indx(n_indx) = range(2*n_indx-1)
        end_indx  (n_indx) = range(2*n_indx)
    END DO
#else
    DO n_indx = 1, {{lh.ndim}}
        start_indx(n_indx) = range(2*n_indx-1) + 1
        end_indx  (n_indx) = range(2*n_indx)
    END DO
#endif

{% if lh.arg_idx != -1 %}
#ifdef OPS_MPI
    CALL getIdx(block, start_indx, idx_h)
    idx = idx_h
#else
{% for d in range(lh.ndim) %}
    idx({{d+1}}) = start_indx({{d+1}})
{% endfor %}
#endif
{% endif %}

    x_size = MAX(0, end_indx(1)-start_indx(1)+1)
{% if lh.ndim == 2 %}
    y_size = MAX(0, end_indx(2)-start_indx(2)+1)
{% elif lh.ndim == 3 %}
    y_size = MAX(0, end_indx(2)-start_indx(2)+1)
    z_size = MAX(0, end_indx(3)-start_indx(3)+1)
{% endif %}

{% if lh.isGblReadMDIM %}
    CALL ops_upload_gbls(opsArgArray, {{lh.args|length}})
{% endif %}

{% for arg in lh.args %}
    {% if arg is ops_dat %}
    CALL c_f_pointer(getDatSizeFromOpsArg(opsArg{{arg.id+1}}), dat{{arg.id+1}}_size, (/dim/))
        {% if lh.ndim == 1 %}
    xdim{{arg.id+1}} = dat{{arg.id+1}}_size(1)
    opsDat{{arg.id+1}}Cardinality = opsArg{{arg.id+1}}%dim * xdim{{arg.id+1}}
        {% elif lh.ndim == 2 %}
    xdim{{arg.id+1}} = dat{{arg.id+1}}_size(1)
    ydim{{arg.id+1}} = dat{{arg.id+1}}_size(2)
    opsDat{{arg.id+1}}Cardinality = opsArg{{arg.id+1}}%dim * xdim{{arg.id+1}} * ydim{{arg.id+1}}
        {% elif lh.ndim == 3 %}
    xdim{{arg.id+1}} = dat{{arg.id+1}}_size(1)
    ydim{{arg.id+1}} = dat{{arg.id+1}}_size(2)
    zdim{{arg.id+1}} = dat{{arg.id+1}}_size(3)
    opsDat{{arg.id+1}}Cardinality = opsArg{{arg.id+1}}%dim * xdim{{arg.id+1}} * ydim{{arg.id+1}} * zdim{{arg.id+1}}
        {% endif %}
        {% if arg.dim > 1 %}
    multi_d{{arg.id+1}} = getDatDimFromOpsArg(opsArg{{arg.id+1}}) ! dimension of dat
    dat{{arg.id+1}}_base = getDatBaseFromOpsArg{{lh.ndim}}D(opsArg{{arg.id+1}}, start_indx, multi_d{{arg.id+1}})
        {% else %}
    dat{{arg.id+1}}_base = getDatBaseFromOpsArg{{lh.ndim}}D(opsArg{{arg.id+1}}, start_indx, 1)
        {% endif %}
    CALL c_f_pointer(opsArg{{arg.id+1}}%data_d, opsDat{{arg.id+1}}Local, (/opsDat{{arg.id+1}}Cardinality/))
    {% elif arg is ops_gbl or arg is ops_reduce %}
    opsDat{{arg.id+1}}Cardinality = opsArg{{arg.id+1}}%dim
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
    CALL c_f_pointer(opsArg{{arg.id+1}}%data, opsDat{{arg.id+1}}Host, (/opsDat{{arg.id+1}}Cardinality/))
            {% else %}
    CALL c_f_pointer(opsArgArray({{arg.id+1}})%data_d, opsDat{{arg.id+1}}Host, (/opsDat{{arg.id+1}}Cardinality/))
            {% endif %}
        {% elif arg is ops_inc or arg is ops_min or arg is ops_max %}
    CALL c_f_pointer(getReductionPtrFromOpsArg(opsArg{{arg.id+1}},block), opsDat{{arg.id+1}}Host, (/opsDat{{arg.id+1}}Cardinality/))
        {% endif %}
    {% endif %}

{% endfor %}
{% set if_condition = [""] %}
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if arg.dim == 1 %}
            {%if if_condition.append(if_condition.pop() + "         (xdim"+(arg.id+1)|string+" .NE. xdim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
            {% if lh.ndim == 3 %}
                {%if if_condition.append(if_condition.pop() + "         (ydim"+(arg.id+1)|string+" .NE. ydim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
            {% endif %}
        {% else %}
            {%if if_condition.append(if_condition.pop() + "         (xdim"+(arg.id+1)|string+" .NE. xdim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
            {% if soa_set %}
                {% if lh.ndim == 2 %}
                    {%if if_condition.append(if_condition.pop() + "         (ydim"+(arg.id+1)|string+" .NE. ydim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
                {% elif lh.ndim == 3 %}
                    {%if if_condition.append(if_condition.pop() + "         (ydim"+(arg.id+1)|string+" .NE. ydim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
                    {%if if_condition.append(if_condition.pop() + "         (zdim"+(arg.id+1)|string+" .NE. zdim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
                {% endif %}
            {% else %}
                {% if lh.ndim == 3 %}
                    {%if if_condition.append(if_condition.pop() + "         (ydim"+(arg.id+1)|string+" .NE. ydim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}

    IF (&
{{if_condition[0][:-8]}} &
       ) THEN
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if arg.dim == 1 %}
            xdim{{arg.id+1}}_{{lh.kernel}} = xdim{{arg.id+1}}
            xdim{{arg.id+1}}_{{lh.kernel}}_h = xdim{{arg.id+1}}
            {% if lh.ndim == 3 %}
            ydim{{arg.id+1}}_{{lh.kernel}} = ydim{{arg.id+1}}
            ydim{{arg.id+1}}_{{lh.kernel}}_h = ydim{{arg.id+1}}
            {% endif %}
        {% else %}
            xdim{{arg.id+1}}_{{lh.kernel}} = xdim{{arg.id+1}}
            xdim{{arg.id+1}}_{{lh.kernel}}_h = xdim{{arg.id+1}}
            {% if soa_set %}
                {% if lh.ndim == 2 %}
            ydim{{arg.id+1}}_{{lh.kernel}} = ydim{{arg.id+1}}
            ydim{{arg.id+1}}_{{lh.kernel}}_h = ydim{{arg.id+1}}
                {% elif lh.ndim == 3 %}
            ydim{{arg.id+1}}_{{lh.kernel}} = ydim{{arg.id+1}}
            ydim{{arg.id+1}}_{{lh.kernel}}_h = ydim{{arg.id+1}}
            zdim{{arg.id+1}}_{{lh.kernel}} = zdim{{arg.id+1}}
            zdim{{arg.id+1}}_{{lh.kernel}}_h = zdim{{arg.id+1}}
                {% endif %}
            {% else %}
                {% if lh.ndim == 3 %}
            ydim{{arg.id+1}}_{{lh.kernel}} = ydim{{arg.id+1}}
            ydim{{arg.id+1}}_{{lh.kernel}}_h = ydim{{arg.id+1}}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}
    END IF

{% if lh.ndim == 1 %}
    grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, 1, 1)
{% elif lh.ndim == 2 %}
    grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, 1)
{% elif lh.ndim == 3 %}
    grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
{% endif %}
{% if lh.ndim > 1 %}
    tblock = dim3(getOPS_block_size_x(), getOPS_block_size_y(), 1)
{% else %}
    tblock = dim3(getOPS_block_size_x(), 1, 1)
{% endif %}

{%if lh.has_reduction %}
!   ====================================================
!   Reduction variables and shared memory for reductions
!   ====================================================
    nshared = 0
    {% if lh.ndim == 1 %}
    nthread = getOPS_block_size_x()
    blocksPerGrid = ((x_size-1)/getOPS_block_size_x()+ 1) * 1 * 1
    {% elif lh.ndim == 2 %}
    nthread = getOPS_block_size_x()*getOPS_block_size_y()
    blocksPerGrid = ((x_size-1)/getOPS_block_size_x()+ 1) * ((y_size-1)/getOPS_block_size_y() + 1) * 1
    {% elif lh.ndim == 3 %}
    nthread = getOPS_block_size_x()*getOPS_block_size_y()
    blocksPerGrid = ((x_size-1)/getOPS_block_size_x()+ 1) * ((y_size-1)/getOPS_block_size_y() + 1) * z_size
    {% endif %}

    {% for arg in lh.args %}
        {% if arg is ops_gbl or arg is ops_reduce %}
            {% if arg is ops_inc or arg is ops_min or arg is ops_max %}
                {% if arg is fortran_real_type %}
    nshared = MAX(nshared, 8*{{arg.dim}}*nthread)
                {% elif arg is fortran_integer_type %}
    nshared = MAX(nshared, 4*{{arg.dim}}*nthread)
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endif %}

{% for arg in lh.args %}
    {% if arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_inc or arg is ops_min or arg is ops_max %}
    reductionCardinality{{arg.id+1}} = blocksPerGrid * 1
    ALLOCATE( reductionArrayHost{{arg.id+1}}(reductionCardinality{{arg.id+1}}*({{arg.dim}})) )
    IF ( .NOT. ALLOCATED(reductionArrayDevice{{arg.id+1}}_{{lh.kernel}}) ) THEN
        ALLOCATE( reductionArrayDevice{{arg.id+1}}_{{lh.kernel}}(reductionCardinality{{arg.id+1}}*({{arg.dim}})) )
    END IF

    DO i10 = 0, reductionCardinality{{arg.id+1}}-1
            {% if arg.dim == 1 %}
                {% if arg is ops_inc %}
        reductionArrayHost{{arg.id+1}}(i10+1) = 0.0
                {% elif arg is ops_min %}
        reductionArrayHost{{arg.id+1}}(i10+1) = HUGE(reductionArrayHost{{arg.id+1}}(1))
                {% elif arg is ops_max %}
        reductionArrayHost{{arg.id+1}}(i10+1) = -1.0*HUGE(reductionArrayHost{{arg.id+1}}(1))
                {% endif %}
            {% else %}
                {% if arg is ops_inc %}
        reductionArrayHost{{arg.id+1}}(i10*({{arg.dim}})+1 : i10*({{arg.dim}})+({{arg.dim}})) = 0.0
                {% elif arg is ops_min %}
        reductionArrayHost{{arg.id+1}}(i10*({{arg.dim}})+1 : i10*({{arg.dim}})+({{arg.dim}})) = HUGE(reductionArrayHost{{arg.id+1}}(1))
                {% elif arg is ops_max %}
        reductionArrayHost{{arg.id+1}}(i10*({{arg.dim}})+1 : i10*({{arg.dim}})+({{arg.dim}})) = -1.0*HUGE(reductionArrayHost{{arg.id+1}}(1))
                {% endif %}
            {% endif %}
    END DO

    reductionArrayDevice{{arg.id+1}}_{{lh.kernel}} = reductionArrayHost{{arg.id+1}}

        {% endif %}
    {% endif %}
{% endfor %}
!   ==============
!   Halo exchanges
!   ==============
#ifndef OPS_LAZY
    CALL ops_H_D_exchanges_device(opsArgArray, {{lh.args|length}})
    CALL ops_halo_exchanges(opsArgArray, {{lh.args|length}}, range)
    CALL ops_H_D_exchanges_device(opsArgArray, {{lh.args|length}})
#endif

    CALL ops_timers_core(t2__)

{% if lh.has_reduction %}
    CALL {{lh.kernel}}_wrap <<<grid,tblock,nshared>>> (&
{% else %}
    CALL {{lh.kernel}}_wrap <<<grid,tblock>>> (&
{% endif %}
{% for arg in lh.args %}
    {% if arg is ops_idx %}
                                    idx, &
    {% elif arg is ops_dat %}
                                    opsDat{{arg.id+1}}Local, &
    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
                                    opsDat{{arg.id+1}}Host(1), &
            {% else %}
                                    opsDat{{arg.id+1}}Host, &
            {% endif %}
        {% elif arg is ops_inc or arg is ops_min or arg is ops_max %}
                                    reductionArrayDevice{{arg.id+1}}_{{lh.kernel}}, &
        {% endif %}
    {% endif %}
{% endfor %}
{% for arg in lh.args %}
    {% if arg is ops_dat %}
                                    dat{{arg.id+1}}_base, &
    {% endif %}
{% endfor %}
{% if lh.ndim == 1 %}
                                    x_size )
{% elif lh.ndim == 2 %}
                                    x_size, y_size )
{% elif lh.ndim == 3 %}
                                    x_size, y_size, z_size )
{% endif %}

{# Complete Reduction Operation by moving data onto host and reducing over blocks #}
{% if lh.has_reduction %}
    {% for arg in lh.args %}
        {% if arg is ops_gbl or arg is ops_reduce %}
            {% if arg is ops_inc or arg is ops_min or arg is ops_max %}
    reductionArrayHost{{arg.id+1}} = reductionArrayDevice{{arg.id+1}}_{{lh.kernel}}
    DO i10 = 0, reductionCardinality{{arg.id+1}}-1
                    {% if arg.dim == 1 %}
                        {% if arg is ops_inc %}
        opsDat{{arg.id+1}}Host = opsDat{{arg.id+1}}Host + reductionArrayHost{{arg.id+1}}(i10+1)
                        {% elif arg is ops_min %}
        opsDat{{arg.id+1}}Host = MIN(opsDat{{arg.id+1}}Host, reductionArrayHost{{arg.id+1}}(i10+1))
                        {% elif arg is ops_max %}
        opsDat{{arg.id+1}}Host = MAX(opsDat{{arg.id+1}}Host, reductionArrayHost{{arg.id+1}}(i10+1))
                        {% endif %}
                    {% else %}
                        {% if arg is ops_inc %}
        opsDat{{arg.id+1}}Host(1:{{arg.dim}}) = opsDat{{arg.id+1}}Host(1:{{arg.dim}}) + reductionArrayHost{{arg.id+1}}(i10*({{arg.dim}})+1 : i10*({{arg.dim}})+({{arg.dim}}))
                        {% else %}
        DO i20 = 1, {{arg.dim}}
                            {% if arg is ops_min %}
            opsDat{{arg.id+1}}Host(i20) = MIN(opsDat{{arg.id+1}}Host(i20), reductionArrayHost{{arg.id+1}}(i10*({{arg.dim}}) + i20))
                            {% elif arg is ops_max %}
            opsDat{{arg.id+1}}Host(i20) = MAX(opsDat{{arg.id+1}}Host(i20), reductionArrayHost{{arg.id+1}}(i10*({{arg.dim}}) + i20))
                            {% endif %}
        END DO
                        {% endif %}
                    {% endif %}
    END DO

    DEALLOCATE( reductionArrayHost{{arg.id+1}} )

            {% endif %}
        {% endif %}
    {% endfor %}
{% endif %}
    istat = cudaDeviceSynchronize()
    call ops_timers_core(t3__)

#ifndef OPS_LAZY
    CALL ops_set_dirtybit_device(opsArgArray, {{lh.args|length}})
{% for arg in lh.args %}
    {% if arg is ops_dat and (arg is ops_write or arg is ops_rw or arg is ops_inc) %}
    CALL ops_set_halo_dirtybit3(opsArg{{arg.id+1}}, range)
    {% endif %}
{% endfor %}
#endif

!   ========================
!   Timing and data movement
!   ========================
    transfer_total = 0.0_4
{% for arg in lh.args %}
    {% if arg is ops_dat %}
    CALL ops_compute_transfer({{lh.ndim}}, start_indx, end_indx, opsArg{{arg.id+1}}, transfer)
    transfer_total = transfer_total + transfer
    {% endif %}
{% endfor %}

    CALL setKernelTime({{kernel_idx}}, kernelName//c_null_char, t3__-t2__, t2__-t1__, transfer_total, 0)

END SUBROUTINE

{% endblock %}

{% block kernel_descriptor_lazy_call %}
#ifdef OPS_LAZY
ATTRIBUTES (HOST) SUBROUTINE {{lh.kernel}}_host( userSubroutine, block, dim, range, &
{% for arg in lh.args %}
    opsArg{{arg.id+1}}{% if not loop.last %},{% endif %} &
    {% if loop.last %}
    )
    {% endif %}
{% endfor %}

    CHARACTER(KIND=C_CHAR,LEN=*), INTENT(IN), TARGET :: userSubroutine
    TYPE(ops_block), INTENT(IN) :: block
    INTEGER(KIND=4), INTENT(IN) :: dim
    INTEGER(KIND=4), DIMENSION(2*dim), INTENT(INOUT), TARGET :: range
    INTEGER(KIND=4), DIMENSION(2*dim), TARGET :: range_tmp

{% for arg in lh.args %}
    TYPE(ops_arg), INTENT(IN) :: opsArg{{arg.id+1}}
{% endfor %}

    TYPE(ops_arg), DIMENSION({{lh.args|length}}), TARGET :: opsArgArray
    INTEGER(KIND=4) :: n_indx
    CHARACTER(LEN=40) :: namelit

    namelit = "{{lh.kernel}}"

{% for d in range(lh.args|length) %}
    opsArgArray({{d+1}}) = opsArg{{d+1}}
{% endfor %}

    DO n_indx = 1, {{lh.ndim}}
        range_tmp(2*n_indx-1) = range(2*n_indx-1)-1
        range_tmp(2*n_indx)   = range(2*n_indx)
    END DO

    CALL create_kerneldesc_and_enque(namelit//c_null_char, c_loc(opsArgArray), &
                                    {{lh.args|length}}, {{kernel_idx}}, dim, 1, c_loc(range_tmp), &
                                    block%blockCptr, c_funloc({{lh.kernel}}_host_execute))

END SUBROUTINE
#endif

{% endblock %}

{% block epilogue %}
END MODULE {{lh.kernel | upper}}_MODULE
{% endblock %}

