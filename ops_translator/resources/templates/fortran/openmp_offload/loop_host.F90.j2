{% extends "fortran/loop_host.F90.j2" %}

{% block prologue %}
{{super()}}
{% endblock %}

{% block global_decls %}
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if arg.dim == 1 %}
!$OMP DECLARE TARGET(xdim{{arg.id+1}}_{{lh.kernel}})
    INTEGER(KIND=4) :: xdim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}_{{lh.kernel}}_h = -1
            {% if lh.ndim == 1 %}
#define OPS_ACC{{arg.id+1}}(x) (x + 1)
            {% elif lh.ndim == 2 %}
#define OPS_ACC{{arg.id+1}}(x,y) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)) + 1)
            {% elif lh.ndim == 3 %}
!$OMP DECLARE TARGET(ydim{{arg.id+1}}_{{lh.kernel}})
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}_h = -1
#define OPS_ACC{{arg.id+1}}(x,y,z) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*(z)) + 1)
            {% endif %}
        {% elif arg.dim > 1 %}
!$OMP DECLARE TARGET(multi_d{{arg.id+1}})
    INTEGER(KIND=4) :: multi_d{{arg.id+1}}
!$OMP DECLARE TARGET(xdim{{arg.id+1}}_{{lh.kernel}})
    INTEGER(KIND=4) :: xdim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}_{{lh.kernel}}_h = -1
            {% if soa_set %}
                {% if lh.ndim == 1 %}
#define OPS_ACC_MD{{arg.id+1}}(d,x) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(d-1)) + 1)
                {% elif lh.ndim == 2 %}
!$OMP DECLARE TARGET(ydim{{arg.id+1}}_{{lh.kernel}})
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}_h = -1
#define OPS_ACC_MD{{arg.id+1}}(d,x,y) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*(d-1)) + 1)
                {% elif lh.ndim == 3 %}
!$OMP DECLARE TARGET(ydim{{arg.id+1}}_{{lh.kernel}})
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}_h = -1
!$OMP DECLARE TARGET(zdim{{arg.id+1}}_{{lh.kernel}})
    INTEGER(KIND=4) :: zdim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: zdim{{arg.id+1}}_{{lh.kernel}}_h = -1
#define OPS_ACC_MD{{arg.id+1}}(d,x,y,z) ((x) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*(z)) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*zdim{{arg.id+1}}_{{lh.kernel}}*(d-1)) + 1)
                {% endif %}
            {% else %}
                {% if lh.ndim == 1 %}
#define OPS_ACC_MD{{arg.id+1}}(d,x) ((d) + ((x)*multi_d{{arg.id+1}}))
                {% elif lh.ndim == 2 %}
#define OPS_ACC_MD{{arg.id+1}}(d,x,y) ((d) + ((x)*multi_d{{arg.id+1}}) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)*multi_d{{arg.id+1}}))
                {% elif lh.ndim == 3 %}
!$OMP DECLARE TARGET(ydim{{arg.id+1}}_{{lh.kernel}})
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}
    INTEGER(KIND=4) :: ydim{{arg.id+1}}_{{lh.kernel}}_h = -1
#define OPS_ACC_MD{{arg.id+1}}(d,x,y,z) ((d) + ((x)*multi_d{{arg.id+1}}) + (xdim{{arg.id+1}}_{{lh.kernel}}*(y)*multi_d{{arg.id+1}}) + (xdim{{arg.id+1}}_{{lh.kernel}}*ydim{{arg.id+1}}_{{lh.kernel}}*(z)*multi_d{{arg.id+1}}))
                {% endif %}
            {% endif %}
        {% endif %}

    {% endif %}
{% endfor %}
{% endblock %}

{% block user_kernel_function %}
    CONTAINS

!   =============
!   User function
!   =============

{{kernel_func}}

{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if arg.dim == 1 %}
#undef OPS_ACC{{arg.id+1}}
        {% elif arg.dim > 1 %}
#undef OPS_ACC_MD{{arg.id+1}}
        {% endif %}
    {% endif %}
{% endfor %}

{% endblock %}

{% block kernel_wrapper_func %}
SUBROUTINE {{lh.kernel}}_wrap( &
{% for arg in lh.args %}
    {% if arg is ops_idx %}
    idx, &
    {% elif arg is ops_dat %}
    opsDat{{arg.id+1}}Local, &
    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
    opsGblDat{{arg.id+1}}Device, &
        {% else %}
    opsDat{{arg.id+1}}Local, &
        {% endif %}
    {% endif %}
{% endfor %}
{% for arg in lh.args %}
    {% if not arg is ops_idx %}
    dat{{arg.id+1}}_base, &
    {% endif %}
{% endfor %}
{% for arg in lh.args %}
    {% if  arg is ops_dat or arg is ops_gbl or arg is ops_reduce %}
    dat{{arg.id+1}}_dim, &
    {% endif %}
{% endfor %}
    start_indx, &
    end_indx )

{% for arg in lh.args %}
    {% if arg is ops_dat %}
    INTEGER(KIND=4), VALUE :: dat{{arg.id+1}}_dim
        {% if arg is ops_read %}
    {{lh.dats[arg.dat_id].typ | upper}}, DIMENSION(dat{{arg.id+1}}_dim), INTENT(IN) :: opsDat{{arg.id+1}}Local
        {% elif arg is ops_write %}
    {{lh.dats[arg.dat_id].typ | upper}}, DIMENSION(dat{{arg.id+1}}_dim), INTENT(OUT) :: opsDat{{arg.id+1}}Local
        {% elif arg is ops_rw or arg is ops_inc %}
    {{lh.dats[arg.dat_id].typ | upper}}, DIMENSION(dat{{arg.id+1}}_dim), INTENT(INOUT) :: opsDat{{arg.id+1}}Local
        {% endif %}
    INTEGER(KIND=4), VALUE :: dat{{arg.id+1}}_base

    {% elif arg is ops_gbl or arg is ops_reduce %}
    INTEGER(KIND=4), VALUE :: dat{{arg.id+1}}_dim
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
    {{arg.typ | upper}}, VALUE ::  opsGblDat{{arg.id+1}}Device
            {% else %}
    {{arg.typ | upper}}, DIMENSION(dat{{arg.id+1}}_dim), INTENT(IN) :: opsGblDat{{arg.id+1}}Device
            {% endif %}
        {% elif arg is ops_write %}
    {{arg.typ | upper}}, DIMENSION(dat{{arg.id+1}}_dim), INTENT(OUT) :: opsDat{{arg.id+1}}Local
        {% elif arg is ops_inc or arg is ops_min or arg is ops_max %}
    {{arg.typ | upper}}, DIMENSION({{arg.dim}}), INTENT(INOUT) :: opsDat{{arg.id+1}}Local
            {% if arg.dim == 1 %}
    {{arg.typ | upper}} :: {{args_list[arg.id]}}
            {% endif %}
        {% endif %}
    INTEGER(KIND=4), INTENT(IN) :: dat{{arg.id+1}}_base

    {% elif arg is ops_idx %}
    INTEGER(KIND=4), DIMENSION({{lh.ndim}}), INTENT(IN) :: idx
    INTEGER(KIND=4), DIMENSION({{lh.ndim}})             :: idx_local

    {% endif %}
{% endfor %}
    INTEGER(KIND=4), DIMENSION({{lh.ndim}}), INTENT(IN) :: start_indx, end_indx

{% if lh.ndim == 1 %}
    INTEGER(KIND=4) :: n_x
{% elif lh.ndim == 2 %}
    INTEGER(KIND=4) :: n_x, n_y
{% elif lh.ndim == 3 %}
    INTEGER(KIND=4) :: n_x, n_y, n_z
{% endif %}

{# Initialize local reduction variables depending on the operation #}
{% for arg in lh.args %}
    {% if arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_inc or arg is ops_min or arg is ops_max %}
            {% if arg.dim == 1 %}
                {% if arg is ops_inc %}
    {{args_list[arg.id]}} = 0.0_8
                {% elif arg is ops_min %}
    {{args_list[arg.id]}} = HUGE({{args_list[arg.id]}})
                {% elif arg is ops_max %}
    {{args_list[arg.id]}} = -1.0_8*HUGE({{args_list[arg.id]}})
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}

{% set reduct_line = [""] %}
{% for arg in lh.args %}
    {% if arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_inc %}
            {% if arg.dim == 1 %}
                {%if reduct_line.append(reduct_line.pop() + " REDUCTION(+:" + args_list[arg.id] + ") ") %}{% endif %}
            {% else %}
                {%if reduct_line.append(reduct_line.pop() + " REDUCTION(+:opsDat" + (arg.id+1)|string + "Local) ") %}{% endif %}
            {% endif %}
        {% elif arg is ops_min %}
            {% if arg.dim == 1 %}
                {%if reduct_line.append(reduct_line.pop() + " REDUCTION(MIN:" + args_list[arg.id] + ") ") %}{% endif %}
            {% else %}
                {%if reduct_line.append(reduct_line.pop() + " REDUCTION(MIN:opsDat" + (arg.id+1)|string + "Local) ") %}{% endif %}
            {% endif %}
        {% elif arg is ops_max %}
            {% if arg.dim == 1 %}
                {%if reduct_line.append(reduct_line.pop() + " REDUCTION(MAX:" + args_list[arg.id] + ") ") %}{% endif %}
            {% else %}
                {%if reduct_line.append(reduct_line.pop() + " REDUCTION(MAX:opsDat" + (arg.id+1)|string + "Local) ") %}{% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}
{% set private_idx = [""] %}
{% if lh.arg_idx != -1 %}
    {%if private_idx.append(private_idx.pop() + ",idx_local") %}{% endif %}
{% endif %}

{% if lh.arg_idx != -1 %}
!$OMP TARGET DATA MAP(TO:idx_local(1:{{lh.ndim}}))
{% endif %}
{% if lh.ndim == 1 %}
{# !$OMP TARGET TEAMS DISTRIBUTE PARALLEL DO PRIVATE(n_x{{private_idx[0]}}){{reduct_line[0]}} #}
!$OMP TARGET TEAMS LOOP PRIVATE(n_x{{private_idx[0]}}){{reduct_line[0]}}
    DO n_x = 1, end_indx(1)-start_indx(1)+1
{% elif lh.ndim == 2 %}
{% if lh.has_reductionMDIM %}
{# !$OMP TARGET TEAMS DISTRIBUTE PARALLEL DO PRIVATE(n_x,n_y{{private_idx[0]}}){{reduct_line[0]}} #}
!$OMP TARGET TEAMS LOOP PRIVATE(n_x,n_y{{private_idx[0]}}){{reduct_line[0]}}
{% else %}
{# !$OMP TARGET TEAMS DISTRIBUTE PARALLEL DO COLLAPSE(2) PRIVATE(n_x,n_y{{private_idx[0]}}){{reduct_line[0]}} #}
!$OMP TARGET TEAMS LOOP COLLAPSE(2) PRIVATE(n_x,n_y{{private_idx[0]}}){{reduct_line[0]}}
{% endif %}
    DO n_y = 1, end_indx(2)-start_indx(2)+1
        DO n_x = 1, end_indx(1)-start_indx(1)+1
{% elif lh.ndim == 3 %}
{% if lh.has_reductionMDIM %}
{# !$OMP TARGET TEAMS DISTRIBUTE PARALLEL DO PRIVATE(n_x,n_y,n_z{{private_idx[0]}}){{reduct_line[0]}} #}
!$OMP TARGET TEAMS LOOP PRIVATE(n_x,n_y,n_z{{private_idx[0]}}){{reduct_line[0]}}
{% else %}
{# !$OMP TARGET TEAMS DISTRIBUTE PARALLEL DO COLLAPSE(3) PRIVATE(n_x,n_y,n_z{{private_idx[0]}}){{reduct_line[0]}} #}
!$OMP TARGET TEAMS LOOP COLLAPSE(3) PRIVATE(n_x,n_y,n_z{{private_idx[0]}}){{reduct_line[0]}}
{% endif %}
    DO n_z = 1, end_indx(3)-start_indx(3)+1
        DO n_y = 1, end_indx(2)-start_indx(2)+1
            DO n_x = 1, end_indx(1)-start_indx(1)+1
{% endif %}

{% if lh.arg_idx != -1 %}
    {% if lh.ndim == 1 %}
        idx_local = [idx(1)+n_x-1]
    {% elif lh.ndim == 2 %}
        idx_local = [idx(1)+n_x-1,idx(2)+n_y-1]
    {% elif lh.ndim == 3 %}
        idx_local = [idx(1)+n_x-1,idx(2)+n_y-1,idx(3) + n_z - 1]
    {% endif %}
{% endif %}

                CALL {{lh.kernel}}( &
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if soa_set %}
            {% if lh.ndim == 1 %}
                opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base + ((n_x-1)*{{arg.strides[0] | int}})){% if not loop.last %},{% endif %} &
            {% elif lh.ndim == 2 %}
                opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base + ((n_x-1)*{{arg.strides[0] | int}}) + ((n_y-1)*xdim{{arg.id+1}}_{{lh.kernel}}*{{arg.strides[1] | int}})){% if not loop.last %},{% endif %} &
            {% elif lh.ndim == 3 %}
                opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base + ((n_x-1)*{{arg.strides[0] | int}}) + ((n_y-1)*xdim{{arg.id+1}}_{{lh.kernel}}*{{arg.strides[1] | int}}) + ((n_z-1)*ydim{{arg.id+1}}_{{lh.kernel}}*xdim{{arg.id+1}}_{{lh.kernel}}*{{arg.strides[2] | int}})){% if not loop.last %},{% endif %} &
            {% endif %}
        {% else %}
            {% if lh.ndim == 1 %}
                opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base + ((n_x-1)*{{arg.strides[0] | int}}*{{arg.dim}})){% if not loop.last %},{% endif %} &
            {% elif lh.ndim == 2 %}
                opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base + ((n_x-1)*{{arg.strides[0] | int}}*{{arg.dim}}) + ((n_y-1)*xdim{{arg.id+1}}_{{lh.kernel}}*{{arg.strides[1] | int}}*{{arg.dim}})){% if not loop.last %},{% endif %} &
            {% elif lh.ndim == 3 %}
                opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base + ((n_x-1)*{{arg.strides[0] | int}}*{{arg.dim}}) + ((n_y-1)*xdim{{arg.id+1}}_{{lh.kernel}}*{{arg.strides[1] | int}}*{{arg.dim}}) + ((n_z-1)*ydim{{arg.id+1}}_{{lh.kernel}}*xdim{{arg.id+1}}_{{lh.kernel}}*{{arg.strides[2] | int}}*{{arg.dim}})){% if not loop.last %},{% endif %} &
            {% endif %}
        {% endif %}
    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
                opsGblDat{{arg.id+1}}Device{% if not loop.last %},{% endif %} &
            {% else %}
                opsGblDat{{arg.id+1}}Device(1){% if not loop.last %},{% endif %} &
            {% endif %}
        {% elif arg is ops_inc or arg is ops_min or arg is ops_max %}
            {% if arg.dim == 1 %}
                {{args_list[arg.id]}}{% if not loop.last %},{% endif %} &
            {% else %}
                opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base){% if not loop.last %},{% endif %} &
            {% endif %}
        {% endif %}
    {% elif arg is ops_idx %}
                idx_local{% if not loop.last %},{% endif %} &
    {% endif %}
    {% if loop.last %}
               )
    {% endif %}
{% endfor %}

{% if lh.ndim == 1 %}
    END DO
{# !$OMP END TARGET TEAMS DISTRIBUTE PARALLEL DO #}
!$OMP END TARGET TEAMS LOOP
{% elif lh.ndim == 2 %}
        END DO
    END DO
{# !$OMP END TARGET TEAMS DISTRIBUTE PARALLEL DO #}
!$OMP END TARGET TEAMS LOOP
{% elif lh.ndim == 3 %}
            END DO
        END DO
    END DO
{# !$OMP END TARGET TEAMS DISTRIBUTE PARALLEL DO #}
!$OMP END TARGET TEAMS LOOP
{% endif %}
{% if lh.arg_idx != -1 %}
!$OMP END TARGET DATA
{% endif %}

{# Add statements to copy back reduction value calculated in kernel #}
{% for arg in lh.args %}
    {% if arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_inc or arg is ops_min or arg is ops_max %}
            {% if arg.dim == 1 %}
                {% if arg is ops_inc %}
    opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base) = opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base) + {{args_list[arg.id]}}

                {% elif arg is ops_min %}
    opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base) = MIN(opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base), {{args_list[arg.id]}})

                {% elif arg is ops_max %}
    opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base) = MAX(opsDat{{arg.id+1}}Local(dat{{arg.id+1}}_base), {{args_list[arg.id]}})

                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}
END SUBROUTINE

{% endblock %}

{% block kernel_host_function %}
!   ===============
!   Host subroutine
!   ===============
#ifndef OPS_LAZY
SUBROUTINE {{lh.kernel}}_host( userSubroutine, block, dim, range, &
{% for arg in lh.args %}
    opsArg{{arg.id+1}}{% if not loop.last %},{% endif %} &
    {% if loop.last %}
    )
    {% endif %}
{% endfor %}

    CHARACTER(KIND=C_CHAR,LEN=*), INTENT(IN) :: userSubroutine
    TYPE(ops_block), INTENT(IN) :: block
    INTEGER(KIND=4), INTENT(IN) :: dim
    INTEGER(KIND=4), DIMENSION(2*dim), INTENT(IN) :: range

{% for arg in lh.args %}
    TYPE(ops_arg), INTENT(IN) :: opsArg{{arg.id+1}}
{% endfor %}

    TYPE(ops_arg), DIMENSION({{lh.args|length}}) :: opsArgArray

#else
SUBROUTINE {{lh.kernel}}_host_execute( descPtr )

    TYPE(ops_kernel_descriptor), INTENT(IN) :: descPtr
    TYPE(ops_block) :: block
    INTEGER(KIND=C_INT) :: dim
    INTEGER(KIND=C_INT), POINTER, DIMENSION(:) :: range
    CHARACTER(KIND=C_CHAR), POINTER, DIMENSION(:) :: userSubroutine
    TYPE(ops_arg), POINTER, DIMENSION(:) :: opsArgArray

{% for arg in lh.args %}
    TYPE(ops_arg) :: opsArg{{arg.id+1}}
{% endfor %}

#endif

{% for arg in lh.args %}
    {% if arg is ops_dat %}
    {{lh.dats[arg.dat_id].typ | upper}}, DIMENSION(:), POINTER :: opsDat{{arg.id+1}}Local
    INTEGER(KIND=4) :: opsDat{{arg.id+1}}Cardinality
    INTEGER(KIND=4), DIMENSION(:), POINTER  :: dat{{arg.id+1}}_size
    INTEGER(KIND=4) :: dat{{arg.id+1}}_base
        {% if lh.ndim == 1 %}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}
        {% elif lh.ndim == 2 %}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}, ydim{{arg.id+1}}
        {% elif lh.ndim == 3 %}
    INTEGER(KIND=4) :: xdim{{arg.id+1}}, ydim{{arg.id+1}}, zdim{{arg.id+1}}
        {% endif %}
    {% elif arg is ops_gbl or arg is ops_reduce %}
    {{arg.typ | upper}}, DIMENSION(:), POINTER :: opsDat{{arg.id+1}}Local
    INTEGER(KIND=4) :: opsDat{{arg.id+1}}Cardinality
    INTEGER(KIND=4) :: dat{{arg.id+1}}_base
    {% endif %}

{% endfor %}
    REAL(KIND=8) :: t1__, t2__, t3__
    REAL(KIND=4) :: transfer_total, transfer

{% if lh.ndim == 1 %}
    INTEGER(KIND=4) :: x_size
{% elif lh.ndim == 2 %}
    INTEGER(KIND=4) :: x_size, y_size
{% elif lh.ndim == 3 %}
    INTEGER(KIND=4) :: x_size, y_size, z_size
{% endif %}

{% if lh.arg_idx != -1 %}
    INTEGER(KIND=4), DIMENSION({{lh.ndim}}) :: idx

{% endif %}
    INTEGER(KIND=4), DIMENSION({{lh.ndim}}) :: start_indx, end_indx
    INTEGER(KIND=4) :: n_indx
    CHARACTER(LEN=40) :: kernelName

    kernelName = "{{lh.kernel}}"

#ifdef OPS_LAZY
!   ==========================
!   Set from kernel descriptor
!   ==========================
    dim = descPtr%dim
    CALL c_f_pointer(descPtr%range, range, (/2*dim/))
    CALL c_f_pointer(descPtr%name, userSubroutine, (/descPtr%name_len/))
    block%blockCptr = descPtr%block
    CALL c_f_pointer(block%blockCptr, block%blockPtr)
    CALL c_f_pointer(descPtr%args, opsArgArray, (/descPtr%nargs/))

{% for d in range(lh.args | length) %}
    opsArg{{d+1}} = opsArgArray({{d+1}})
{% endfor %}
#else
{% for d in range(lh.args | length) %}
    opsArgArray({{d+1}}) = opsArg{{d+1}}
{% endfor %}
#endif

    CALL setKernelTime({{kernel_idx}}, kernelName//c_null_char, 0.0_8, 0.0_8, 0.0_4, 1)
    CALL ops_timers_core(t1__)

#if defined(OPS_MPI) && !defined(OPS_LAZY)
    IF ( getRange(block, start_indx, end_indx, range) < 0 ) THEN
        RETURN
    END IF
#elif !defined(OPS_MPI)  && !defined(OPS_LAZY)
    DO n_indx = 1, {{lh.ndim}}
        start_indx(n_indx) = range(2*n_indx-1)
        end_indx  (n_indx) = range(2*n_indx)
    END DO
#else
    DO n_indx = 1, {{lh.ndim}}
        start_indx(n_indx) = range(2*n_indx-1) + 1
        end_indx  (n_indx) = range(2*n_indx)
    END DO
#endif

{% if lh.arg_idx != -1 %}
#ifdef OPS_MPI
    CALL getIdx(block, start_indx, idx)
#else
{% for d in range(lh.ndim) %}
    idx({{d+1}}) = start_indx({{d+1}})
{% endfor %}
#endif
{% endif %}

    x_size = MAX(0, end_indx(1)-start_indx(1)+1)
{% if lh.ndim == 2 %}
    y_size = MAX(0, end_indx(2)-start_indx(2)+1)
{% elif lh.ndim == 3 %}
    y_size = MAX(0, end_indx(2)-start_indx(2)+1)
    z_size = MAX(0, end_indx(3)-start_indx(3)+1)
{% endif %}

{% if lh.isGblReadMDIM %}
    CALL ops_upload_gbls(opsArgArray, {{lh.args|length}})
{% endif %}

{% for arg in lh.args %}
    {% if arg is ops_dat %}
    CALL c_f_pointer(getDatSizeFromOpsArg(opsArg{{arg.id+1}}), dat{{arg.id+1}}_size, (/dim/))
        {% if lh.ndim == 1 %}
    xdim{{arg.id+1}} = dat{{arg.id+1}}_size(1)
    opsDat{{arg.id+1}}Cardinality = opsArg{{arg.id+1}}%dim * xdim{{arg.id+1}}
        {% elif lh.ndim == 2 %}
    xdim{{arg.id+1}} = dat{{arg.id+1}}_size(1)
    ydim{{arg.id+1}} = dat{{arg.id+1}}_size(2)
    opsDat{{arg.id+1}}Cardinality = opsArg{{arg.id+1}}%dim * xdim{{arg.id+1}} * ydim{{arg.id+1}}
        {% elif lh.ndim == 3 %}
    xdim{{arg.id+1}} = dat{{arg.id+1}}_size(1)
    ydim{{arg.id+1}} = dat{{arg.id+1}}_size(2)
    zdim{{arg.id+1}} = dat{{arg.id+1}}_size(3)
    opsDat{{arg.id+1}}Cardinality = opsArg{{arg.id+1}}%dim * xdim{{arg.id+1}} * ydim{{arg.id+1}} * zdim{{arg.id+1}}
        {% endif %}
        {% if arg.dim > 1 %}
    multi_d{{arg.id+1}} = getDatDimFromOpsArg(opsArg{{arg.id+1}}) ! dimension of dat
{# !$OMP TARGET ENTER DATA MAP(TO:multi_d{{arg.id+1}}) #}
!$OMP TARGET UPDATE TO(multi_d{{arg.id+1}})
    dat{{arg.id+1}}_base = getDatBaseFromOpsArg{{lh.ndim}}D(opsArg{{arg.id+1}}, start_indx, multi_d{{arg.id+1}})
        {% else %}
    dat{{arg.id+1}}_base = getDatBaseFromOpsArg{{lh.ndim}}D(opsArg{{arg.id+1}}, start_indx, 1)
        {% endif %}
    CALL c_f_pointer(opsArg{{arg.id+1}}%data_d, opsDat{{arg.id+1}}Local, (/opsDat{{arg.id+1}}Cardinality/))
    {% elif arg is ops_gbl or arg is ops_reduce %}
    opsDat{{arg.id+1}}Cardinality = opsArg{{arg.id+1}}%dim
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
    CALL c_f_pointer(opsArg{{arg.id+1}}%data, opsDat{{arg.id+1}}Local, (/opsDat{{arg.id+1}}Cardinality/))
            {% else %}
    CALL c_f_pointer(opsArgArray({{arg.id+1}})%data_d, opsDat{{arg.id+1}}Local, (/opsDat{{arg.id+1}}Cardinality/))
            {% endif %}
        {% elif arg is ops_inc or arg is ops_min or arg is ops_max %}
    CALL c_f_pointer(getReductionPtrFromOpsArg(opsArg{{arg.id+1}},block), opsDat{{arg.id+1}}Local, (/opsDat{{arg.id+1}}Cardinality/))
        {% endif %}
    dat{{arg.id+1}}_base = 1
    {% endif %}

{% endfor %}
{% set if_condition = [""] %}
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if arg.dim == 1 %}
            {%if if_condition.append(if_condition.pop() + "         (xdim"+(arg.id+1)|string+" .NE. xdim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
            {% if lh.ndim == 3 %}
                {%if if_condition.append(if_condition.pop() + "         (ydim"+(arg.id+1)|string+" .NE. ydim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
            {% endif %}
        {% else %}
            {%if if_condition.append(if_condition.pop() + "         (xdim"+(arg.id+1)|string+" .NE. xdim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
            {% if soa_set %}
                {% if lh.ndim == 2 %}
                    {%if if_condition.append(if_condition.pop() + "         (ydim"+(arg.id+1)|string+" .NE. ydim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
                {% elif lh.ndim == 3 %}
                    {%if if_condition.append(if_condition.pop() + "         (ydim"+(arg.id+1)|string+" .NE. ydim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
                    {%if if_condition.append(if_condition.pop() + "         (zdim"+(arg.id+1)|string+" .NE. zdim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
                {% endif %}
            {% else %}
                {% if lh.ndim == 3 %}
                    {%if if_condition.append(if_condition.pop() + "         (ydim"+(arg.id+1)|string+" .NE. ydim"+(arg.id+1)|string+"_"+lh.kernel+"_h) .OR. &\n") %}{% endif %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}

    IF (&
{{if_condition[0][:-8]}} &
       ) THEN
{% for arg in lh.args %}
    {% if arg is ops_dat %}
        {% if arg.dim == 1 %}
            xdim{{arg.id+1}}_{{lh.kernel}} = xdim{{arg.id+1}}
            xdim{{arg.id+1}}_{{lh.kernel}}_h = xdim{{arg.id+1}}
{# !$OMP TARGET ENTER DATA MAP(TO:xdim{{arg.id+1}}_{{lh.kernel}}) #}
!$OMP TARGET UPDATE TO(xdim{{arg.id+1}}_{{lh.kernel}})
            {% if lh.ndim == 3 %}
            ydim{{arg.id+1}}_{{lh.kernel}} = ydim{{arg.id+1}}
            ydim{{arg.id+1}}_{{lh.kernel}}_h = ydim{{arg.id+1}}
{# !$OMP TARGET ENTER DATA MAP(TO:ydim{{arg.id+1}}_{{lh.kernel}}) #}
!$OMP TARGET UPDATE TO(ydim{{arg.id+1}}_{{lh.kernel}})
            {% endif %}
        {% else %}
            xdim{{arg.id+1}}_{{lh.kernel}} = xdim{{arg.id+1}}
            xdim{{arg.id+1}}_{{lh.kernel}}_h = xdim{{arg.id+1}}
{# !$OMP TARGET ENTER DATA MAP(TO:xdim{{arg.id+1}}_{{lh.kernel}}) #}
!$OMP TARGET UPDATE TO(xdim{{arg.id+1}}_{{lh.kernel}})
            {% if soa_set %}
                {% if lh.ndim == 2 %}
            ydim{{arg.id+1}}_{{lh.kernel}} = ydim{{arg.id+1}}
            ydim{{arg.id+1}}_{{lh.kernel}}_h = ydim{{arg.id+1}}
{# !$OMP TARGET ENTER DATA MAP(TO:ydim{{arg.id+1}}_{{lh.kernel}}) #}
!$OMP TARGET UPDATE TO(ydim{{arg.id+1}}_{{lh.kernel}})
                {% elif lh.ndim == 3 %}
            ydim{{arg.id+1}}_{{lh.kernel}} = ydim{{arg.id+1}}
            ydim{{arg.id+1}}_{{lh.kernel}}_h = ydim{{arg.id+1}}
            zdim{{arg.id+1}}_{{lh.kernel}} = zdim{{arg.id+1}}
            zdim{{arg.id+1}}_{{lh.kernel}}_h = zdim{{arg.id+1}}
{# !$OMP TARGET ENTER DATA MAP(TO:ydim{{arg.id+1}}_{{lh.kernel}},zdim{{arg.id+1}}_{{lh.kernel}}) #}
!$OMP TARGET UPDATE TO(ydim{{arg.id+1}}_{{lh.kernel}},zdim{{arg.id+1}}_{{lh.kernel}})
                {% endif %}
            {% else %}
                {% if lh.ndim == 3 %}
            ydim{{arg.id+1}}_{{lh.kernel}} = ydim{{arg.id+1}}
            ydim{{arg.id+1}}_{{lh.kernel}}_h = ydim{{arg.id+1}}
{# !$OMP TARGET ENTER DATA MAP(TO:ydim{{arg.id+1}}_{{lh.kernel}}) #}
!$OMP TARGET UPDATE TO(ydim{{arg.id+1}}_{{lh.kernel}})
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}
    END IF

!   ==============
!   Halo exchanges
!   ==============
#ifndef OPS_LAZY
    CALL ops_H_D_exchanges_device(opsArgArray, {{lh.args|length}})
    CALL ops_halo_exchanges(opsArgArray, {{lh.args|length}}, range)
    CALL ops_H_D_exchanges_device(opsArgArray, {{lh.args|length}})
#endif

    CALL ops_timers_core(t2__)

!   ==============================
!   Call kernel wrapper subroutine
!   ==============================
    CALL {{lh.kernel}}_wrap( &
{% for arg in lh.args %}
    {% if arg is ops_idx %}
                        idx, &
    {% elif arg is ops_dat %}
                        opsDat{{arg.id+1}}Local, &
    {% elif arg is ops_gbl or arg is ops_reduce %}
        {% if arg is ops_read %}
            {% if arg.dim.isdigit() and arg.dim|int == 1 %}
                        opsDat{{arg.id+1}}Local(1), &
            {% else %}
                        opsDat{{arg.id+1}}Local, &
            {% endif %}
        {% elif arg is ops_inc or arg is ops_min or arg is ops_max %}
                        opsDat{{arg.id+1}}Local, &
        {% endif %}
    {% endif %}
{% endfor %}
{% for arg in lh.args %}
    {% if not arg is ops_idx %}
                        dat{{arg.id+1}}_base, &
    {% endif %}
{% endfor %}
{% for arg in lh.args %}
    {% if arg is ops_dat or arg is ops_gbl or arg is ops_reduce %}
                        opsDat{{arg.id+1}}Cardinality, &
    {% endif %}
{% endfor %}
                        start_indx, &
                        end_indx )

    CALL ops_timers_core(t3__)

#ifndef OPS_LAZY
    CALL ops_set_dirtybit_device(opsArgArray, {{lh.args|length}})
{% for arg in lh.args %}
    {% if arg is ops_dat and (arg is ops_write or arg is ops_rw or arg is ops_inc) %}
    CALL ops_set_halo_dirtybit3(opsArg{{arg.id+1}}, range)
    {% endif %}
{% endfor %}
#endif

!   ========================
!   Timing and data movement
!   ========================
    transfer_total = 0.0_4
{% for arg in lh.args %}
    {% if arg is ops_dat %}
    CALL ops_compute_transfer({{lh.ndim}}, start_indx, end_indx, opsArg{{arg.id+1}}, transfer)
    transfer_total = transfer_total + transfer
    {% endif %}
{% endfor %}

    CALL setKernelTime({{kernel_idx}}, kernelName//c_null_char, t3__-t2__, t2__-t1__, transfer_total, 0)

END SUBROUTINE

{% endblock %}

{% block kernel_descriptor_lazy_call %}
#ifdef OPS_LAZY
SUBROUTINE {{lh.kernel}}_host( userSubroutine, block, dim, range, &
{% for arg in lh.args %}
    opsArg{{arg.id+1}}{% if not loop.last %},{% endif %} &
    {% if loop.last %}
    )
    {% endif %}
{% endfor %}

    CHARACTER(KIND=C_CHAR,LEN=*), INTENT(IN), TARGET :: userSubroutine
    TYPE(ops_block), INTENT(IN) :: block
    INTEGER(KIND=4), INTENT(IN) :: dim
    INTEGER(KIND=4), DIMENSION(2*dim), INTENT(INOUT), TARGET :: range
    INTEGER(KIND=4), DIMENSION(2*dim), TARGET :: range_tmp

{% for arg in lh.args %}
    TYPE(ops_arg), INTENT(IN) :: opsArg{{arg.id+1}}
{% endfor %}

    TYPE(ops_arg), DIMENSION({{lh.args|length}}), TARGET :: opsArgArray
    INTEGER(KIND=4) :: n_indx
    CHARACTER(LEN=40) :: namelit

    namelit = "{{lh.kernel}}"

{% for d in range(lh.args|length) %}
    opsArgArray({{d+1}}) = opsArg{{d+1}}
{% endfor %}

    DO n_indx = 1, {{lh.ndim}}
        range_tmp(2*n_indx-1) = range(2*n_indx-1)-1
        range_tmp(2*n_indx)   = range(2*n_indx)
    END DO

    CALL create_kerneldesc_and_enque(namelit//c_null_char, c_loc(opsArgArray), &
                                    {{lh.args|length}}, {{kernel_idx}}, dim, 1, c_loc(range_tmp), &
                                    block%blockCptr, c_funloc({{lh.kernel}}_host_execute))

END SUBROUTINE
#endif

{% endblock %}

{% block epilogue %}
END MODULE {{lh.kernel | upper}}_MODULE
{% endblock %}
