#ifndef __OPS_CUDA_RT_SUPPORT_H
#define __OPS_CUDA_RT_SUPPORT_H
#ifndef DOXYGEN_SHOULD_SKIP_THIS
/*
* Open source copyright declaration based on BSD open source template:
* http://www.opensource.org/licenses/bsd-license.php
*
* This file is part of the OPS distribution.
*
* Copyright (c) 2013, Mike Giles and others. Please see the AUTHORS file in
* the main source directory for a full list of copyright holders.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
* notice, this list of conditions and the following disclaimer in the
* documentation and/or other materials provided with the distribution.
* The name of Mike Giles may not be used to endorse or promote products
* derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Mike Giles ''AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Mike Giles BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/** @file
  * @brief OPS cuda specific runtime support functions
  * @author Gihan Mudalige, Istvan Reguly
  * @details Implements cuda backend runtime support functions
  */

/*
* This header file declares the CUDA back-end specific run-time functions
* to be used by the code generated by OPS compiler.
*/

#include <cuda.h>
#include <cuda_runtime.h>
#include <cuda_runtime_api.h>
#include <device_launch_parameters.h>

#include <ops_lib_core.h>
#include <ops_device_rt_support.h>

#include<curand.h>

/*
* personal stripped-down version of cutil_inline.h
*/

#define cutilSafeCall(stream, err) __cudaSafeCall(stream, err, __FILE__, __LINE__)
#define curandSafeCall(stream, err) __curandSafeCall(stream, err, __FILE__, __LINE__)
#define cutilCheckMsg(stream, msg) __cutilCheckMsg(stream, msg, __FILE__, __LINE__)

void __cudaSafeCall(std::ostream &stream, cudaError_t err, const char *file, const int line);
void __curandSafeCall(std::ostream &stream, curandStatus_t err, const char *file, const int line);

//inline __device__ __half operator*(int a, const half& b) {
//  return __float2half(static_cast<float>(a)) * static_cast<__half>(b);
//}
//
//inline __device__ __half operator*(const half& a, int b) {
//  return static_cast<__half>(a) * __float2half(static_cast<float>(b));
//}
//
//inline __device__ __half operator-(const half& a, int b) {
//  return static_cast<__half>(a) - __float2half(static_cast<float>(b));
//}
//
//__device__ inline half operator+(const half& lhs, float rhs) {
//    half rhs_half = __float2half(rhs);
//    return __hadd(lhs, rhs_half);
//}
//
//__device__ inline half operator+(const float& lhs, half rhs) {
//    half lhs_half = __float2half(lhs);
//    return __hadd(lhs_half, rhs);
//}

inline __device__ __half pow(const half& base, int exponent) {
  return __float2half(pow(__half2float(base), static_cast<float>(exponent)));
}

inline __device__ __half cos(const half& angle) {
  return __float2half(cos(__half2float(angle)));
}

inline __device__ __half sin(const half& angle) {
  return __float2half(sin(__half2float(angle)));
}

__device__ inline float operator+(float lhs, half rhs) {
  float rhs_float = __half2float(rhs);
  return lhs + rhs_float;
}

__device__ inline float operator+(half lhs, float rhs) {
  float lhs_float = __half2float(lhs);
  return lhs_float + rhs;
}

__device__ inline float operator*(float lhs, half rhs) {
  float rhs_float = __half2float(rhs);
  return lhs * rhs_float;
}

__device__ inline float operator*(half lhs, float rhs) {
  float lhs_float = __half2float(lhs);
  return lhs_float * rhs;
}

__device__ inline float operator-(float lhs, half rhs) {
  float rhs_float = __half2float(rhs);
  return lhs - rhs_float;
}

__device__ inline float operator-(half lhs, float rhs) {
  float lhs_float = __half2float(lhs);
  return lhs_float - rhs;
}

__device__ inline float operator/(float lhs, half rhs) {
  float rhs_float = __half2float(rhs);
  return lhs / rhs_float;
}

__device__ inline float operator/(half lhs, float rhs) {
  float lhs_float = __half2float(lhs);
  return lhs_float / rhs;
}

#endif /* DOXYGEN_SHOULD_SKIP_THIS */
#endif /* __OPS_CUDA_RT_SUPPORT_H */
