
ifndef OPS_GENERATED_SUFFIX
OPS_GENERATED_SUFFIX=_ops
endif

OPS_GENERATED=$(join $(addsuffix $(OPS_GENERATED_SUFFIX), $(basename $(OPS_FILES))), $(suffix $(OPS_FILES)))
OPS_FILES_PLAIN=$(OPS_FILES) $(OTHER_FILES)
OPS_FILES_GEN=$(OPS_GENERATED) $(OTHER_FILES)

ifndef APP
$(error APP is not set)
endif

ifndef MAIN_SRC
$(error MAIN_SRC is not set)
endif

VERBOSE=

ifdef OPS_GENERATOR_VERBOSE
	VERBOSE=-v
endif

DEFINES=-DOPS_ACC_IGNORE

.generated: $(HEADERS) $(OPS_FILES) $(OPS_INSTALL_PATH)/../ops_translator_v2/ops-translator/*.py
	@echo "generating translations for ${OPS_FILES}"
	@echo "OPS_EXTENTIONS: ${OPS_GENERATED_SUFFIX}"
	@echo "OPS_GENERATED: ${OPS_GENERATED}"
	which python3
	python3 $(OPS_INSTALL_PATH)/../ops_translator_v2/ops-translator $(VERBOSE) $(DEFINES) -I $(OPS_INSTALL_PATH)/c/include/ --file_paths $(OPS_FILES)
	rm -f .generated
	touch .generated
	#touch ./OpenCL/$(MAIN_SRC)_seq_kernels.cpp

ifndef TARGETS
    TARGETS = dev_seq dev_mpi seq tiled openmp mpi mpi_openmp mpi_inline mpi_tiled cuda mpi_cuda mpi_cuda_tiled opencl mpi_opencl
ifeq ($(OPS_COMPILER),pgi)
    TARGETS += openacc mpi_openacc
else
    TARGETS += openacc_error
endif
endif

ifdef THREADED
    CXXFLAGS += $(THREADING_FLAGS)
endif

APP_TARGETS = $(addprefix $(APP)_, $(TARGETS))

all: $(APP_TARGETS)

$(APP)_dev_seq: Makefile $(HEADERS) $(OPS_FILES_PLAIN) $(OPS_INSTALL_PATH)/c/lib/$(OPS_COMPILER)/libops_seq.a
		@echo "Building ${APP}_dev_seq" 
		$(CXX) $(CXXFLAGS) -std=c++11 -I$(C_OPS_INC) -L$(C_OPS_LIB) $(OPS_FILES_PLAIN) $(HDF5_LIB_SEQ) $(OPS_LINK) $(OPS_LIB_SEQ) $(TRID_SEQ) -fopenmp -o $(APP)_dev_seq

$(APP)_dev_mpi: Makefile $(OPS_FILES_PLAIN) $(HEADERS) $(OPS_INSTALL_PATH)/c/lib/$(OPS_COMPILER)/libops_mpi.a
		@echo "Building ${APP}_dev_mpi"
	    $(MPICPP) $(CXXFLAGS) -DOPS_MPI -std=c++11 -I$(C_OPS_INC) -L$(C_OPS_LIB) $(OPS_FILES_PLAIN) $(HDF5_LIB_MPI) $(OPS_LINK) $(OPS_LIB_MPI) $(TRID_MPI) -fopenmp -o $(APP)_dev_mpi

#
# mpi version
#

MPI_OPENMP_KERNELS = mpi_openmp_kernels.cpp

$(APP)_mpi: Makefile .generated $(OPS_INSTALL_PATH)/c/lib/$(OPS_COMPILER)/libops_mpi.a
		@echo ""
		@echo ""
		@echo "Building ${APP}_mpi"
	    $(MPICPP) $(CXXFLAGS) -DOPS_MPI -I$(C_OPS_INC) -L$(C_OPS_LIB) $(OPS_FILES_GEN) -I. ./mpi_openmp/$(MPI_OPENMP_KERNELS) $(HDF5_LIB_MPI) $(OPS_LINK) $(OPS_LIB_MPI) $(TRID_MPI) -fopenmp -o $(APP)_mpi

#
# OpenMP version
#

$(APP)_mpi_openmp: Makefile .generated $(OPS_INSTALL_PATH)/c/lib/$(OPS_COMPILER)/libops_mpi.a $(OPS_FILES_GEN) $(HEADERS)
		@echo ""
		@echo ""
		@echo "Building ${APP}_mpi_openmp"
		@echo ""
	  	$(MPICPP) $(CXXFLAGS) $(OMPFLAGS) -DOPS_MPI -I$(C_OPS_INC) -L$(C_OPS_LIB) $(OPS_FILES_GEN) -I. ./mpi_openmp/$(MPI_OPENMP_KERNELS) $(HDF5_LIB_MPI) $(OPS_LINK) $(OPS_LIB_MPI) $(TRID_LIB) -o $(APP)_mpi_openmp

$(APP)_openmp: Makefile .generated $(OPS_INSTALL_PATH)/c/lib/$(OPS_COMPILER)/libops_seq.a $(OPS_FILES_GEN) $(HEADERS)
		@echo ""
		@echo ""
		@echo "Building ${APP}_openmp"
		@echo ""
	    $(MPICPP) $(OMPFLAGS) $(CXXFLAGS) -I$(C_OPS_INC) -L$(C_OPS_LIB) $(OPS_FILES_GEN) $(TRID_LIB) -I. ./mpi_openmp/$(MPI_OPENMP_KERNELS) $(HDF5_LIB_SEQ) $(OPS_LINK) $(OPS_LIB_SEQ) -o $(APP)_openmp



#
# Sequential version
#
$(APP)_seq: Makefile .generated $(OPS_INSTALL_PATH)/c/lib/$(OPS_COMPILER)/libops_seq.a $(OPS_FILES_GEN) $(HEADERS)
		@echo ""
		@echo ""
		@echo "Building ${APP}_seq"
		@echo ""
		$(MPICPP) $(CXXFLAGS) -I$(C_OPS_INC) -L$(C_OPS_LIB) $(OPS_FILES_GEN) $(TRID_LIB) -I. ./mpi_openmp/$(MPI_OPENMP_KERNELS) $(HDF5_LIB_SEQ) $(OPS_LINK) $(OPS_LIB_SEQ) $(TRID_SEQ) -fopenmp -o $(APP)_seq

#
# Tiled version
#
$(APP)_tiled: Makefile .generated $(OPS_INSTALL_PATH)/c/lib/$(OPS_COMPILER)/libops_seq.a $(OPS_FILES_GEN) $(HEADERS)
		@echo ""
		@echo ""
		@echo "Building ${APP}_tiled"
		@echo ""
		$(MPICPP) $(CXXFLAGS) $(OMPFLAGS) -D$(OPS_COMPILER) -DOPS_LAZY -I$(C_OPS_INC) -L$(C_OPS_LIB) $(OPS_FILES_GEN) $(TRID_LIB) -I. ./mpi_openmp/$(MPI_OPENMP_KERNELS) $(HDF5_LIB_SEQ) $(OPS_LINK) $(OPS_LIB_SEQ) -o $(APP)_tiled

$(APP)_mpi_tiled: Makefile .generated $(OPS_INSTALL_PATH)/c/lib/$(OPS_COMPILER)/libops_mpi.a $(OPS_FILES_GEN) $(HEADERS)
		@echo ""
		@echo ""
		@echo "Building ${APP}_mpi_tiled"
		@echo ""
		$(MPICPP) $(CXXFLAGS) $(OMPFLAGS) -DOPS_MPI -D$(OPS_COMPILER) -DOPS_LAZY -I$(C_OPS_INC) -L$(C_OPS_LIB) $(OPS_FILES_GEN) $(TRID_LIB) -I. ./mpi_openmp/$(MPI_OPENMP_KERNELS) $(HDF5_LIB_MPI) $(OPS_LINK) $(OPS_LIB_MPI) -o $(APP)_mpi_tiled


#
# cleanup
#

clean:
	rm -f *.o
	rm -f *.oo
	rm -f *.optrpt
	rm -f *~
	rm -f *.lst
	rm -f $(APP)_dev_seq
	rm -f $(APP)_dev_mpi
	rm -f $(APP)_seq
	rm -f $(APP)_tiled
	rm -f $(APP)_openmp
	rm -f $(APP)_mpi
	rm -f $(APP)_mpi_tiled
	rm -f $(APP)_mpi_openmp
	rm -f $(APP)_mpi_inline
	rm -f $(APP)_cuda
	rm -f $(APP)_mpi_cuda
	rm -f $(APP)_mpi_cuda_tiled
	rm -f $(APP)_hip
	rm -f $(APP)_mpi_hip
	rm -f $(APP)_mpi_hip_tiled
	rm -f $(APP)_openacc
	rm -f $(APP)_mpi_openacc
	rm -f $(APP)_opencl
	rm -f $(APP)_mpi_opencl
	rm -f $(OPS_GENERATED)
	rm -f .generated constants_list.txt
	rm -rf ./mpi_openmp ./cuda
