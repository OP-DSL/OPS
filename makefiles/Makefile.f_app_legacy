
ifndef OPS_GENERATED_SUFFIX
OPS_GENERATED_SUFFIX=_ops
endif

ifeq ($(strip $(OPS_GENERATED)),)
OPS_GENERATED=$(join $(addsuffix $(OPS_GENERATED_SUFFIX), $(basename $(OPS_FILES))), $(suffix $(OPS_FILES)))
endif

OPS_FILES_PLAIN=$(OPS_FILES) $(OTHER_FILES)
OPS_FILES_GEN=$(OTHER_FILES) $(OPS_GENERATED)

ifndef APP
$(error APP is not set)
endif

ifndef MAIN_SRC
$(error MAIN_SRC is not set)
endif

VERBOSE=

ifdef OPS_GENERATOR_VERBOSE
	VERBOSE=-v
endif

DEFINES=-DOPS_ACC_IGNORE

.generated: $(OPS_FILES) $(OPS_INSTALL_PATH)/../ops_translator_legacy/fortran/*.py
	@echo "generating translations for ${OPS_FILES}"
	@echo "OPS_EXTENTIONS: ${OPS_GENERATED_SUFFIX}"
	@echo "OPS_GENERATED: ${OPS_GENERATED}"
	$(OPS_INSTALL_PATH)/../ops_translator_legacy/fortran/ops_fortran.py $(OPS_FILES)
	rm -f .generated
	touch .generated

# check what targets can not be built with current environment setting and give warnings
ifneq ($(strip $(TARGETS)),)

ifneq (,$(filter cuda mpi_cuda mpi_cuda_tiled,$(TARGETS)))
ifneq ($(OPS_COMPILER),pgi)
TARGETS:=$(filter-out cuda mpi_cuda mpi_cuda_tiled,$(TARGETS))
#$(info CUDA targets cannot be built with current environment settings....)
#$(info Build continues without CUDA targets.....)
endif
endif

endif	#ifneq TARGETS

ifndef TARGETS
TARGETS	= seq tiled openmp mpi mpi_openmp mpi_tiled

ifeq ($(OPS_COMPILER),pgi)
TARGETS += $(APP)_cuda $(APP)_mpi_cuda $(APP)_mpi_cuda_tiled
endif

ifeq ($(OPS_COMPILER),xlp8)
TARGETS += poisson_mpi_cuda
endif

endif	#ifndef TARGETS

ifneq (,$(filter openacc mpi_openacc mpi_openacc_tiled,$(TARGETS)))
TARGETS:=$(filter-out openacc mpi_openacc mpi_openacc_tiled,$(TARGETS))
endif

ifneq ($(strip $(MPI_INSTALL_PATH)),)
I_MPI_INC = -I$(MPI_INC)
L_MPI_LIB = -L$(MPI_LIB)
else
I_MPI_INC = $(foreach dir,$(shell $(MPICC) --showme:incdirs),-I$(dir))
endif

APP_TARGETS = $(addprefix $(APP)_, $(TARGETS))

all: $(APP_TARGETS)

#=====================================================================================================================================================================
#
# Sequential version
#

$(APP)_seq: Makefile .generated $(OPS_INSTALL_PATH)/fortran/lib/$(OPS_COMPILER)/libops_for_seq.a $(OPS_FILES_GEN)
		@echo ""
		@echo ""
		@echo "Building ${APP}_seq"
		@echo ""
		$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(FMODS) $(OTHER_FILES) mpi_openmp/*_seq_kernel.F90 $(OPS_GENERATED) $(APP_LIBS) $(FLINK) -lops_for_seq $(F_HDF5_LIB_SEQ) -o $(APP)_seq

#=====================================================================================================================================================================
#
# mpi version
#

$(APP)_mpi: Makefile .generated $(OPS_INSTALL_PATH)/fortran/lib/$(OPS_COMPILER)/libops_for_mpi.a $(OPS_FILES_GEN)
		@echo ""
		@echo ""
		@echo "Building ${APP}_mpi"
		@echo ""
		$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(FMODS) -DOPS_MPI $(I_MPI_INC) $(OTHER_FILES) mpi_openmp/*_seq_kernel.F90 $(OPS_GENERATED) $(APP_LIBS) $(FLINK) -lops_for_mpi $(F_HDF5_LIB_MPI) $(L_MPI_LIB) $(MPI_LINK) -o $(APP)_mpi

#=====================================================================================================================================================================
#
# OpenMP version
#

$(APP)_openmp: Makefile .generated $(OPS_INSTALL_PATH)/fortran/lib/$(OPS_COMPILER)/libops_for_seq.a $(OPS_FILES_GEN)
		@echo ""
		@echo ""
		@echo "Building ${APP}_openmp"
		@echo ""
		$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(FMODS) $(OMPFLAGS) $(OTHER_FILES) mpi_openmp/*_seq_kernel.F90 $(OPS_GENERATED) $(APP_LIBS) $(FLINK) -lops_for_seq $(F_HDF5_LIB_SEQ) -o $(APP)_openmp

$(APP)_mpi_openmp: Makefile .generated $(OPS_INSTALL_PATH)/fortran/lib/$(OPS_COMPILER)/libops_for_mpi.a $(OPS_FILES_GEN)
		@echo ""
		@echo ""
		@echo "Building ${APP}_mpi_openmp"
		@echo ""
		$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(FMODS) $(OMPFLAGS) -DOPS_MPI $(I_MPI_INC) $(OTHER_FILES) mpi_openmp/*_seq_kernel.F90 $(OPS_GENERATED) $(APP_LIBS) $(FLINK) -lops_for_mpi $(F_HDF5_LIB_MPI) $(L_MPI_LIB) $(MPI_LINK) -o $(APP)_mpi_openmp

#=====================================================================================================================================================================
#
# Tiled version
#

$(APP)_tiled: Makefile .generated $(OPS_INSTALL_PATH)/fortran/lib/$(OPS_COMPILER)/libops_for_seq.a $(OPS_FILES_GEN)
		@echo ""
		@echo ""
		@echo "Building ${APP}_tiled"
		@echo ""
		$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(FMODS) -DOPS_LAZY $(OTHER_FILES) mpi_openmp/*_seq_kernel.F90 $(OPS_GENERATED) $(APP_LIBS) $(FLINK) -lops_for_seq $(F_HDF5_LIB_SEQ) -o $(APP)_tiled

$(APP)_mpi_tiled: Makefile .generated $(OPS_INSTALL_PATH)/fortran/lib/$(OPS_COMPILER)/libops_for_mpi.a $(OPS_FILES_GEN)
		@echo ""
		@echo ""
		@echo "Building ${APP}_mpi_tiled"
		@echo ""
		$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(FMODS) -DOPS_MPI -DOPS_LAZY $(I_MPI_INC) $(OTHER_FILES) mpi_openmp/*_seq_kernel.F90 $(OPS_GENERATED) $(APP_LIBS) $(FLINK) -lops_for_mpi $(F_HDF5_LIB_MPI) $(L_MPI_LIB) $(MPI_LINK) -o $(APP)_mpi_tiled

#=====================================================================================================================================================================
#
# CUDA version
#
CUDA_KERNELS = $(wildcard cuda/*.CUF)

OTHER_CUDA_OBJ = $(OTHER_FILES:.F90=_cuda.o)
CUDA_KERNELS_OBJ = $(CUDA_KERNELS:.CUF=_cuda.o)
CUDA_OPS_GENERATED_OBJ = $(OPS_GENERATED:.F90=_cuda.o)

$(CUDA_OPS_GENERATED_OBJ): $(OTHER_CUDA_OBJ) $(CUDA_KERNELS_OBJ)
CUDA_OBJ = $(OTHER_CUDA_OBJ) $(CUDA_KERNELS_OBJ) $(CUDA_OPS_GENERATED_OBJ)

OTHER_MPI_CUDA_OBJ = $(OTHER_FILES:.F90=_mpi_cuda.o)
MPI_CUDA_KERNELS_OBJ = $(CUDA_KERNELS:.CUF=_mpi_cuda.o)
MPI_CUDA_OPS_GENERATED_OBJ = $(OPS_GENERATED:.F90=_mpi_cuda.o)

$(MPI_CUDA_OPS_GENERATED_OBJ): $(OTHER_MPI_CUDA_OBJ) $(MPI_CUDA_KERNELS_OBJ)
MPI_CUDA_OBJ = $(OTHER_MPI_CUDA_OBJ) $(MPI_CUDA_KERNELS_OBJ) $(MPI_CUDA_OPS_GENERATED_OBJ)

OTHER_MPI_CUDA_TILED_OBJ = $(OTHER_FILES:.F90=_mpi_cuda_tiled.o)
MPI_CUDA_TILED_KERNELS_OBJ = $(CUDA_KERNELS:.CUF=_mpi_cuda_tiled.o)
MPI_CUDA_TILED_OPS_GENERATED_OBJ = $(OPS_GENERATED:.F90=_mpi_cuda_tiled.o)

$(MPI_CUDA_TILED_OPS_GENERATED_OBJ): $(OTHER_MPI_CUDA_TILED_OBJ) $(MPI_CUDA_TILED_KERNELS_OBJ)
MPI_CUDA_TILED_OBJ = $(OTHER_MPI_CUDA_TILED_OBJ) $(MPI_CUDA_TILED_KERNELS_OBJ) $(MPI_CUDA_TILED_OPS_GENERATED_OBJ)


%_cuda.o: %.CUF
	$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(CUDAFOR) $(FMODS_CUDA) -c $< -o $@

%_cuda.o: %.F90 
	$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(CUDAFOR) $(FMODS_CUDA) -c $< -o $@

%_mpi_cuda.o: %.F90
	$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(CUDAFOR) -DOPS_MPI $(FMODS_CUDA) -c $< -o $@

%_mpi_cuda.o: %.CUF
	$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(CUDAFOR) -DOPS_MPI $(FMODS_CUDA) -c $< -o $@

%_mpi_cuda_tiled.o: %.F90
	$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(CUDAFOR) -DOPS_MPI -DOPS_LAZY $(FMODS_CUDA) -c $< -o $@

%_mpi_cuda_tiled.o: %.CUF
	$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(CUDAFOR) -DOPS_MPI -DOPS_LAZY $(FMODS_CUDA) -c $< -o $@

$(APP)_cuda: Makefile .generated $(OPS_INSTALL_PATH)/fortran/lib/$(OPS_COMPILER)/libops_for_cuda.a $(OPS_FILES_GEN) $(CUDA_OBJ)
		@echo ""
		@echo ""
		@echo "Building ${APP}_cuda"
		@echo ""
		$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(FMODS_CUDA) $(CUDAFOR) $(CUDA_OBJ) $(APP_LIBS) $(FLINK) -lops_for_cuda $(F_HDF5_LIB_SEQ) $(FCURAND) -o $(APP)_cuda

$(APP)_mpi_cuda: Makefile .generated $(OPS_INSTALL_PATH)/fortran/lib/$(OPS_COMPILER)/libops_for_mpi_cuda.a $(OPS_FILES_GEN) $(MPI_CUDA_OBJ)
		@echo ""
		@echo ""
		@echo "Building ${APP}_mpi_cuda"
		@echo ""
		$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(FMODS_CUDA) $(CUDAFOR) -DOPS_MPI $(I_MPI_INC) $(MPI_CUDA_OBJ) $(APP_LIBS) $(FLINK) -lops_for_mpi_cuda $(F_HDF5_LIB_MPI) $(L_MPI_LIB) $(MPI_LINK) $(FCURAND) -o $(APP)_mpi_cuda

$(APP)_mpi_cuda_tiled: Makefile .generated $(OPS_INSTALL_PATH)/fortran/lib/$(OPS_COMPILER)/libops_for_mpi_cuda.a $(OPS_FILES_GEN) $(MPI_CUDA_TILED_OBJ)
		@echo ""
		@echo ""
		@echo "Building ${APP}_mpi_cuda_tiled"
		@echo ""
		$(MPIF90) $(FFLAGS) $(APP_FLAGS) $(FMODS_CUDA) $(CUDAFOR) -DOPS_MPI -DOPS_LAZY $(I_MPI_INC) $(MPI_CUDA_TILED_OBJ) $(APP_LIBS) $(FLINK) -lops_for_mpi_cuda $(F_HDF5_LIB_MPI) $(L_MPI_LIB) $(MPI_LINK) $(FCURAND) -o $(APP)_mpi_cuda_tiled

#=====================================================================================================================================================================
#
# cleanup
#

cleanall: clean
	rm -rf ./mpi_openmp ./cuda

clean:
	rm -f *.o
	rm -f *.oo
	rm -f *.optrpt
	rm -f *.mod
	rm -f *~
	rm -f $(APP)_seq
	rm -f $(APP)_tiled
	rm -f $(APP)_openmp
	rm -f $(APP)_mpi
	rm -f $(APP)_mpi_tiled
	rm -f $(APP)_mpi_openmp
	rm -f $(APP)_cuda
	rm -f $(APP)_mpi_cuda
	rm -f $(APP)_mpi_cuda_tiled
	rm -f $(OPS_GENERATED)
	rm -f .generated constants_list.txt
