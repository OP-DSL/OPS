{% extends "cpp/loop_host.cpp.j2" %}

{% block host_prologue %}
{{super()}}

// Initialize global variable with the dimensions of dats
    {% for arg in lh.args %}
        {% if arg is dat %}
            {% if lh.ndim > 1 or (lh.ndim == 1 and (arg.dim) > 1) %}
    int xdim{{arg.id}}_{{lh.kernel}} = args[{{arg.id}}].dat->size[0];
            {% endif %}
            {% if lh.ndim > 2 or (lh.ndim == 2 and (arg.dim) > 1) %}
    int ydim{{arg.id}}_{{lh.kernel}} = args[{{arg.id}}].dat->size[1];
            {% endif %}
            {% if lh.ndim > 3 or (lh.ndim == 3 and (arg.dim) > 1) %}
    int zdim{{arg.id}}_{{lh.kernel}} = args[{{arg.id}}].dat->size[2];
            {% endif %}
        {% endif %}
    {% endfor%}

// set up initial pointers and exchange halos if necessary
    {% for arg in lh.args %}
        {% if arg is dat %}
    int base{{arg.id}} = args[{{arg.id}}].dat->base_offset;
    {{lh.dats[arg.dat_id].typ}} * __restrict__ argsDat{{arg.id}}_p = ({{lh.dats[arg.dat_id].typ}} *)(args[{{arg.id}}].data + base{{arg.id}});  
            {% if arg.restrict or arg.prolong %}
#ifdef OPS_MPI
    sub_dat_list sd{{arg.id}} = OPS_sub_dat_list[args[{{arg_idx}}].dat->index];
            {% endif %}
            {% if arg.restrict %}
    argsDat{{arg.id}}_p += arg_idx[0] * args[{{arg.id}}].stencil->mgrid_stride[0] - sd{{arg.id}}->decomp_disp[0] + args[{{arg.id}}].dat->d_m[0];
                {% if lh.ndim > 1 %}
    argsDat{{arg.id}}_p += (arg_idx[1]*args[{{arg.id}}].stencil->mgrid_stride[1] - sd{{arg.id}}->decomp_disp[1] + args[{{arg.id}}].dat->d_m[1]) * xdim{{arg.id}}_{{lh.kernel}};    
                {% endif %}
                {% if lh.ndim > 2 %}
    argsDat{{arg.id}}_p += (arg_idx[2]*args[{{arg.id}}].stencil->mgrid_stride[2] - sd{{arg.id}}->decomp_disp[2] + args[{{arg.id}}].dat->d_m[2]) * xdim{{arg.id}}_{{lh.kernel}} * ydim{{arg.id}}_{{lh.kernel}};
                {% endif %}
            {% endif %}
            {% if arg.prolong %}
    argsDat{{arg.id}}_p += arg_idx[0]/args[{{arg.id}}].stencil->mgrid_stride[0] - sd{{arg.id}}->decomp_disp[0] + args[{{arg.id}}].dat->d_m[0];
                {% if lh.ndim > 1 %}
    argsDat{{arg.id}}_p += (arg_idx[1]/args[{{arg.id}}].stencil->mgrid_stride[1] - sd{{arg.id}}->decomp_disp[1] + args[{{arg.id}}].dat->d_m[1]) * xdim{{arg.id}}_{{lh.kernel}};"
                {% endif %}
                {% if lh.ndim > 2 %}
    argsDat{{arg.id}}_p += (arg_idx[2]/args[{{arg.id}}].stencil->mgrid_stride[2] - sd{{arg.id}}->decomp_disp[2] + args[{{arg.id}}].dat->d_m[2]) * xdim{{arg.id}}_{{lh.kernel}} * ydim{{arg.id}}_{{lh.kernel}};"
                {% endif %}                
            {% endif %}
            {% if arg.restrict or arg.prolong %}
#endif
            {% endif %}
        {% elif arg is gbl or arg is reduce %}
            {% if arg is read %}
    {{arg.typ}} * __restrict__  argsDat{{arg.id}}= ({{arg.typ}} *)args[{{arg.id}}].data;
            {% else %}
#ifdef OPS_MPI
    {{arg.typ}} * __restrict__ p_a{{arg.id}} = ({{arg.typ}} *)(((ops_reduction)args[{{arg.id}}].data)->data + ((ops_reduction)args[{{arg.id}}].data)->size * block->index);
#else //OPS_MPI
    {{arg.typ}} * __restrict__ p_a{{arg.id}} = ({{arg.typ}} *)((ops_reduction)args[{{arg.id}}].data)->data;
#endif //OPS_MPI
            {% endif %}
        {% endif %}
    {% endfor %}

#ifndef OPS_LAZY
    // Halo exchanges
    ops_H_D_exchanges_host(args, {{lh.args|length}});
    ops_halo_exchanges(args, {{lh.args|length}}, range);
    ops_H_D_exchanges_host(args, {{lh.args|length}});
#endif //OPS_LAZY

    if (block->instance->OPS_diags > 1) {
        ops_timers_core(&__c1, &__t1);
        block->instance->OPS_kernels[{{kernel_idx}}].mpi_time += __t1 - __t2;
    }
{% endblock %}

{% block host_loop %}
    {% for arg in lh.args %}
        {% if arg is gbl or arg is reduce %}
            {% if not arg is read %}
                {% for d in range(arg.dim) %}
    {{arg.typ}} p_a{{arg.id}}_{{d}} = p_a{{arg.id}}[{{d}}];
                {% endfor %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% set line = [""] %}
    {% for arg in lh.args %}
        {% if arg is gbl or arg is reduce %}
            {% if arg is min %}
                {% for d in range(arg.dim) %}
                    {%if line.append(line.pop() + " reduction(min:p_a" + arg.id|string + "_" + d|string + ")") %}{% endif %}
                {% endfor %}
            {% endif %}
            {% if arg is max %}
                {% for d in range(arg.dim) %}
                    {%if line.append(line.pop() + " reduction(max:p_a" + arg.id|string + "_" + d|string + ")") %}{% endif %}
                {% endfor %}
            {% endif %}
            {% if arg is inc %}
                {% for d in range(arg.dim) %}
                    {%if line.append(line.pop() + " reduction(+:p_a" + arg.id|string + "_" + d|string + ")") %}{% endif %}
                {% endfor %}
            {% endif %}
        {% endif %}
    {% endfor %}
    {% if lh.ndim == 3 and (not lh.has_reduction) %}
        {% set line2 = " collapse(2)"%}
    {% else %}
        {% set line2 = line[0] %}
    {% endif %}
    {% set indent = [0] %}
    #pragma omp parallel for{{line2}}
    {% if lh.ndim > 2 %}
    for (int n_z = start_indx[2]; n_z < end_indx[2]; n_z++)
    {
        {% if indent.append(indent.pop() + 1) %}}{% endif %}
    {% endif %}
    {% if lh.ndim > 1 %}
      {{indent[0] * "  "}}for (int n_y = start_indx[1]; n_y < end_indx[1]; n_y++)
      {{indent[0] * "  "}}{
        {% if indent.append(indent.pop() + 1) %}{% endif %}
    {% endif %}

    {% if lh.ndim > 1%}
#ifdef __INTEL_COMPILER
    {{indent[0] * "    "}}#pragma loop_count(10000)
    {{indent[0] * "    "}}#pragma omp simd{{line[0]}}
#elif defined(__clang__)
    {{indent[0] * "    "}}#pragma clang loop vectorize(assume_safety)
#elif defined(__GNUC__)
    {{indent[0] * "    "}}#pragma GCC ivdep
#else
    {{indent[0] * "    "}}#pragma simd
#endif
    {% endif %}
    {{indent[0] * "    "}}for(int n_x = start_indx[0]; n_x < end_indx[0]; n_x++)
    {{indent[0] * "    "}}{
    {% if indent.append(indent.pop() + 1) %}{% endif %}
    {% if lh.arg_idx != -1 %}
        {% if lh.ndim == 1 %}
    {{indent[0] * "    "}}int idx[] = {% raw %}{arg_idx[0] + n_x};{% endraw %}
        {% elif lh.ndim == 2 %}
    {{indent[0] * "    "}}int idx[] = {% raw %}{arg_idx[0] + n_x, arg_idx[1] + n_y};{% endraw %}
        {% elif lh.ndim == 3 %}
    {{indent[0] * "    "}}int idx[] = {% raw %}{arg_idx[0] + n_x, arg_idx[1] + n_y, arg_idx[2] + n_z};{% endraw %}
        {% endif %}
    {% endif %}

    {# Insert declarations for OPS_DATS with offset calculation #}
    {% for arg in lh.args %}
        {% if arg is dat %}
            {% if arg is read %}
                {% set pre = "const " %}
            {% else %}
                {% set pre = "" %}
            {% endif %}
            {% set dim = "" %}
            {% set extradim = 0 %}
            {% set offset = [""] %}
            {% set sizelist = [""] %}
            {% if arg.dim > 1 %}
                {% set dim -%}{{arg.dim | string}} , {%- endset %}
                {% set extradim = 1 %}
            {% endif %}
            {% if arg.restrict %}
                {% set n_x -%}n_x * args[arg.id].stencil->mgrid_stride[0]{%- endset %}
                {% set n_y -%}n_y * args[arg.id].stencil->mgrid_stride[1]{%- endset %}
                {% set n_z -%}n_z * args[arg.id].stencil->mgrid_stride[2]{%- endset %}
            {%elif arg.prolong %}
                {% set n_x -%}(n_x + arg_idx[0] % args[arg.id].stencil->mgrid_stride[0]) / args[arg.id].stencil->mgrid_stride[0]{%- endset %}
                {% set n_y -%}(n_y + arg_idx[1] % args[arg.id].stencil->mgrid_stride[1]) / args[arg.id].stencil->mgrid_stride[1]{%- endset %}
                {% set n_z -%}(n_z + arg_idx[2] % args[arg.id].stencil->mgrid_stride[2]) / args[arg.id].stencil->mgrid_stride[2]{%- endset %}
            {% else %}
                {% set n_x -%}n_x{%- endset %}
                {% set n_y -%}n_y{%- endset %} 
                {% set n_z -%}n_z{%- endset %}             
            {% endif %}
            {% if lh.ndim > 0 %}
                {% if offset.append(offset.pop() + n_x|string + " * " + arg.stride[0]|string) %}{% endif %}
            {% endif %}
            {% if lh.ndim > 1 %}
                {% if offset.append(offset.pop() + " + " + n_y|string + " * xdim" + arg.id|string + "_" + lh.kernel|string + " * " + arg.stride[1]|string) %}{% endif %}
            {% endif %}
            {% if lh.ndim > 2 %}
                {% if offset.append(offset.pop() + " + " + n_z|string + " * xdim" + arg.id|string + "_" + lh.kernel|string + " * ydim" + arg.id|string + "_" + lh.kernel|string + " * " + arg.stride[2]|string) %}{% endif %}
            {% endif %}
            {% set dimlabels = "xyzuv" %}
            {% for i in range(1, lh.ndim + extradim) %}
                {% if sizelist.append(sizelist.pop() + dimlabels[i-1]|string + "dim" + arg.id|string + "_" + lh.kernel|string + ", ") %}{% endif %}
            {% endfor %}
            {% if arg.dim > 1 %}
#ifdef OPS_SOA
            {% endif %}
    {{indent[0] * "    "}}{{pre}} ACC<{{lh.dats[arg.dat_id].typ}}> argsDat{{arg.id}}({{dim}}{{sizelist[0]}}argsDat{{arg.id}}_p + {{offset[0]}});
            {% if arg.dim > 1 %}
#else
    {{indent[0] * "    "}}{{pre}} ACC<{{lh.dats[arg.dat_id].typ}}> argsDat{{arg.id}}({{dim}}{{sizelist[0]}}argsDat{{arg.id}}_p + {{arg.dim}} * {{offset[0]}});
#endif
            {% endif %}
        {% endif %}
    {% endfor %}

    {# Insert declaration for reduction variables #}
    {% for arg in lh.args %}
        {% if arg is gbl or arg is reduce %}
            {% if arg is min %}
    {{indent[0] * "    "}}{{arg.typ}} {{arg.ptr}}[{{arg.dim}}];
                {% for d in range(arg.dim) %}
    {{indent[0] * "    "}}{{arg.ptr}}[{{d}}] = p_a{{arg.id}}[{{d}}];
                {% endfor %} {# need +INFINITY_ change to #}
            {% endif %}
            {% if arg is max %}
    {{indent[0] * "    "}}{{arg.typ}} {{arg.ptr}}[{{arg.dim}}];
                {% for d in range(arg.dim) %}
    {{indent[0] * "    "}}{{arg.ptr}}[{{d}}] = p_a{{arg.id}}[{{d}}];
                {% endfor %} {# need -INFINITY_ change to #}
            {% endif %}
            {% if arg is inc %}
    {{indent[0] * "    "}}{{arg.typ}} {{arg.ptr}}[{{arg.dim}}];
                {% for d in range(arg.dim) %}
    {{indent[0] * "    "}}{{arg.ptr}}[{{d}}] = ZERO_{{arg.typ}};
                {% endfor %} 
            {% endif %}
            {% if arg is write %}
    {{indent[0] * "    "}}{{arg.typ}} {{arg.ptr}}[{{arg.dim}}];
                {% for d in range(arg.dim) %}
    {{indent[0] * "    "}}{{arg.ptr}}[{{d}}] = ZERO_{{arg.typ}};
                {% endfor %} 
            {% endif %}
        {% endif %}
    {% endfor %}

    {# Insert kernels #}
    {% set arglist = [""]%}

    {# Generate argument list for placing in elemental kernel call #}
    {% for i in range(0, lh.args|length-1) %}
        {% if lh.args[i] is dat %}
            {% if arglist.append(arglist.pop() + " " + "argsDat"+i|string + ", ") %}{% endif %}
        {% elif lh.args[i] is idx %}
            {% if arglist.append(arglist.pop() + " " + "idx, ") %}{% endif %}
        {% elif lh.args[i] is gbl %}
            {% if arglist.append(arglist.pop() + " " + "argsDat"+i|string + ", ") %}{% endif %}
        {% elif lh.args[i] is reduce %} 
            {% if arglist.append(arglist.pop() + " " + lh.args[i].ptr + ", ") %}{% endif %}
        {% endif %}
    {% endfor %}

    {# Handling last argument separately to avoid placing comma #}
    {% if lh.args[lh.args|length - 1] is dat %}
        {% if arglist.append(arglist.pop() + " " + "argsDat"+(lh.args|length - 1)|string) %}{% endif %}
    {% elif lh.args[lh.args|length - 1] is idx%}
        {% if arglist.append(arglist.pop() + " " + "idx") %}{% endif %}
    {% elif lh.args[lh.args|length - 1] is gbl %}
        {% if arglist.append(arglist.pop() + " " + "argsDat"+(lh.args|length - 1)|string) %}{% endif %}
    {% elif lh.args[lh.args|length - 1] is reduce %}
        {% if arglist.append(arglist.pop() + " " + lh.args[lh.args|length - 1].ptr) %}{% endif %}
    {% endif %}

    {{indent[0] * "    "}}ops_k{{kernel_idx}}::{{lh.kernel}}({{arglist[0]}});

    {% for arg in lh.args %}
        {% if arg is gbl or arg is reduce %}
            {% if arg is min %}
                {% for d in range(arg.dim) %}
                    {{indent[0] * "    "}}p_a{{arg.id}}_{{d}} = MIN(p_a{{arg.id}}_{{d}}, {{arg.ptr}}[{{d}}]);
                {% endfor %}            
            {% endif %}
            {% if arg is max %}
                {% for d in range(arg.dim) %}
                    {{indent[0] * "    "}}p_a{{arg.id}}_{{d}} = MAX(p_a{{arg.id}}_{{d}}, {{arg.ptr}}[{{d}}]);
                {% endfor %}            
            {% endif %}
            {% if arg is inc %}
                {% for d in range(arg.dim) %}
                    {{indent[0] * "    "}}p_a{{arg.id}}_{{d}} += {{arg.ptr}}[{{d}}];
                {% endfor %}            
            {% endif %}
            {#      {% if arg is inc %}
                    {% for d in range(arg.dim) %}
                    {{indent[0] * "    "}}p_a{{arg.id}}_{{d}} += {{arg.name}}[{{d}}];
                    {% endfor %}            
                    {% endif %} #}
        {% endif %}
    {% endfor %}

    {% if indent.append(indent.pop() - 1) %}{% endif %}
    {{indent[0] * "    "}}}

    {% if lh.ndim > 1 %}
        {% if indent.append(indent.pop() - 1) %}{% endif %}
    {{indent[0] * "  "}}}
    {% endif %} 
    {% if lh.ndim > 2 %}
        {% if indent.append(indent.pop() - 1) %}{% endif %}
    {{indent[0] * ""}}}
    {% endif %}  

    {% for arg in lh.args %}
        {% if arg is gbl or arg is reduce %}
            {% if not arg is read %}
                {% for d in range(arg.dim) %}
    p_a{{arg.id}}[{{d}}] = p_a{{arg.id}}_{{d}};    
                {% endfor %}
            {% endif %}
        {% endif %}
    {% endfor %}        
{% endblock %}

{% block host_epilogue %}
    if (block->instance->OPS_diags > 1)
    {
        ops_timers_core(&__c2, &__t2);
        block->instance->OPS_kernels[{{kernel_idx}}].time += __t2 - __t1;
    }

#ifndef OPS_LAZY
    ops_set_dirtybit_host(args, {{lh.args|length}});
    {% for arg in lh.args %}
        {% if arg is dat and (arg is write or arg is read_write or arg is inc) %}
    ops_set_halo_dirtybit3(&args[{{arg.id}}], range);
        {% endif %}
    {% endfor %}
#endif

{{super()}}
{% endblock %}

