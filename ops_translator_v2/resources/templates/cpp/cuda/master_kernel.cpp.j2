{% extends "cpp/master_kernel.cpp.j2" %}

{% block ops_headers %}
{{super()}}
{% if target.name == "cuda" %}
#include "ops_cuda_rt_support.h"
#include "ops_cuda_reduction.h"

#include <cuComplex.h>
{% elif target.name == "hip" %}
#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"
{% endif %}

{% if user_types %}
#define OPS_FUN_PREFIX __device__ __host__
#include "user_types.h"
{% endif %}
{% endblock %}

{% block initializaion %}
{{super()}}
{% endblock %}

{% block const_decls %}
//  global constants
    {% for const in app.consts() %}
    {% if const.dim.isdigit() %}
        {% set NDIM = const.dim|int %}
            {% if NDIM > 1 %}
__constant__ {{const.typ}} {{const.ptr}}[{{NDIM}}];
            {% else %}
__constant__ {{const.typ}} {{const.ptr}};
            {% endif %}
    {% else %}
__constant__ {{const.typ}} *{{const.ptr}};
    {% endif %}
    {% endfor %}

void ops_init_backend(){}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type, int size, char *dat, char const *name) {
    ops_execute(instance);

    {% for const in app.consts() %}
    if(!strcmp(name, "{{const.ptr}}")) {
        {% if const.dim.isdigit() %}
            {% if target.name == "cuda" %}
        cutilSafeCall(instance->ostream(), cudaMemcpyToSymbol({{const.ptr}}, dat, dim*size));
            {% elif target.name == "hip" %}
        hipSafeCall(instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL({{const.ptr}}), dat, dim*size));
            {% endif %}
        {% else %}
            {% if target.name == "cuda" %}
        char *temp; cutilSafeCall(instance->ostream(), cudaMalloc((void**)&temp, dim*size));
        cutilSafeCall(instance->ostream(), cudaMemcpy(temp, dat, dim*size, cudaMemcpyHostToDevice));
        cutilSafeCall(instance->ostream(), cudaMemcpyToSymbol({{const.ptr}}, &temp, sizeof(char *)));
            {% elif target.name == "hip" %}
        char *temp; hipSafeCall(instance->ostream(), hipMalloc((void**)&temp, dim*size));
        hipSafeCall(instance->ostream(), hipMemcpy(temp, dat, dim*size, hipMemcpyHostToDevice));
        hipSafeCall(instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL({{const.ptr}}), &temp, sizeof(char *)));
            {% endif %}
        {% endif %}
    } 
    else
    {% if loop.last %}
    {
        throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
    }
    {% endif %}
    {% endfor %}
}
{% endblock %}

{% block header_includes %}
{{super()}}
{% endblock %}
